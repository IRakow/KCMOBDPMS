// App.jsx
const App =()=>{const [currentPage,setCurrentPage] = React.useState('login');const [user,setUser] = React.useState(null);const [showDropdown,setShowDropdown] = React.useState(false);const [silenceMode,setSilenceMode] = React.useState(()=>{return localStorage.getItem('silenceMode')=== 'true'});React.useEffect(()=>{const unsubscribe = window.authManager.subscribe(setUser);window.authManager.checkAuth();return unsubscribe},[]);React.useEffect(()=>{const path = window.location.pathname;if(path === '/' || path === '/login'){setCurrentPage('login')}else{setCurrentPage(path.slice(1))}},[]);React.useEffect(()=>{const handleClickOutside =(event)=>{if(showDropdown && !event.target.closest('.user-dropdown-container')){setShowDropdown(false)}};document.addEventListener('click',handleClickOutside);return()=> document.removeEventListener('click',handleClickOutside)},[showDropdown]);React.useEffect(()=>{localStorage.setItem('silenceMode',silenceMode);window.silenceMode = silenceMode;window.dispatchEvent(new CustomEvent('silenceModeChanged',{detail:silenceMode}))},[silenceMode]);if(currentPage === 'login' && !user){return <Login />}if(!user){return(<div style={{display:'flex',justifyContent:'center',alignItems:'center',minHeight:'100vh'}}><div className="loading-spinner"></div></div>)}if(user.role === 'super_admin'){const adminPortal = <AdminPortalV3 user={user}onLogout={()=> window.authManager.logout()}/>;if(window.AppModules && window.AppModules.PropertyProvider){return React.createElement(window.AppModules.PropertyProvider,{},adminPortal)}return adminPortal}const portalName = user.role.split('_').map(word => word.charAt(0).toUpperCase()+ word.slice(1)).join(' ');return(<div style={{minHeight:'100vh',backgroundColor:'var(--color-surface-alt)'}}><header style={{backgroundColor:'var(--color-surface)',borderBottom:'1px solid var(--color-border)',padding:'16px 0'}}><div className="container" style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}><h1 style={{fontSize:'20px',fontWeight:'600'}}>{portalName}Portal </h1><div className="user-dropdown-container" style={{position:'relative'}}><div style={{display:'flex',alignItems:'center',gap:'8px',padding:'8px 12px',borderRadius:'6px',cursor:'pointer',transition:'background-color 0.2s',backgroundColor:showDropdown ? 'var(--color-surface-hover)':'transparent'}}onClick={()=> setShowDropdown(!showDropdown)}onMouseEnter={(e)=> e.currentTarget.style.backgroundColor = 'var(--color-surface-hover)'}onMouseLeave={(e)=> e.currentTarget.style.backgroundColor = showDropdown ? 'var(--color-surface-hover)':'transparent'}><span style={{fontSize:'14px',color:'var(--color-text-primary)'}}>{user.first_name}{user.last_name}</span><i className={`fas fa-chevron-${showDropdown ? 'up':'down'}`}style={{fontSize:'12px',color:'var(--color-text-secondary)'}}></i></div>{showDropdown &&(<div style={{position:'absolute',top:'100%',right:0,marginTop:'8px',minWidth:'200px',backgroundColor:'var(--color-surface)',border:'1px solid var(--color-border)',borderRadius:'8px',boxShadow:'0 4px 12px rgba(0,0,0,0.15)',zIndex:1000}}><div style={{padding:'12px 16px',borderBottom:'1px solid var(--color-border)',fontSize:'12px',color:'var(--color-text-secondary)'}}>{portalName}Portal </div><div style={{display:'flex',alignItems:'center',gap:'12px',padding:'12px 16px',cursor:'pointer',transition:'background-color 0.2s',fontSize:'14px',color:'var(--color-text-primary)'}}onClick={()=>}onMouseEnter={(e)=> e.currentTarget.style.backgroundColor = 'var(--color-surface-hover)'}onMouseLeave={(e)=> e.currentTarget.style.backgroundColor = 'transparent'}><i className="fas fa-user" style={{width:'16px'}}></i><span>Profile</span></div><div style={{display:'flex',alignItems:'center',gap:'12px',padding:'12px 16px',cursor:'pointer',transition:'background-color 0.2s',fontSize:'14px',color:'var(--color-text-primary)'}}onClick={()=>}onMouseEnter={(e)=> e.currentTarget.style.backgroundColor = 'var(--color-surface-hover)'}onMouseLeave={(e)=> e.currentTarget.style.backgroundColor = 'transparent'}><i className="fas fa-cog" style={{width:'16px'}}></i><span>Settings</span></div><div style={{display:'flex',alignItems:'center',gap:'12px',padding:'12px 16px',cursor:'pointer',transition:'background-color 0.2s',fontSize:'14px',color:'var(--color-text-primary)'}}onClick={(e)=>{e.stopPropagation();setSilenceMode(!silenceMode)}}onMouseEnter={(e)=> e.currentTarget.style.backgroundColor = 'var(--color-surface-hover)'}onMouseLeave={(e)=> e.currentTarget.style.backgroundColor = 'transparent'}><i className={`fas fa-volume-${silenceMode ? 'mute':'up'}`}style={{width:'16px'}}></i><span>{silenceMode ? 'Enable Voice Mode':'Enable Silence Mode'}</span><div style={{marginLeft:'auto',width:'40px',height:'20px',backgroundColor:silenceMode ? '#ef4444':'#10b981',borderRadius:'10px',position:'relative',transition:'background-color 0.3s',cursor:'pointer'}}><div style={{position:'absolute',top:'2px',left:silenceMode ? '2px':'20px',width:'16px',height:'16px',backgroundColor:'white',borderRadius:'50%',transition:'left 0.3s',boxShadow:'0 2px 4px rgba(0,0,0,0.2)'}}></div></div></div><div style={{height:'1px',backgroundColor:'var(--color-border)',margin:'4px 0'}}></div><div style={{display:'flex',alignItems:'center',gap:'12px',padding:'12px 16px',cursor:'pointer',transition:'background-color 0.2s',fontSize:'14px',color:'var(--color-error)',borderRadius:'0 0 8px 8px'}}onClick={()=>{if(confirm('Are you sure you want to logout?')){window.authManager.logout()}}}onMouseEnter={(e)=> e.currentTarget.style.backgroundColor = 'rgba(239,68,68,0.1)'}onMouseLeave={(e)=> e.currentTarget.style.backgroundColor = 'transparent'}><i className="fas fa-sign-out-alt" style={{width:'16px'}}></i><span>Logout</span></div></div>)}</div></div></header><main className="container" style={{paddingTop:'32px',paddingBottom:'32px'}}><Card><h2 style={{fontSize:'24px',fontWeight:'600',marginBottom:'16px'}}> Welcome to your{portalName}Portal </h2><p style={{color:'var(--color-text-secondary)'}}> This portal is currently under construction. Features specific to your role will be added here. </p></Card></main></div>)};

// index.jsx
const root = ReactDOM.createRoot(document.getElementById('root'));root.render(<App />);

// MaintenanceCrud.jsx
const MaintenanceModal =({item,onClose,onSave})=>{const [formData,setFormData] = React.useState({property_id:item?.property_id || '',unit_id:item?.unit_id || '',title:item?.title || '',description:item?.description || '',priority:item?.priority || 'medium',category:item?.category || 'general',status:item?.status || 'open'});const handleSubmit = async(e)=>{e.preventDefault();await onSave(formData);onClose()};return(<div className="modal-overlay" onClick={onClose}><div className="modal" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>{item ? 'Edit':'Create'}Maintenance Request</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body"><div className="form-group"><label>Title *</label><input type="text" className="form-control" value={formData.title}onChange={(e)=> setFormData({...formData,title:e.target.value})}required /></div><div className="form-group"><label>Description</label><textarea className="form-control" rows="4" value={formData.description}onChange={(e)=> setFormData({...formData,description:e.target.value})}/></div><div className="form-row"><div className="form-group"><label>Priority</label><select className="form-control" value={formData.priority}onChange={(e)=> setFormData({...formData,priority:e.target.value})}><option value="low">Low</option><option value="medium">Medium</option><option value="high">High</option><option value="emergency">Emergency</option></select></div><div className="form-group"><label>Category</label><select className="form-control" value={formData.category}onChange={(e)=> setFormData({...formData,category:e.target.value})}><option value="general">General</option><option value="plumbing">Plumbing</option><option value="electrical">Electrical</option><option value="hvac">HVAC</option><option value="appliance">Appliance</option></select></div></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary">{item ? 'Update':'Create'}Request </button></div></form></div></div>)};const MaintenanceCrud = window.CrudModulePattern.createModule({moduleName:'maintenance requests',moduleNameSingular:'request',endpoint:'/maintenance',stateKey:'maintenance',searchable:true,defaultView:'grid',columns:[{key:'title',label:'Title'},{key:'priority',label:'Priority'},{key:'category',label:'Category'},{key:'status',label:'Status'},{key:'created_at',label:'Created',render:(item)=> new Date(item.created_at).toLocaleDateString()}],filters:[{key:'priority',label:'Priority',options:[{value:'emergency',label:'Emergency'},{value:'high',label:'High'},{value:'medium',label:'Medium'},{value:'low',label:'Low'}]},{key:'status',label:'Status',options:[{value:'open',label:'Open'},{value:'in_progress',label:'In Progress'},{value:'completed',label:'Completed'}]}],cardRenderer:({item,onEdit,onDelete})=>(<div key={item.id}className="maintenance-card"><div className="maintenance-header"><h3>{item.title}</h3><span className={`priority priority-${item.priority}`}>{item.priority}</span></div><p className="maintenance-desc">{item.description}</p><div className="maintenance-meta"><span><i className="fas fa-tag"></i>{item.category}</span><span><i className="fas fa-clock"></i>{item.status}</span></div><div className="card-actions"><button className="btn-icon" onClick={onEdit}><i className="fas fa-edit"></i></button><button className="btn-icon danger" onClick={onDelete}><i className="fas fa-trash"></i></button></div></div>),modalComponent:MaintenanceModal,calculateStats:(items)=>({open:items.filter(i => i.status === 'open').length,emergency:items.filter(i => i.priority === 'emergency').length})});const maintenanceStyles = ` .maintenance-card{background:white;border:1px solid #e5e7eb;border-radius:12px;padding:20px;transition:all 0.2s}.maintenance-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:12px}.maintenance-header h3{margin:0;font-size:18px}.priority{padding:4px 12px;border-radius:20px;font-size:12px;font-weight:600;text-transform:uppercase}.priority-emergency{background:#fee2e2;color:#dc2626}.priority-high{background:#fed7aa;color:#ea580c}.priority-medium{background:#fef3c7;color:#d97706}.priority-low{background:#dbeafe;color:#1e40af}.maintenance-desc{color:#6b7280;margin:12px 0;line-height:1.5}.maintenance-meta{display:flex;gap:16px;font-size:14px;color:#9ca3af;margin-bottom:16px}.maintenance-meta i{margin-right:4px}`;if(!document.querySelector('#maintenance-styles')){const styleSheet = document.createElement('style');styleSheet.id = 'maintenance-styles';styleSheet.textContent = maintenanceStyles;document.head.appendChild(styleSheet)}window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceCrud = MaintenanceCrud;

// LeasesCrud.jsx
const LeasesModal =({item,onClose,onSave})=>{const [formData,setFormData] = React.useState({property_id:item?.property_id || '',unit_id:item?.unit_id || '',tenant_id:item?.tenant_id || '',start_date:item?.start_date || '',end_date:item?.end_date || '',rent_amount:item?.rent_amount || '',deposit_amount:item?.deposit_amount || '',lease_type:item?.lease_type || 'fixed_term',status:item?.status || 'draft'});const [saving,setSaving] = React.useState(false);const [properties,setProperties] = React.useState([]);const [units,setUnits] = React.useState([]);const [tenants,setTenants] = React.useState([]);React.useEffect(()=>{loadDropdownData()},[]);React.useEffect(()=>{if(formData.property_id){loadUnitsForProperty(formData.property_id)}},[formData.property_id]);const loadDropdownData = async()=>{try{const [propsRes,tenantsRes] = await Promise.all([ window.ApiService.get('/properties'),window.ApiService.get('/tenants')]);setProperties(propsRes.results || propsRes);setTenants(tenantsRes.results || tenantsRes)}catch(error){console.error('Failed to load dropdown data:',error)}};const loadUnitsForProperty = async(propertyId)=>{try{const response = await window.ApiService.get(`/properties/${propertyId}/units`);setUnits(response.results || response)}catch(error){console.error('Failed to load units:',error)}};const handleSubmit = async(e)=>{e.preventDefault();setSaving(true);try{const leaseData ={...formData,rent_amount:parseFloat(formData.rent_amount),deposit_amount:parseFloat(formData.deposit_amount)};await onSave(leaseData);onClose()}catch(error){console.error('Save failed:',error)}finally{setSaving(false)}};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-large" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>{item ? 'Edit Lease':'Create New Lease'}</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body"><div className="form-section"><h3>Property & Unit</h3><div className="form-row"><div className="form-group"><label>Property *</label><select className="form-control" value={formData.property_id}onChange={(e)=> setFormData({...formData,property_id:e.target.value,unit_id:''})}required ><option value="">Select Property</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}</option>))}</select></div><div className="form-group"><label>Unit *</label><select className="form-control" value={formData.unit_id}onChange={(e)=> setFormData({...formData,unit_id:e.target.value})}required disabled={!formData.property_id}><option value="">Select Unit</option>{units.map(unit =>(<option key={unit.id}value={unit.id}> Unit{unit.unit_number}</option>))}</select></div></div></div><div className="form-section"><h3>Tenant</h3><div className="form-group"><label>Tenant *</label><select className="form-control" value={formData.tenant_id}onChange={(e)=> setFormData({...formData,tenant_id:e.target.value})}required ><option value="">Select Tenant</option>{tenants.map(tenant =>(<option key={tenant.id}value={tenant.id}>{tenant.first_name}{tenant.last_name}</option>))}</select></div></div><div className="form-section"><h3>Lease Terms</h3><div className="form-row"><div className="form-group"><label>Start Date *</label><input type="date" className="form-control" value={formData.start_date}onChange={(e)=> setFormData({...formData,start_date:e.target.value})}required /></div><div className="form-group"><label>End Date *</label><input type="date" className="form-control" value={formData.end_date}onChange={(e)=> setFormData({...formData,end_date:e.target.value})}required /></div></div><div className="form-row"><div className="form-group"><label>Monthly Rent *</label><input type="number" className="form-control" value={formData.rent_amount}onChange={(e)=> setFormData({...formData,rent_amount:e.target.value})}placeholder="0.00" step="0.01" required /></div><div className="form-group"><label>Security Deposit *</label><input type="number" className="form-control" value={formData.deposit_amount}onChange={(e)=> setFormData({...formData,deposit_amount:e.target.value})}placeholder="0.00" step="0.01" required /></div></div><div className="form-row"><div className="form-group"><label>Lease Type</label><select className="form-control" value={formData.lease_type}onChange={(e)=> setFormData({...formData,lease_type:e.target.value})}><option value="fixed_term">Fixed Term</option><option value="month_to_month">Month to Month</option><option value="short_term">Short Term</option></select></div><div className="form-group"><label>Status</label><select className="form-control" value={formData.status}onChange={(e)=> setFormData({...formData,status:e.target.value})}><option value="draft">Draft</option><option value="pending">Pending</option><option value="active">Active</option><option value="expiring">Expiring</option><option value="expired">Expired</option></select></div></div></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary" disabled={saving}>{saving ? 'Saving...':(item ? 'Update':'Create')}Lease </button></div></form></div></div>)};const LeasesCrud = window.CrudModulePattern.createModule({moduleName:'leases',moduleNameSingular:'lease',endpoint:'/leases',stateKey:'leases',searchable:true,defaultView:'table',columns:[{key:'property_name',label:'Property',render:(lease)=> lease.property?.name || 'N/A'},{key:'unit_number',label:'Unit',render:(lease)=> lease.unit?.unit_number || 'N/A'},{key:'tenant_name',label:'Tenant',render:(lease)=> lease.tenant ? `${lease.tenant.first_name}${lease.tenant.last_name}`:'N/A'},{key:'start_date',label:'Start Date',render:(lease)=> new Date(lease.start_date).toLocaleDateString()},{key:'end_date',label:'End Date',render:(lease)=> new Date(lease.end_date).toLocaleDateString()},{key:'rent_amount',label:'Rent',render:(lease)=> `$${lease.rent_amount?.toLocaleString()}`},{key:'status',label:'Status',render:(lease)=>(`<span class="status-badge status-${lease.status}"> ${lease.status}</span>`)}],filters:[{key:'status',label:'Status',options:[{value:'active',label:'Active'},{value:'pending',label:'Pending'},{value:'expiring',label:'Expiring'},{value:'expired',label:'Expired'}]}],cardRenderer:({item:lease,onEdit,onDelete})=>(<div key={lease.id}className="lease-card"><div className="lease-card-header"><h3>{lease.property?.name || 'Unknown Property'}</h3><span className={`status-badge status-${lease.status}`}>{lease.status}</span></div><div className="lease-details"><div className="detail-row"><i className="fas fa-door-open"></i><span>Unit{lease.unit?.unit_number || 'N/A'}</span></div><div className="detail-row"><i className="fas fa-user"></i><span>{lease.tenant ? `${lease.tenant.first_name}${lease.tenant.last_name}`:'No Tenant'}</span></div><div className="detail-row"><i className="fas fa-calendar"></i><span>{new Date(lease.start_date).toLocaleDateString()}-{new Date(lease.end_date).toLocaleDateString()}</span></div><div className="detail-row"><i className="fas fa-dollar-sign"></i><span>${lease.rent_amount?.toLocaleString()}/mo</span></div></div><div className="card-actions"><button className="btn-icon" onClick={onEdit}><i className="fas fa-edit"></i></button><button className="btn-icon danger" onClick={onDelete}><i className="fas fa-trash"></i></button></div></div>),modalComponent:LeasesModal,calculateStats:(leases)=>({active:leases.filter(l => l.status === 'active').length,expiring:leases.filter(l => l.status === 'expiring').length,totalRent:leases .filter(l => l.status === 'active').reduce((sum,l)=> sum +(l.rent_amount || 0),0)})});const leaseStyles = ` .lease-card{background:white;border:1px solid #e5e7eb;border-radius:12px;padding:20px;transition:all 0.2s}.lease-card:hover{box-shadow:0 4px 12px rgba(0,0,0,0.1);transform:translateY(-2px)}.lease-card-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px}.lease-card-header h3{margin:0;font-size:18px;font-weight:600;color:#1f2937}.status-badge{padding:4px 12px;border-radius:20px;font-size:12px;font-weight:600;text-transform:uppercase}.status-badge.status-active{background:#d1fae5;color:#065f46}.status-badge.status-pending{background:#fef3c7;color:#92400e}.status-badge.status-expiring{background:#fee2e2;color:#991b1b}.status-badge.status-expired{background:#f3f4f6;color:#6b7280}.lease-details{margin:16px 0}.detail-row{display:flex;align-items:center;gap:12px;margin:8px 0;color:#6b7280;font-size:14px}.detail-row i{width:16px;color:#9ca3af}.modal-large{max-width:800px}.form-section{margin-bottom:24px}.form-section h3{margin:0 0 16px 0;font-size:16px;font-weight:600;color:#374151;padding-bottom:8px;border-bottom:1px solid #e5e7eb}`;if(!document.querySelector('#lease-styles')){const styleSheet = document.createElement('style');styleSheet.id = 'lease-styles';styleSheet.textContent = leaseStyles;document.head.appendChild(styleSheet)}window.AppModules = window.AppModules ||{};window.AppModules.LeasesCrud = LeasesCrud;

// LeadManagementSystem.jsx
const LeadManagementSystem =()=>{const [leads,setLeads] = React.useState([]);const [selectedLead,setSelectedLead] = React.useState(null);const [viewMode,setViewMode] = React.useState('pipeline');const [filterStatus,setFilterStatus] = React.useState('all');const [searchTerm,setSearchTerm] = React.useState('');const [showLeadModal,setShowLeadModal] = React.useState(false);React.useEffect(()=>{loadLeads()},[]);const loadLeads =()=>{const mockLeads = [{id:'lead_001',name:'Sarah Johnson',email:'sarah.johnson@email.com',phone:'(555)123-4567',status:'hot',ai_score:92,source:'Website',property_interest:'Sunset Apartments - Unit 205',budget:2500,move_in_date:'2024-08-15',created_at:'2024-07-10T10:30:00Z',last_contact:'2024-07-13T14:20:00Z',interactions:8,engagement_score:95,qualification_status:'qualified',ai_insights:{likelihood_to_lease:'Very High(92%)',predicted_revenue:2400,risk_factors:[],next_best_action:'Schedule showing immediately',timeline_prediction:'3-5 days to lease'},activities:[{type:'email_open',timestamp:'2024-07-13T14:20:00Z',description:'Opened property tour email'},{type:'website_visit',timestamp:'2024-07-13T12:15:00Z',description:'Viewed unit photos 3 times'},{type:'inquiry',timestamp:'2024-07-12T16:30:00Z',description:'Asked about pet policy'}],tags:['high-priority','qualified','ready-to-move']},{id:'lead_002',name:'Michael Chen',email:'mchen@company.com',phone:'(555)234-5678',status:'warm',ai_score:76,source:'Zillow',property_interest:'Downtown Plaza - Unit 312',budget:2800,move_in_date:'2024-09-01',created_at:'2024-07-08T09:15:00Z',last_contact:'2024-07-11T11:45:00Z',interactions:4,engagement_score:72,qualification_status:'in_progress',ai_insights:{likelihood_to_lease:'Moderate(76%)',predicted_revenue:2800,risk_factors:['Price sensitivity','Comparing multiple options'],next_best_action:'Send competitive analysis and schedule call',timeline_prediction:'7-10 days to decision'},activities:[{type:'form_submit',timestamp:'2024-07-11T11:45:00Z',description:'Submitted application inquiry'},{type:'phone_call',timestamp:'2024-07-10T15:20:00Z',description:'15-minute qualification call'}],tags:['zillow-lead','price-sensitive','comparing-options']},{id:'lead_003',name:'Emily Rodriguez',email:'emily.r@startup.io',phone:'(555)345-6789',status:'cold',ai_score:45,source:'Referral',property_interest:'Garden Complex - Studio',budget:1800,move_in_date:'2024-10-01',created_at:'2024-07-05T14:22:00Z',last_contact:'2024-07-07T10:30:00Z',interactions:2,engagement_score:38,qualification_status:'unqualified',ai_insights:{likelihood_to_lease:'Low(45%)',predicted_revenue:1800,risk_factors:['Low engagement','Long timeline','Budget constraints'],next_best_action:'Add to nurture campaign,check back in 30 days',timeline_prediction:'45-60 days to decision'},activities:[{type:'email_reply',timestamp:'2024-07-07T10:30:00Z',description:'Replied to welcome email'},{type:'referral',timestamp:'2024-07-05T14:22:00Z',description:'Referred by current tenant Lisa Garcia'}],tags:['referral','long-timeline','nurture-campaign']},{id:'lead_004',name:'David Wilson',email:'dwilson.consulting@gmail.com',phone:'(555)456-7890',status:'hot',ai_score:88,source:'Facebook Ads',property_interest:'Riverside Tower - Unit 1204',budget:3200,move_in_date:'2024-08-01',created_at:'2024-07-09T11:10:00Z',last_contact:'2024-07-13T09:15:00Z',interactions:12,engagement_score:89,qualification_status:'qualified',ai_insights:{likelihood_to_lease:'Very High(88%)',predicted_revenue:3200,risk_factors:['High expectations for amenities'],next_best_action:'Highlight premium amenities during showing',timeline_prediction:'2-4 days to lease'},activities:[{type:'showing_scheduled',timestamp:'2024-07-13T09:15:00Z',description:'Scheduled showing for July 15th'},{type:'website_visit',timestamp:'2024-07-12T19:45:00Z',description:'Spent 18 minutes on amenities page'},{type:'chat_conversation',timestamp:'2024-07-11T16:30:00Z',description:'22-minute chat about lease terms'}],tags:['facebook-lead','premium-seeker','showing-scheduled']}];setLeads(mockLeads)};const getLeadsByStatus =(status)=>{return leads.filter(lead => status === 'all' || lead.status === status)};const getScoreColor =(score)=>{if(score >= 80)return '#10b981';if(score >= 60)return '#f59e0b';return '#ef4444'};const getStatusColor =(status)=>{const colors ={hot:'#dc2626',warm:'#f59e0b',cold:'#6b7280'};return colors[status] || '#6b7280'};const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount)};const formatDate =(dateString)=>{return new Date(dateString).toLocaleDateString('en-US',{month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'})};const filteredLeads = leads.filter(lead =>{const matchesStatus = filterStatus === 'all' || lead.status === filterStatus;const matchesSearch = !searchTerm || lead.name.toLowerCase().includes(searchTerm.toLowerCase())|| lead.email.toLowerCase().includes(searchTerm.toLowerCase())|| lead.property_interest.toLowerCase().includes(searchTerm.toLowerCase());return matchesStatus && matchesSearch});const PipelineView =()=>{const statusColumns = [{key:'cold',title:'Cold Leads',color:'#6b7280'},{key:'warm',title:'Warm Leads',color:'#f59e0b'},{key:'hot',title:'Hot Leads',color:'#dc2626'}];return(<div className="pipeline-view"><div className="pipeline-header"><div className="pipeline-stats"><div className="stat-card"><span className="stat-value">{leads.length}</span><span className="stat-label">Total Leads</span></div><div className="stat-card"><span className="stat-value">{leads.filter(l => l.status === 'hot').length}</span><span className="stat-label">Hot Leads</span></div><div className="stat-card"><span className="stat-value">{Math.round(leads.reduce((sum,l)=> sum + l.ai_score,0)/ leads.length)}%</span><span className="stat-label">Avg AI Score</span></div><div className="stat-card"><span className="stat-value">{formatCurrency(leads.reduce((sum,l)=> sum + l.ai_insights.predicted_revenue,0))}</span><span className="stat-label">Pipeline Value</span></div></div><div className="pipeline-controls"><input type="text" placeholder="Search leads..." value={searchTerm}onChange={(e)=> setSearchTerm(e.target.value)}className="search-input" /><button className="btn btn-primary" onClick={()=> setShowLeadModal(true)}><i className="fas fa-plus"></i> Add Lead </button></div></div><div className="pipeline-columns">{statusColumns.map(column =>{const columnLeads = filteredLeads.filter(lead => lead.status === column.key);return(<div key={column.key}className="pipeline-column"><div className="column-header" style={{borderColor:column.color}}><h3 style={{color:column.color}}>{column.title}</h3><span className="lead-count">{columnLeads.length}</span></div><div className="column-content">{columnLeads.map(lead =>(<div key={lead.id}className="lead-card" onClick={()=> setSelectedLead(lead)}><div className="lead-header"><div className="lead-name">{lead.name}</div><div className="ai-score" style={{backgroundColor:getScoreColor(lead.ai_score)}}>{lead.ai_score}</div></div><div className="lead-details"><div className="lead-property">{lead.property_interest}</div><div className="lead-budget">{formatCurrency(lead.budget)}/month</div><div className="lead-source">{lead.source}</div></div><div className="lead-insights"><div className="insight-item"><i className="fas fa-brain"></i>{lead.ai_insights.likelihood_to_lease}</div><div className="next-action"><i className="fas fa-lightbulb"></i>{lead.ai_insights.next_best_action}</div></div><div className="lead-footer"><span className="last-contact"> Last:{formatDate(lead.last_contact)}</span><div className="lead-tags">{lead.tags.slice(0,2).map(tag =>(<span key={tag}className="tag">{tag}</span>))}</div></div></div>))}</div></div>)})}</div></div>)};const LeadDetailModal =({lead,onClose})=>{const [activeTab,setActiveTab] = React.useState('overview');if(!lead)return null;return(<div className="modal-overlay" onClick={onClose}><div className="lead-detail-modal" onClick={e => e.stopPropagation()}><div className="modal-header"><div className="lead-header-info"><h2>{lead.name}</h2><div className="lead-meta"><span className={`status-badge ${lead.status}`}>{lead.status.toUpperCase()}</span><span className="ai-score-large" style={{backgroundColor:getScoreColor(lead.ai_score)}}> AI Score:{lead.ai_score}</span></div></div><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-tabs">{['overview','ai-insights','activity','communication'].map(tab =>(<button key={tab}className={`tab ${activeTab === tab ? 'active':''}`}onClick={()=> setActiveTab(tab)}>{tab.replace('-',' ').toUpperCase()}</button>))}</div><div className="modal-content">{activeTab === 'overview' &&(<div className="overview-tab"><div className="contact-info"><h3>Contact Information</h3><div className="info-grid"><div className="info-item"><label>Email:</label><span>{lead.email}</span></div><div className="info-item"><label>Phone:</label><span>{lead.phone}</span></div><div className="info-item"><label>Source:</label><span>{lead.source}</span></div><div className="info-item"><label>Property Interest:</label><span>{lead.property_interest}</span></div><div className="info-item"><label>Budget:</label><span>{formatCurrency(lead.budget)}/month</span></div><div className="info-item"><label>Move-in Date:</label><span>{new Date(lead.move_in_date).toLocaleDateString()}</span></div></div></div><div className="qualification-status"><h3>Qualification Status</h3><div className="qualification-grid"><div className="qual-item"><label>Status:</label><span className={`qual-badge ${lead.qualification_status}`}>{lead.qualification_status.replace('_',' ').toUpperCase()}</span></div><div className="qual-item"><label>Interactions:</label><span>{lead.interactions}</span></div><div className="qual-item"><label>Engagement Score:</label><span>{lead.engagement_score}%</span></div></div></div></div>)}{activeTab === 'ai-insights' &&(<div className="ai-insights-tab"><div className="ai-prediction"><h3>AI Predictions</h3><div className="prediction-grid"><div className="prediction-item"><label>Likelihood to Lease:</label><span className="prediction-value">{lead.ai_insights.likelihood_to_lease}</span></div><div className="prediction-item"><label>Predicted Revenue:</label><span className="prediction-value">{formatCurrency(lead.ai_insights.predicted_revenue)}</span></div><div className="prediction-item"><label>Timeline Prediction:</label><span className="prediction-value">{lead.ai_insights.timeline_prediction}</span></div></div></div><div className="ai-recommendations"><h3>AI Recommendations</h3><div className="recommendation-card"><div className="next-action"><i className="fas fa-lightbulb"></i><strong>Next Best Action:</strong><p>{lead.ai_insights.next_best_action}</p></div></div></div>{lead.ai_insights.risk_factors.length > 0 &&(<div className="risk-factors"><h3>Risk Factors</h3><div className="risk-list">{lead.ai_insights.risk_factors.map((risk,index)=>(<div key={index}className="risk-item"><i className="fas fa-exclamation-triangle"></i>{risk}</div>))}</div></div>)}</div>)}{activeTab === 'activity' &&(<div className="activity-tab"><h3>Activity Timeline</h3><div className="activity-timeline">{lead.activities.map((activity,index)=>(<div key={index}className="activity-item"><div className="activity-icon"><i className={`fas fa-${activity.type === 'email_open' ? 'envelope-open':activity.type === 'website_visit' ? 'globe':activity.type === 'phone_call' ? 'phone':activity.type === 'form_submit' ? 'wpforms':activity.type === 'showing_scheduled' ? 'calendar':activity.type === 'chat_conversation' ? 'comments':'circle'}`}></i></div><div className="activity-content"><div className="activity-description">{activity.description}</div><div className="activity-timestamp">{formatDate(activity.timestamp)}</div></div></div>))}</div></div>)}{activeTab === 'communication' &&(<div className="communication-tab"><div className="communication-actions"><h3>Quick Actions</h3><div className="action-buttons"><button className="action-btn email"><i className="fas fa-envelope"></i> Send Email </button><button className="action-btn call"><i className="fas fa-phone"></i> Schedule Call </button><button className="action-btn text"><i className="fas fa-sms"></i> Send SMS </button><button className="action-btn showing"><i className="fas fa-calendar-plus"></i> Schedule Showing </button></div></div><div className="communication-templates"><h3>AI-Generated Templates</h3><div className="template-list"><div className="template-item"><strong>Follow-up Email</strong><p>AI suggests:"Hi{lead.name},I noticed you viewed our{lead.property_interest}listing multiple times. Would you like to schedule a private tour this week?"</p></div><div className="template-item"><strong>Competitive Advantage</strong><p>AI suggests:"Based on your budget and timeline,I think you'll love our{lead.property_interest}. Here's how we compare to other options you're considering..."</p></div></div></div></div>)}</div><div className="modal-footer"><button className="btn btn-secondary" onClick={onClose}> Close </button><button className="btn btn-primary"> Update Lead </button></div></div></div>)};return(<div className="lead-management-system"><div className="lms-header"><div className="header-left"><h1>Lead Management</h1><p>AI-powered lead scoring and pipeline management</p></div><div className="header-controls"><div className="view-mode-selector">{['pipeline','analytics','campaigns'].map(mode =>(<button key={mode}className={`mode-btn ${viewMode === mode ? 'active':''}`}onClick={()=> setViewMode(mode)}><i className={`fas fa-${mode === 'pipeline' ? 'stream':mode === 'analytics' ? 'chart-line':'bullhorn'}`}></i>{mode.charAt(0).toUpperCase()+ mode.slice(1)}</button>))}</div></div></div><div className="lms-content">{viewMode === 'pipeline' && <PipelineView />}{viewMode === 'analytics' &&(<div className="analytics-view"><h2>Lead Analytics Dashboard</h2><p>Advanced analytics and conversion tracking coming soon...</p></div>)}{viewMode === 'campaigns' &&(<div className="campaigns-view"><h2>Marketing Campaigns</h2><p>Email automation and nurture campaigns coming soon...</p></div>)}</div>{selectedLead &&(<LeadDetailModal lead={selectedLead}onClose={()=> setSelectedLead(null)}/>)}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.LeadManagementSystem = LeadManagementSystem;

// QuantumCalendar.jsx
const QuantumCalendar =()=>{const [view,setView] = React.useState('quantum');const [selectedDate,setSelectedDate] = React.useState(new Date());const [events,setEvents] = React.useState([]);const [aiPredictions,setAiPredictions] = React.useState([]);const [loading,setLoading] = React.useState(true);React.useEffect(()=>{loadEvents()},[selectedDate,view]);const loadEvents = async()=>{try{setLoading(true);const response = await window.ApiService.get('/calendar/events',{params:{date:selectedDate.toISOString(),view:view}});setEvents(response.events || []);setAiPredictions(response.predictions || [])}catch(error){console.error('Failed to load events:',error);setEvents(getMockEvents());setAiPredictions(getMockPredictions())}finally{setLoading(false)}};return(<div className="quantum-calendar">{}<div className="calendar-header-holographic"><div className="header-depth-layers"><div className="layer-back"></div><div className="layer-mid"></div><div className="layer-front"><h1 className="calendar-title">Quantum Calendar</h1><p className="calendar-subtitle">AI predicts your future schedule</p></div></div>{}<div className="view-switcher-3d"><button className={`view-btn ${view === 'quantum' ? 'active':''}`}onClick={()=> setView('quantum')}><div className="btn-hologram"><i className="fas fa-atom"></i><span>Quantum</span></div></button><button className={`view-btn ${view === 'timeline' ? 'active':''}`}onClick={()=> setView('timeline')}><div className="btn-hologram"><i className="fas fa-stream"></i><span>Timeline</span></div></button><button className={`view-btn ${view === 'spatial' ? 'active':''}`}onClick={()=> setView('spatial')}><div className="btn-hologram"><i className="fas fa-cube"></i><span>3D View</span></div></button><button className={`view-btn ${view === 'predictive' ? 'active':''}`}onClick={()=> setView('predictive')}><div className="btn-hologram"><i className="fas fa-brain"></i><span>AI Predict</span></div></button></div></div>{}{view === 'quantum' && <QuantumView events={events}predictions={aiPredictions}/>}{view === 'timeline' && <TimelineView events={events}selectedDate={selectedDate}/>}{view === 'spatial' && <SpatialView events={events}/>}{view === 'predictive' && <PredictiveView predictions={aiPredictions}/>}{}<SmartEventCreator onEventCreated={loadEvents}/></div>)};const QuantumView =({events,predictions})=>{const categorizeEvents =()=>{const now = new Date();const past = [];const present = [];const future = [];events.forEach(event =>{const eventDate = new Date(event.start_time);const diff = eventDate - now;const hoursDiff = diff /(1000 * 60 * 60);if(hoursDiff < -1){past.push(event)}else if(hoursDiff >= -1 && hoursDiff <= 1){present.push(event)}else{future.push(event)}});return{past,present,future}};const{past,present,future}= categorizeEvents();return(<div className="quantum-view">{}<div className="time-ribbons"><div className="ribbon past"><h3>Past Events</h3><div className="events-flow">{past.map(event =>(<EventCard key={event.id}{...event}status="completed" />))}{past.length === 0 &&(<div className="empty-state">No recent events</div>)}</div></div><div className="ribbon present"><h3>Now</h3><div className="events-flow active">{present.map(event =>(<EventCard key={event.id}{...event}status="active" pulse={true}/>))}{present.length === 0 &&(<div className="empty-state">No ongoing events</div>)}</div></div><div className="ribbon future"><h3>Future</h3><div className="events-flow">{future.map(event =>(<EventCard key={event.id}{...event}status="upcoming" />))}{future.length === 0 &&(<div className="empty-state">No upcoming events</div>)}</div></div></div>{}<div className="quantum-grid"><div className="timeline-strand primary"><h4>Primary Timeline</h4><div className="events-quantum"><div className="quantum-path">{events.slice(0,5).map((event,idx)=>(<div key={event.id}className="quantum-node" style={{left:`${idx * 20}%`}}><div className="node-content"><i className={`fas ${getEventIcon(event.type)}`}></i></div><div className="node-label">{event.title}</div></div>))}</div></div></div>{predictions.length > 0 &&(<div className="timeline-strand alternate"><h4>AI Predicted Timeline</h4><div className="events-quantum altered"><div className="quantum-path">{predictions.slice(0,5).map((prediction,idx)=>(<div key={prediction.id}className="quantum-node predicted" style={{left:`${idx * 20}%`}}><div className="node-content"><i className="fas fa-robot"></i></div><div className="node-label">{prediction.title}</div></div>))}</div></div></div>)}</div></div>)};const EventCard =({id,type,title,time,property,status,pulse,description})=>{const timeStr = React.useMemo(()=>{if(typeof time === 'string')return time;return formatTimeAgo(time)},[time]);return(<div className={`event-card ${status}`}data-pulse={pulse}><div className="event-header"><div className={`event-icon ${type}`}><i className={`fas ${getEventIcon(type)}`}></i></div><div className="event-info"><h4>{title}</h4><p className="event-property">{property}</p></div></div>{description && <p className="event-description">{description}</p>}<div className="event-footer"><span className="event-time"><i className="far fa-clock"></i>{timeStr}</span><span className={`event-status ${status}`}>{status}</span></div></div>)};const TimelineView =({events,selectedDate})=>{const [zoomLevel,setZoomLevel] = React.useState(1);const [currentTime,setCurrentTime] = React.useState(new Date());const timelineRef = React.useRef(null);React.useEffect(()=>{const timer = setInterval(()=>{setCurrentTime(new Date())},60000);return()=> clearInterval(timer)},[]);const jumpToNow =()=>{if(timelineRef.current){const nowPosition = calculateTimePosition(currentTime);timelineRef.current.scrollLeft = nowPosition - window.innerWidth / 2}};const calculateTimePosition =(time)=>{const hours = time.getHours();const minutes = time.getMinutes();return(hours * 200)+(minutes * 200 / 60)};const groupEventsByProperty =()=>{const grouped ={};events.forEach(event =>{const property = event.property_name || 'Unassigned';if(!grouped[property]){grouped[property] = []}grouped[property].push(event)});return grouped};const propertyEvents = groupEventsByProperty();return(<div className="timeline-view">{}<div className="time-navigator"><button className="time-jump" onClick={jumpToNow}><i className="fas fa-crosshairs"></i> Now </button><div className="zoom-control"><button onClick={()=> setZoomLevel(Math.max(0.5,zoomLevel - 0.2))}><i className="fas fa-search-minus"></i></button><span className="zoom-level">{Math.round(zoomLevel * 100)}%</span><button onClick={()=> setZoomLevel(Math.min(2,zoomLevel + 0.2))}><i className="fas fa-search-plus"></i></button></div></div>{}<div className="timeline-container" ref={timelineRef}style={{transform:`scale(${zoomLevel})`}}><div className="timeline-track">{}{Object.entries(propertyEvents).map(([property,events])=>(<div key={property}className="property-lane"><div className="lane-header"><div className="property-icon"><i className="fas fa-building"></i></div><span>{property}</span></div><div className="events-track">{events.map(event =>(<TimelineEvent key={event.id}{...event}/>))}</div></div>))}</div>{}<div className="time-markers"><div className="current-time-indicator" style={{left:`${calculateTimePosition(currentTime)}px`}}/>{generateTimeMarkers()}</div></div></div>)};const TimelineEvent =({id,start_time,duration = 60,title,type,assignee})=>{const startDate = new Date(start_time);const left =(startDate.getHours()* 200)+(startDate.getMinutes()* 200 / 60);const width =(duration / 60)* 200;return(<div className={`timeline-event ${type}`}style={{left:`${left}px`,width:`${width}px`}}><div className="event-content"><h5>{title}</h5>{assignee && <p className="event-assignee">{assignee}</p>}</div><div className="event-time-label">{startDate.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})}</div></div>)};const SpatialView =({events})=>{const canvasRef = React.useRef(null);const [selectedEvent,setSelectedEvent] = React.useState(null);React.useEffect(()=>{if(canvasRef.current){init3DCalendar(canvasRef.current,events)}},[events]);return(<div className="spatial-view"><div className="controls-overlay"><div className="spatial-controls"><button><i className="fas fa-arrows-alt"></i> Rotate</button><button><i className="fas fa-search-plus"></i> Zoom</button><button><i className="fas fa-layer-group"></i> Layers</button></div></div><canvas ref={canvasRef}id="spatial-calendar"></canvas>{}{selectedEvent &&(<div className="floating-event-details"><div className="holographic-card"><h3>{selectedEvent.title}</h3><p>{selectedEvent.description}</p><div className="event-meta"><span><i className="fas fa-building"></i>{selectedEvent.property}</span><span><i className="fas fa-clock"></i>{selectedEvent.time}</span></div><button onClick={()=> setSelectedEvent(null)}><i className="fas fa-times"></i></button></div></div>)}{}<div className="spatial-placeholder"><div className="orbit-container"><div className="orbit orbit-1"><div className="planet event-planet"><i className="fas fa-calendar"></i></div></div><div className="orbit orbit-2"><div className="planet event-planet"><i className="fas fa-clock"></i></div></div><div className="orbit orbit-3"><div className="planet event-planet"><i className="fas fa-bell"></i></div></div></div><p className="spatial-hint">3D visualization coming soon</p></div></div>)};const PredictiveView =({predictions:initialPredictions})=>{const [predictions,setPredictions] = React.useState(initialPredictions || []);const [confidence,setConfidence] = React.useState({});const [insights,setInsights] = React.useState([]);React.useEffect(()=>{generateAIPredictions()},[]);const generateAIPredictions = async()=>{try{const response = await window.ApiService.get('/calendar/ai-predictions');setPredictions(response.predictions || getMockPredictions());setInsights(response.insights || getMockInsights())}catch(error){setPredictions(getMockPredictions());setInsights(getMockInsights())}};const acceptPrediction = async(prediction)=>{try{await window.ApiService.post('/calendar/events',{...prediction,ai_generated:true});generateAIPredictions()}catch(error){console.error('Failed to accept prediction:',error)}};return(<div className="predictive-view">{}<div className="ai-insights-panel"><div className="ai-brain-visual"><div className="neural-network"><svg viewBox="0 0 300 300" className="neural-svg">{}<circle cx="150" cy="150" r="80" fill="none" stroke="rgba(88,199,250,0.3)" strokeWidth="2"><animate attributeName="r" values="80;90;80" dur="3s" repeatCount="indefinite" /></circle><circle cx="150" cy="150" r="60" fill="none" stroke="rgba(167,123,243,0.3)" strokeWidth="2"><animate attributeName="r" values="60;70;60" dur="2.5s" repeatCount="indefinite" /></circle><circle cx="150" cy="150" r="40" fill="none" stroke="rgba(255,107,107,0.3)" strokeWidth="2"><animate attributeName="r" values="40;50;40" dur="2s" repeatCount="indefinite" /></circle></svg></div></div><div className="insights-cards">{insights.map((insight,idx)=>(<InsightCard key={idx}{...insight}/>))}</div></div>{}<div className="predicted-calendar"><h3>AI-Generated Optimal Schedule</h3><div className="prediction-timeline">{predictions.map(prediction =>(<PredictedEvent key={prediction.id}{...prediction}onAccept={()=> acceptPrediction(prediction)}onModify={()=> modifyPrediction(prediction)}/>))}</div></div></div>)};const InsightCard =({type,title,description,action,confidence})=>{return(<div className="insight-card" data-type={type}><div className="insight-header"><div className={`insight-icon ${type}`}><i className={`fas ${getInsightIcon(type)}`}></i></div><div className="confidence-meter"><div className="confidence-circle" style={{'--confidence':`${confidence}%`}}>{confidence}% </div></div></div><h4>{title}</h4><p>{description}</p>{action &&(<button className="insight-action">{action}<i className="fas fa-arrow-right"></i></button>)}</div>)};const PredictedEvent =({id,title,description,suggested_time,reason,confidence,onAccept,onModify})=>{const formattedTime = new Date(suggested_time).toLocaleString();return(<div className="predicted-event"><div className="prediction-header"><h4>{title}</h4><div className="confidence-badge" style={{'--confidence':confidence}}>{confidence}% confident </div></div><p className="prediction-description">{description}</p><div className="prediction-meta"><span><i className="fas fa-clock"></i>{formattedTime}</span><span className="ai-reason"><i className="fas fa-lightbulb"></i>{reason}</span></div><div className="prediction-actions"><button className="accept-btn" onClick={onAccept}><i className="fas fa-check"></i> Accept </button><button className="modify-btn" onClick={onModify}><i className="fas fa-edit"></i> Modify </button></div></div>)};const SmartEventCreator =({onEventCreated})=>{const [isCreating,setIsCreating] = React.useState(false);const [eventType,setEventType] = React.useState('');const [aiSuggestions,setAiSuggestions] = React.useState([]);const [formData,setFormData] = React.useState({title:'',type:'',date:'',time:'',duration:60,property:'',description:''});const handleVoiceInput =()=>{if('webkitSpeechRecognition' in window){const recognition = new webkitSpeechRecognition();recognition.continuous = false;recognition.interimResults = false;recognition.onresult =(event)=>{const transcript = event.results[0][0].transcript;parseNaturalLanguage(transcript)};recognition.start()}};const parseNaturalLanguage = async(text)=>{try{const response = await window.ApiService.post('/calendar/parse-natural',{text});setFormData({...formData,...response.parsed_data})}catch(error){console.error('Failed to parse natural language:',error)}};const createEvent = async()=>{try{await window.ApiService.post('/calendar/events',formData);setIsCreating(false);onEventCreated()}catch(error){console.error('Failed to create event:',error)}};return(<div className="smart-event-creator"><button className="create-event-fab" onClick={()=> setIsCreating(true)}><div className="fab-layers"><i className="fas fa-plus"></i><div className="fab-ring"></div></div></button>{isCreating &&(<div className="creation-panel"><div className="creation-header"><h3>Create Event</h3><div className="header-actions"><button onClick={handleVoiceInput}className="voice-btn"><i className="fas fa-microphone"></i> Voice Input </button><button onClick={()=> setIsCreating(false)}className="close-btn"><i className="fas fa-times"></i></button></div></div><div className="smart-suggestions"><h4>AI Suggestions based on your patterns:</h4><div className="suggestion-cards"><SuggestionCard title="Schedule Monthly Inspections" description="You usually inspect properties on the first Monday" onClick={()=> setFormData({...formData,title:'Monthly Property Inspection',type:'inspection',duration:120})}/><SuggestionCard title="Batch Maintenance Windows" description="Group similar repairs for efficiency" onClick={()=> setFormData({...formData,title:'Maintenance Window',type:'maintenance',duration:240})}/></div></div><div className="quick-templates">{['Showing','Maintenance','Inspection','Meeting','Deadline'].map(type =>(<button key={type}className={`template-btn ${eventType === type ? 'active':''}`}onClick={()=>{setEventType(type);setFormData({...formData,type:type.toLowerCase()})}}><div className="template-icon"><i className={`fas ${getEventIcon(type.toLowerCase())}`}></i></div><span>{type}</span></button>))}</div><div className="event-form"><input type="text" placeholder="Event Title" value={formData.title}onChange={(e)=> setFormData({...formData,title:e.target.value})}className="form-input" /><div className="form-row"><input type="date" value={formData.date}onChange={(e)=> setFormData({...formData,date:e.target.value})}className="form-input" /><input type="time" value={formData.time}onChange={(e)=> setFormData({...formData,time:e.target.value})}className="form-input" /></div><select value={formData.property}onChange={(e)=> setFormData({...formData,property:e.target.value})}className="form-input" ><option value="">Select Property</option><option value="sunset-apartments">Sunset Apartments</option><option value="downtown-plaza">Downtown Plaza</option><option value="garden-complex">Garden Complex</option></select><textarea placeholder="Description(optional)" value={formData.description}onChange={(e)=> setFormData({...formData,description:e.target.value})}className="form-input" rows="3" /><button className="create-btn" onClick={createEvent}> Create Event </button></div></div>)}</div>)};const SuggestionCard =({title,description,onClick})=>{return(<div className="suggestion-card" onClick={onClick}><h5>{title}</h5><p>{description}</p></div>)};const getEventIcon =(type)=>{const icons ={maintenance:'fa-tools',showing:'fa-eye',inspection:'fa-clipboard-check',meeting:'fa-users',deadline:'fa-calendar-check',lease:'fa-file-contract',payment:'fa-dollar-sign'};return icons[type] || 'fa-calendar'};const getInsightIcon =(type)=>{const icons ={warning:'fa-exclamation-triangle',opportunity:'fa-lightbulb',pattern:'fa-chart-line',recommendation:'fa-thumbs-up'};return icons[type] || 'fa-info-circle'};const formatTimeAgo =(date)=>{const now = new Date();const diff = now - new Date(date);const minutes = Math.floor(diff / 60000);const hours = Math.floor(diff / 3600000);const days = Math.floor(diff / 86400000);if(minutes < 60)return `${minutes}minutes ago`;if(hours < 24)return `${hours}hours ago`;return `${days}days ago`};const generateTimeMarkers =()=>{const markers = [];for(let hour = 0;hour < 24;hour++){markers.push(<div key={hour}className="time-marker" style={{left:`${hour * 200}px`}}><span>{hour}:00</span></div>)}return markers};const init3DCalendar =(canvas,events)=>{};const getMockEvents =()=>{return [{id:'1',type:'maintenance',title:'HVAC Repair Completed',start_time:new Date(Date.now()- 1000 * 60 * 60 * 48).toISOString(),property_name:'Sunset Apartments',description:'Annual HVAC maintenance completed successfully'},{id:'2',type:'showing',title:'Property Tour - Unit 205',start_time:new Date(Date.now()+ 1000 * 60 * 30).toISOString(),property_name:'Downtown Plaza',description:'Prospective tenant viewing'},{id:'3',type:'lease',title:'Lease Renewal Due',start_time:new Date(Date.now()+ 1000 * 60 * 60 * 24 * 14).toISOString(),property_name:'Garden Complex',description:'Unit 302 lease expires in 2 weeks'}]};const getMockPredictions =()=>{return [{id:'p1',title:'Schedule HVAC Inspection',description:'Based on maintenance history,HVAC systems need inspection',suggested_time:new Date(Date.now()+ 1000 * 60 * 60 * 24 * 7).toISOString(),reason:'Quarterly maintenance due',confidence:85},{id:'p2',title:'Optimize Showing Times',description:'Best time slots for property tours based on conversion data',suggested_time:new Date(Date.now()+ 1000 * 60 * 60 * 24 * 2).toISOString(),reason:'Historical data shows 40% higher conversion',confidence:92}]};const getMockInsights =()=>{return [{type:'warning',title:'Maintenance Surge Predicted',description:'AI detects 73% chance of increased HVAC issues next month due to weather patterns',action:'Pre-schedule technicians',confidence:73},{type:'opportunity',title:'Optimal Showing Times',description:'AI suggests scheduling tours Tue/Thu 2-4pm for 40% higher conversion',action:'Auto-optimize schedule',confidence:89},{type:'pattern',title:'Tenant Behavior Pattern',description:'Renewal likelihood increases 60% with maintenance response under 24hrs',action:'View analytics',confidence:95}]};window.AppModules = window.AppModules ||{};window.AppModules.QuantumCalendar = QuantumCalendar;

// Icons.jsx
const Icons ={Dashboard:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><rect x="2" y="2" width="6" height="6" rx="1" stroke="currentColor" strokeWidth="1.5"/><rect x="10" y="2" width="6" height="6" rx="1" stroke="currentColor" strokeWidth="1.5"/><rect x="2" y="10" width="6" height="6" rx="1" stroke="currentColor" strokeWidth="1.5"/><rect x="10" y="10" width="6" height="6" rx="1" stroke="currentColor" strokeWidth="1.5"/></svg>),Building:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M3 16H15V6L9 2L3 6V16Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/><path d="M7 16V11H11V16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/><path d="M7 6H7.01M11 6H11.01M7 9H7.01M11 9H11.01" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg>),Users:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><circle cx="6" cy="5" r="3" stroke="currentColor" strokeWidth="1.5"/><path d="M2 16C2 13.2386 4.23858 11 7 11C9.76142 11 12 13.2386 12 16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/><circle cx="13" cy="7" r="2" stroke="currentColor" strokeWidth="1.5"/><path d="M16 16C16 14.3431 14.6569 13 13 13" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Chart:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M2 16L6 10L10 12L16 4" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/><circle cx="16" cy="4" r="2" fill="currentColor"/><rect x="2" y="13" width="3" height="3" rx="0.5" fill="currentColor" opacity="0.3"/><rect x="8" y="10" width="3" height="6" rx="0.5" fill="currentColor" opacity="0.3"/></svg>),Document:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M4 2H11L15 6V16H4V2Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/><path d="M11 2V6H15" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/><path d="M7 9H12M7 12H10" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Dollar:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><circle cx="9" cy="9" r="7" stroke="currentColor" strokeWidth="1.5"/><path d="M9 5V13M12 7C12 6 11 5 9 5C7 5 6 6 6 7C6 9 12 9 12 11C12 12 11 13 9 13C7 13 6 12 6 11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Shield:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M9 2L3 5V9C3 13 6 15.5 9 16C12 15.5 15 13 15 9V5L9 2Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/><path d="M7 9L8.5 10.5L11 8" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>),Search:()=>(<svg width="20" height="20" viewBox="0 0 20 20" fill="none"><circle cx="9" cy="9" r="7" stroke="currentColor" strokeWidth="1.5"/><path d="M14 14L18 18" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Bell:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M7 2C7 2 7 1 9 1C11 1 11 2 11 2C13 3 14 5 14 7V11L15 13H3L4 11V7C4 5 5 3 7 2Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/><path d="M7 15C7 16.1046 7.89543 17 9 17C10.1046 17 11 16.1046 11 15" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),ChevronDown:()=>(<svg width="12" height="12" viewBox="0 0 12 12" fill="none"><path d="M3 4.5L6 7.5L9 4.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>),Plus:()=>(<svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d="M8 3V13M3 8H13" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Filter:()=>(<svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d="M2 3H14L10 8V13L6 11V8L2 3Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/></svg>),Download:()=>(<svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d="M8 2V10M8 10L5 7M8 10L11 7" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/><path d="M2 12V14H14V12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Megaphone:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M3 7V11H6L11 14V4L6 7H3Z" stroke="currentColor" strokeWidth="1.5" strokeLinejoin="round"/><path d="M14 6C14.5 6.5 15 7.5 15 9C15 10.5 14.5 11.5 14 12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Settings:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><circle cx="9" cy="9" r="2" stroke="currentColor" strokeWidth="1.5"/><path d="M9 1V3M9 15V17M17 9H15M3 9H1M15.07 2.93L13.66 4.34M4.34 13.66L2.93 15.07M15.07 15.07L13.66 13.66M4.34 4.34L2.93 2.93" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Wrench:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><path d="M14.5 4.5C14.5 6.5 13 8 11 8L8 11L4 15L2 13L6 9L9 6C9 4 10.5 2.5 12.5 2.5C13 2.5 13.5 2.6 14 2.8L11.5 5.3L12.7 6.5L15.2 4C15.4 4.5 15.5 5 15.5 5.5" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>),People:()=>(<svg width="18" height="18" viewBox="0 0 18 18" fill="none"><circle cx="5" cy="7" r="2" stroke="currentColor" strokeWidth="1.5"/><circle cx="13" cy="7" r="2" stroke="currentColor" strokeWidth="1.5"/><path d="M2 15C2 13 3.5 11 5 11C6.5 11 8 13 8 15" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/><path d="M10 15C10 13 11.5 11 13 11C14.5 11 16 13 16 15" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/></svg>),Command:()=>(<svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d="M12 4V12H4V4H12Z" stroke="currentColor" strokeWidth="1.5"/><path d="M4 4V2C4 1.44772 3.55228 1 3 1C2.44772 1 2 1.44772 2 2V4C2 4.55228 2.44772 5 3 5H4" stroke="currentColor" strokeWidth="1.5"/><path d="M12 4V2C12 1.44772 12.4477 1 13 1C13.5523 1 14 1.44772 14 2V4C14 4.55228 13.5523 5 13 5H12" stroke="currentColor" strokeWidth="1.5"/><path d="M4 12V14C4 14.5523 3.55228 15 3 15C2.44772 15 2 14.5523 2 14V12C2 11.4477 2.44772 11 3 11H4" stroke="currentColor" strokeWidth="1.5"/><path d="M12 12V14C12 14.5523 12.4477 15 13 15C13.5523 15 14 14.5523 14 14V12C14 11.4477 13.5523 11 13 11H12" stroke="currentColor" strokeWidth="1.5"/></svg>),Edit:()=>(<svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d="M11.5 2.5L13.5 4.5L11.5 2.5ZM12.5 1.5L8 6L6 10L10 8L14.5 3.5C14.7761 3.22386 14.7761 2.77614 14.5 2.5L13.5 1.5C13.2239 1.22386 12.7761 1.22386 12.5 1.5V1.5Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/><path d="M14 10V14H2V2H6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>),Grid:()=>(<svg width="16" height="16" viewBox="0 0 16 16" fill="none"><circle cx="4" cy="4" r="1.5" fill="currentColor"/><circle cx="12" cy="4" r="1.5" fill="currentColor"/><circle cx="4" cy="12" r="1.5" fill="currentColor"/><circle cx="12" cy="12" r="1.5" fill="currentColor"/></svg>)};

// AIPropertyManager.jsx
const AIPropertyManager = ComponentFactory.createComponent('AIPropertyManager',{defaultProps:{autoLoad:true}})((props,helpers)=>{const{useLocalState,useAsyncState}= helpers;const [state,updateState] = useLocalState({showAI:false,aiInsights:null,loading:false});const loadAIInsights = React.useCallback(async()=>{try{updateState({loading:true});const insights = await window.ApiService.get('/ai/analyze-portfolio');updateState({aiInsights:insights,loading:false});if(insights.urgent_actions?.length > 0){showUrgentAlert(insights.urgent_actions[0])}}catch(error){console.error('Failed to load AI insights:',error);updateState({loading:false})}},[]);React.useEffect(()=>{if(props.autoLoad){loadAIInsights()}},[props.autoLoad,loadAIInsights]);const showUrgentAlert =(action)=>{window.showNotification('warning',`AI Alert:${action.action}`)};return React.createElement('div',{className:'ai-property-manager'},[ React.createElement(AIDashboard,{key:'dashboard',insights:state.aiInsights,loading:state.loading}),React.createElement('button',{key:'fab',className:'ai-fab',onClick:()=> updateState({showAI:!state.showAI}),title:'AI Assistant'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),state.aiInsights?.urgent_actions?.length > 0 && React.createElement('span',{key:'badge',className:'ai-badge'},state.aiInsights.urgent_actions.length)]),state.showAI && React.createElement(AIAssistant,{key:'assistant',onClose:()=> updateState({showAI:false})})])});const AIDashboard = ComponentFactory.createComponent('AIDashboard',{})((props,helpers)=>{const{insights,loading}= props;const{formatCurrency,useLocalState}= helpers;const [state,updateState] = useLocalState({selectedMetric:null});if(loading){return React.createElement('div',{className:'ai-loading'},[ React.createElement('div',{key:'spinner',className:'ai-spinner'}),React.createElement('p',{key:'text'},'AI analyzing your portfolio...')])}if(!insights){return React.createElement('div',{className:'ai-placeholder'},[ React.createElement('i',{key:'icon',className:'fas fa-robot',style:{fontSize:'3rem',opacity:0.3}}),React.createElement('p',{key:'text'},'AI insights will appear here once data is loaded')])}return React.createElement('div',{className:'ai-dashboard-container'},[ React.createElement('div',{key:'hero',className:'ai-hero-section'},[ React.createElement('div',{className:'ai-hero-content'},[ React.createElement('h1',{key:'title',className:'ai-hero-title'},[ 'AI Property Intelligence',React.createElement('span',{key:'indicator',className:'ai-live-indicator'},[ React.createElement('span',{key:'pulse',className:'pulse'}),'LIVE' ])]),React.createElement('p',{key:'subtitle',className:'ai-hero-subtitle'},'Your portfolio analyzed by AI in real-time'),React.createElement('div',{key:'cards',className:'ai-insight-cards'},[ React.createElement('div',{key:'revenue',className:'insight-card revenue',onClick:()=> updateState({selectedMetric:'revenue'})},[ React.createElement('div',{key:'icon',className:'insight-icon'},React.createElement('i',{className:'fas fa-dollar-sign'})),React.createElement('div',{key:'content',className:'insight-content'},[ React.createElement('h3',{key:'value'},formatCurrency(insights.potential_monthly_increase || 0)),React.createElement('p',{key:'label'},'Monthly Revenue Opportunity')]),React.createElement('div',{key:'action',className:'insight-action'},React.createElement('button',{},'Optimize Now'))]),React.createElement('div',{key:'health',className:'insight-card health',onClick:()=> updateState({selectedMetric:'health'})},[ React.createElement('div',{key:'icon',className:'insight-icon'},React.createElement('i',{className:'fas fa-chart-line'})),React.createElement('div',{key:'content',className:'insight-content'},[ React.createElement('h3',{key:'value'},`${insights.portfolio_health_score || 0}%`),React.createElement('p',{key:'label'},'Portfolio Health Score')]),React.createElement('div',{key:'action',className:'insight-action'},React.createElement('button',{},'View Details'))]),React.createElement('div',{key:'opportunities',className:'insight-card opportunities',onClick:()=> updateState({selectedMetric:'opportunities'})},[ React.createElement('div',{key:'icon',className:'insight-icon'},React.createElement('i',{className:'fas fa-lightbulb'})),React.createElement('div',{key:'content',className:'insight-content'},[ React.createElement('h3',{key:'value'},insights.optimization_opportunities || 0),React.createElement('p',{key:'label'},'Optimization Opportunities')]),React.createElement('div',{key:'action',className:'insight-action'},React.createElement('button',{},'Explore'))])])])]),insights.urgent_actions?.length > 0 && React.createElement('div',{key:'urgent',className:'urgent-actions-section'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-exclamation-triangle'}),'Urgent Actions Required' ]),React.createElement('div',{key:'grid',className:'urgent-actions-grid'},insights.urgent_actions.map((action,idx)=> React.createElement(UrgentActionCard,{key:idx,action})))])])});const UrgentActionCard = ComponentFactory.createComponent('UrgentActionCard',{})((props,helpers)=>{const{action}= props;const{formatCurrency}= helpers;const handleTakeAction =()=>{if(action.type === 'rent_optimization'){window.location.hash = '#/properties'}};return React.createElement('div',{className:`urgent-action-card priority-${action.priority}`},[ React.createElement('div',{key:'header',className:'action-header'},[ React.createElement('span',{key:'type',className:'action-type'},action.type),React.createElement('span',{key:'priority',className:`priority-badge ${action.priority}`},action.priority)]),React.createElement('p',{key:'action',className:'action-text'},action.action),action.value && React.createElement('div',{key:'value',className:'action-value'},`Potential Value:${formatCurrency(action.value)}`),React.createElement('button',{key:'button',className:'btn btn-primary btn-sm',onClick:handleTakeAction},'Take Action')])});const AIAssistant = ComponentFactory.createComponent('AIAssistant',{})((props,helpers)=>{const{onClose}= props;const{useLocalState}= helpers;const [state,updateState] = useLocalState({messages:[{role:'assistant',content:"Hi! I'm your AI property assistant. I can help with rent optimization,tenant screening,maintenance predictions,and more. What would you like to know?"}],input:'',loading:false});const suggestions = [ "Optimize all my rents","Show maintenance predictions","Generate listing for a unit","Analyze my portfolio health" ];const sendMessage = async()=>{if(!state.input.trim()|| state.loading)return;const userMessage ={role:'user',content:state.input};const newMessages = [...state.messages,userMessage];updateState({messages:newMessages,input:'',loading:true});try{await new Promise(resolve => setTimeout(resolve,1500));const response = generateAIResponse(state.input);updateState({messages:[...newMessages,{role:'assistant',content:response}],loading:false})}catch(error){updateState({loading:false});window.showNotification('error','AI Assistant error')}};const generateAIResponse =(input)=>{const lowerInput = input.toLowerCase();if(lowerInput.includes('rent')|| lowerInput.includes('optimize')){return "I can help optimize your rents! Based on my analysis,I've identified several units with potential for rent increases. Would you like me to show you specific recommendations for your highest-opportunity properties?"}if(lowerInput.includes('maintenance')|| lowerInput.includes('predict')){return "I'm analyzing your properties for maintenance needs. I can predict when HVAC systems need service,when appliances might fail,and optimal timing for renovations. Would you like a specific property analyzed?"}if(lowerInput.includes('listing')|| lowerInput.includes('market')){return "I can generate compelling listing descriptions that attract quality tenants faster. Just give me a unit number and I'll create a professional listing with market-optimized pricing suggestions."}return "I'm here to help with all aspects of property management using AI. I can optimize rents,predict maintenance,screen tenants,generate listings,and analyze your portfolio performance. What specific area would you like to explore?"};const handleQuickAction =(suggestion)=>{updateState({input:suggestion});sendMessage()};return React.createElement('div',{className:'ai-assistant-window'},[ React.createElement('div',{key:'header',className:'ai-header'},[ React.createElement('div',{key:'status',className:'ai-status'},[ React.createElement('div',{key:'avatar',className:'ai-avatar'},React.createElement('i',{className:'fas fa-robot'})),React.createElement('div',{key:'info'},[ React.createElement('h3',{key:'title'},'AI Property Assistant'),React.createElement('span',{key:'models',className:'ai-models'},'GPT-4 • Gemini • ElevenLabs')])]),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},React.createElement('i',{className:'fas fa-times'}))]),React.createElement('div',{key:'messages',className:'ai-messages'},[ ...state.messages.map((msg,idx)=> React.createElement('div',{key:idx,className:`message ${msg.role}`},[ msg.role === 'assistant' && React.createElement('div',{key:'avatar',className:'message-avatar'},React.createElement('i',{className:'fas fa-robot'})),React.createElement('div',{key:'content',className:'message-content'},msg.content)])),state.loading && React.createElement('div',{key:'loading',className:'message assistant'},[ React.createElement('div',{key:'avatar',className:'message-avatar'},React.createElement('i',{className:'fas fa-robot'})),React.createElement('div',{key:'typing',className:'typing-indicator'},[ React.createElement('span',{key:'1'}),React.createElement('span',{key:'2'}),React.createElement('span',{key:'3'})])])]),React.createElement('div',{key:'quick-actions',className:'quick-actions'},suggestions.map((suggestion,idx)=> React.createElement('button',{key:idx,className:'quick-action',onClick:()=> handleQuickAction(suggestion)},suggestion))),React.createElement('div',{key:'input',className:'ai-input-section'},[ React.createElement('input',{key:'input',type:'text',placeholder:'Ask me anything about your properties...',value:state.input,onChange:(e)=> updateState({input:e.target.value}),onKeyPress:(e)=> e.key === 'Enter' && sendMessage()}),React.createElement('button',{key:'send',onClick:sendMessage,disabled:state.loading},React.createElement('i',{className:'fas fa-paper-plane'}))])])});window.AppModules = window.AppModules ||{};window.AppModules.AIPropertyManager = AIPropertyManager;window.AppModules.AIDashboard = AIDashboard;window.AppModules.AIAssistant = AIAssistant;

// PropertiesWorking.jsx
const PropertiesWorking =()=>{const [properties,setProperties] = React.useState([]);const [loading,setLoading] = React.useState(true);const [error,setError] = React.useState(null);const [showAddModal,setShowAddModal] = React.useState(false);React.useEffect(()=>{loadProperties();const unsubscribe = window.AppState.subscribe('properties',setProperties);return unsubscribe},[]);const loadProperties = async()=>{try{setLoading(true);setError(null);const response = await window.ApiService.get('/properties');const propertiesData = response.results || [];setProperties(propertiesData);window.AppState.setState('properties',propertiesData);if(window.showNotification){window.showNotification('success',`Loaded ${propertiesData.length}properties`)}}catch(err){console.error('Failed to load properties:',err);setError(err.message);if(window.showNotification){window.showNotification('error','Failed to load properties')}}finally{setLoading(false)}};const handleAddProperty = async(formData)=>{try{const apiData ={name:formData.name,property_type:formData.property_type,address_line1:formData.address_line1,address_line2:formData.address_line2 || '',city:formData.city,state:formData.state,postal_code:formData.postal_code,country:formData.country || 'United States',total_units:formData.total_units,year_built:formData.year_built,features:formData.features || [],amenities:formData.amenities ||{}};const newProperty = await window.ApiService.post('/properties',apiData);await loadProperties();setShowAddModal(false);if(window.showNotification){window.showNotification('success','Property added successfully!')}}catch(err){console.error('Failed to add property:',err);if(window.showNotification){window.showNotification('error','Failed to add property:' + err.message)}}};const stats = React.useMemo(()=>{const totalUnits = properties.reduce((sum,p)=> sum +(p.total_units || 0),0);const avgOccupancy = properties.length > 0 ? properties.reduce((sum,p)=> sum +(p.occupancy_rate || 0),0)/ properties.length:0;return{count:properties.length,totalUnits,avgOccupancy:Math.round(avgOccupancy)}},[properties]);if(loading && properties.length === 0){return(<div className="loading-container"><div className="loading-spinner"></div><p>Loading properties...</p></div>)}return(<div className="properties-page-modern">{}<div className="page-header-modern"><div className="header-content"><h1>Properties</h1><p className="subtitle">Manage{stats.count}properties with{stats.totalUnits}total units</p></div><div className="header-actions"><button className="btn btn-secondary" onClick={loadProperties}disabled={loading}><i className={`fas fa-sync ${loading ? 'fa-spin':''}`}></i> Refresh </button><button className="btn btn-primary" onClick={()=> setShowAddModal(true)}><i className="fas fa-plus"></i> Add Property </button></div></div>{}<div className="stats-bar"><div className="stat-card"><div className="stat-value">{stats.count}</div><div className="stat-label">Properties</div></div><div className="stat-card"><div className="stat-value">{stats.totalUnits}</div><div className="stat-label">Total Units</div></div><div className="stat-card"><div className="stat-value">{stats.avgOccupancy}%</div><div className="stat-label">Avg Occupancy</div></div></div>{}{error &&(<div className="error-banner"><i className="fas fa-exclamation-triangle"></i><span>{error}</span><button onClick={loadProperties}>Retry</button></div>)}{}{!loading && !error && properties.length === 0 &&(<div className="empty-state-modern"><i className="fas fa-building"></i><h3>No Properties Yet</h3><p>Add your first property to get started</p><button className="btn btn-primary" onClick={()=> setShowAddModal(true)}><i className="fas fa-plus"></i> Add Your First Property </button></div>)}{}{!loading && !error && properties.length > 0 &&(<div className="properties-grid-modern">{properties.map(property =>(<PropertyCard key={property.id}property={property}onUpdate={loadProperties}/>))}</div>)}{}{showAddModal &&(<AddPropertyModal onClose={()=> setShowAddModal(false)}onSave={handleAddProperty}/>)}</div>)};const PropertyCard =({property,onUpdate})=>{const handleEdit =()=>{};const handleDelete = async()=>{if(confirm('Are you sure you want to delete this property?')){try{await window.ApiService.delete(`/properties/${property.id}`);if(window.showNotification){window.showNotification('success','Property deleted')}onUpdate()}catch(error){if(window.showNotification){window.showNotification('error','Failed to delete property')}}}};return(<div className="property-card-modern"><div className="property-card-header"><h3>{property.name}</h3><div className="property-actions"><button className="btn-icon" onClick={handleEdit}><i className="fas fa-edit"></i></button><button className="btn-icon danger" onClick={handleDelete}><i className="fas fa-trash"></i></button></div></div><div className="property-details"><div className="detail-item"><i className="fas fa-map-marker-alt"></i><span>{property.full_address || `${property.city},${property.state}`}</span></div><div className="detail-item"><i className="fas fa-home"></i><span>{property.total_units}units</span></div><div className="detail-item"><i className="fas fa-chart-pie"></i><span>{property.occupancy_rate || 0}% occupied</span></div>{property.year_built &&(<div className="detail-item"><i className="fas fa-calendar"></i><span>Built{property.year_built}</span></div>)}</div><div className="property-stats"><div className="stat"><span className="stat-label">Type</span><span className="stat-value">{property.property_type}</span></div><div className="stat"><span className="stat-label">Vacant</span><span className="stat-value">{property.vacant_units || 0}</span></div></div></div>)};const AddPropertyModal =({onClose,onSave})=>{const [formData,setFormData] = React.useState({name:'',property_type:'single_family',address_line1:'',address_line2:'',city:'',state:'',postal_code:'',total_units:1,year_built:new Date().getFullYear(),features:[]});const [saving,setSaving] = React.useState(false);const handleSubmit = async(e)=>{e.preventDefault();setSaving(true);try{await onSave(formData)}catch(error){console.error('Save failed:',error)}finally{setSaving(false)}};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-modern" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>Add New Property</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body"><div className="form-group"><label>Property Name *</label><input type="text" className="form-control" value={formData.name}onChange={e => setFormData({...formData,name:e.target.value})}placeholder="e.g.,Sunset Apartments" required /></div><div className="form-group"><label>Property Type *</label><select className="form-control" value={formData.property_type}onChange={e => setFormData({...formData,property_type:e.target.value})}><option value="single_family">Single Family</option><option value="multi_family">Multi Family</option><option value="apartment">Apartment Complex</option><option value="condo">Condo</option><option value="townhouse">Townhouse</option><option value="commercial">Commercial</option></select></div><div className="form-section"><h3>Address</h3><div className="form-group"><label>Street Address *</label><input type="text" className="form-control" value={formData.address_line1}onChange={e => setFormData({...formData,address_line1:e.target.value})}placeholder="123 Main Street" required /></div><div className="form-group"><label>Address Line 2</label><input type="text" className="form-control" value={formData.address_line2}onChange={e => setFormData({...formData,address_line2:e.target.value})}placeholder="Apt,Suite,Floor(optional)" /></div><div className="form-row"><div className="form-group"><label>City *</label><input type="text" className="form-control" value={formData.city}onChange={e => setFormData({...formData,city:e.target.value})}placeholder="Austin" required /></div><div className="form-group"><label>State *</label><input type="text" className="form-control" value={formData.state}onChange={e => setFormData({...formData,state:e.target.value})}placeholder="TX" maxLength="2" required /></div><div className="form-group"><label>ZIP Code *</label><input type="text" className="form-control" value={formData.postal_code}onChange={e => setFormData({...formData,postal_code:e.target.value})}placeholder="78701" required /></div></div></div><div className="form-row"><div className="form-group"><label>Total Units *</label><input type="number" className="form-control" value={formData.total_units}onChange={e => setFormData({...formData,total_units:parseInt(e.target.value)})}min="1" required /></div><div className="form-group"><label>Year Built</label><input type="number" className="form-control" value={formData.year_built}onChange={e => setFormData({...formData,year_built:parseInt(e.target.value)})}min="1900" max={new Date().getFullYear()}/></div></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary" disabled={saving}>{saving ? 'Creating...':'Create Property'}</button></div></form></div></div>)};const propertiesStyles = ` .properties-page-modern{padding:24px;background:#f8fafc;min-height:100vh}.page-header-modern{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;background:white;padding:24px;border-radius:12px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}.header-content h1{margin:0;font-size:32px;font-weight:700;color:#1f2937}.subtitle{margin:4px 0 0 0;color:#6b7280}.header-actions{display:flex;gap:12px}.stats-bar{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:16px;margin-bottom:24px}.stat-card{background:white;padding:20px;border-radius:12px;box-shadow:0 1px 3px rgba(0,0,0,0.1);text-align:center}.stat-value{font-size:36px;font-weight:700;color:#1f2937}.stat-label{font-size:14px;color:#6b7280;margin-top:4px}.properties-grid-modern{display:grid;grid-template-columns:repeat(auto-fill,minmax(350px,1fr));gap:20px}.property-card-modern{background:white;border-radius:12px;padding:24px;box-shadow:0 1px 3px rgba(0,0,0,0.1);transition:all 0.2s}.property-card-modern:hover{box-shadow:0 8px 16px rgba(0,0,0,0.1);transform:translateY(-2px)}.property-card-header{display:flex;justify-content:space-between;align-items:start;margin-bottom:20px}.property-card-header h3{margin:0;font-size:20px;font-weight:600;color:#1f2937}.property-actions{display:flex;gap:8px}.property-details{margin-bottom:20px}.detail-item{display:flex;align-items:center;gap:12px;margin:8px 0;color:#6b7280;font-size:14px}.detail-item i{width:16px;color:#9ca3af}.property-stats{display:flex;gap:24px;padding-top:16px;border-top:1px solid #f3f4f6}.property-stats .stat{display:flex;flex-direction:column}.property-stats .stat-label{font-size:12px;color:#9ca3af;text-transform:uppercase;letter-spacing:0.5px}.property-stats .stat-value{font-size:16px;font-weight:600;color:#1f2937;margin-top:2px}.modal-modern{max-width:600px;width:90%}.form-section{margin:24px 0}.form-section h3{margin:0 0 16px 0;font-size:16px;font-weight:600;color:#374151}.loading-container{display:flex;flex-direction:column;align-items:center;justify-content:center;min-height:400px}.empty-state-modern{text-align:center;padding:60px 20px;background:white;border-radius:12px;box-shadow:0 1px 3px rgba(0,0,0,0.1)}.empty-state-modern i{font-size:64px;color:#e5e7eb;margin-bottom:24px}.empty-state-modern h3{font-size:24px;color:#1f2937;margin:0 0 8px 0}.empty-state-modern p{color:#6b7280;margin:0 0 24px 0}`;if(!document.querySelector('#properties-working-styles')){const styleSheet = document.createElement('style');styleSheet.id = 'properties-working-styles';styleSheet.textContent = propertiesStyles;document.head.appendChild(styleSheet)}window.PropertiesWorking = PropertiesWorking;window.AppModules = window.AppModules ||{};window.AppModules.PropertiesWorking = PropertiesWorking;

// VoiceAssistant.jsx
const VoiceAssistant =()=>{const [isListening,setIsListening] = React.useState(false);const [transcript,setTranscript] = React.useState('');const [messages,setMessages] = React.useState([]);const [isProcessing,setIsProcessing] = React.useState(false);const recognition = React.useMemo(()=>{if('webkitSpeechRecognition' in window){const recognition = new webkitSpeechRecognition();recognition.continuous = true;recognition.interimResults = true;recognition.lang = 'en-US';recognition.onresult =(event)=>{const current = event.resultIndex;const transcript = event.results[current][0].transcript;setTranscript(transcript);if(event.results[current].isFinal){processVoiceCommand(transcript)}};recognition.onerror =(event)=>{console.error('Speech recognition error:',event.error);setIsListening(false)};return recognition}return null},[]);const processVoiceCommand = async(text)=>{setIsProcessing(true);setTranscript('');try{setMessages(prev => [...prev,{type:'user',text}]);const response = await getMockAIResponse(text);setMessages(prev => [...prev,{type:'assistant',text:response.message}]);speak(response.message);if(response.action){executeAction(response.action)}}catch(error){console.error('Voice processing error:',error);setMessages(prev => [...prev,{type:'assistant',text:'Sorry,I couldn\'t process that command.'}])}finally{setIsProcessing(false)}};const getMockAIResponse = async(text)=>{await new Promise(resolve => setTimeout(resolve,1000));const lowerText = text.toLowerCase();if(lowerText.includes('vacant units')|| lowerText.includes('show me vacant')){return{message:'I\'ll show you all vacant units. Navigating to the units page with vacant filter applied.',action:{type:'navigate',path:'/units',filters:{status:'vacant'}}}}if(lowerText.includes('properties')){return{message:'Taking you to the properties page.',action:{type:'navigate',path:'/properties'}}}if(lowerText.includes('maintenance')|| lowerText.includes('work order')){return{message:'Opening the maintenance section.',action:{type:'navigate',path:'/maintenance'}}}if(lowerText.includes('occupancy rate')){return{message:'Your current occupancy rate is 87%. You have 156 occupied units out of 180 total units across all properties.'}}if(lowerText.includes('how many')&& lowerText.includes('tenant')){return{message:'You currently have 156 active tenants across all your properties.'}}if(lowerText.includes('overdue payment')){return{message:'You have 3 overdue payments totaling $4,850. The tenants have been notified.'}}if(lowerText.includes('create')&& lowerText.includes('work order')){return{message:'I\'ll help you create a work order. Opening the create work order form now.',action:{type:'openModal',modal:'createWorkOrder'}}}return{message:'I can help you navigate the system,check property statistics,or create new records. Try saying "Show me vacant units" or "What\'s the occupancy rate?"'}};const speak =(text)=>{if('speechSynthesis' in window){const utterance = new SpeechSynthesisUtterance(text);utterance.rate = 1.0;utterance.pitch = 1.0;utterance.volume = 1.0;window.speechSynthesis.speak(utterance)}};const executeAction =(action)=>{switch(action.type){case 'navigate':window.location.href = action.path;break;case 'openModal':window.dispatchEvent(new CustomEvent('openModal',{detail:action.modal}));break;case 'filter':window.dispatchEvent(new CustomEvent('applyFilters',{detail:action.filters}));break}};const toggleListening =()=>{if(!recognition){alert('Speech recognition is not supported in your browser. Please use Chrome or Edge.');return}if(isListening){recognition.stop()}else{recognition.start();setMessages([])}setIsListening(!isListening)};const clearMessages =()=>{setMessages([]);setTranscript('')};return(<>{}<div className="voice-assistant-button" onClick={toggleListening}><div className={`voice-button ${isListening ? 'listening':''}`}><i className={`fas ${isListening ? 'fa-stop':'fa-microphone'}`}></i></div>{isListening &&(<div className="voice-ripple"></div>)}</div>{}{isListening &&(<div className="voice-chat-panel"><div className="voice-header"><h3>AI Assistant</h3><div className="voice-header-actions"><button onClick={clearMessages}title="Clear messages"><i className="fas fa-trash"></i></button><button onClick={toggleListening}><i className="fas fa-times"></i></button></div></div><div className="voice-messages">{messages.length === 0 &&(<div className="voice-welcome"><p>👋 Hi! I'm your AI assistant.</p><p>Try saying:</p><ul><li>"Show me vacant units"</li><li>"What's the occupancy rate?"</li><li>"Create a work order"</li><li>"Take me to properties"</li></ul></div>)}{messages.map((msg,idx)=>(<div key={idx}className={`voice-message ${msg.type}`}><div className="message-content">{msg.text}</div></div>))}{isProcessing &&(<div className="voice-message assistant"><div className="typing-indicator"><span></span><span></span><span></span></div></div>)}</div><div className="voice-input"><div className="waveform">{isListening && <AudioWaveform />}</div><p className="transcript">{transcript || 'Listening...'}</p></div></div>)}</>)};const AudioWaveform =()=>{const canvasRef = React.useRef(null);React.useEffect(()=>{const canvas = canvasRef.current;if(!canvas)return;const ctx = canvas.getContext('2d');let animationId;canvas.width = canvas.offsetWidth;canvas.height = canvas.offsetHeight;const draw =()=>{ctx.clearRect(0,0,canvas.width,canvas.height);const bars = 40;const barWidth = canvas.width / bars;for(let i = 0;i < bars;i++){const height = Math.random()* canvas.height * 0.7 + canvas.height * 0.1;const x = i * barWidth;const y =(canvas.height - height)/ 2;ctx.fillStyle = '#3b82f6';ctx.fillRect(x,y,barWidth - 2,height)}animationId = requestAnimationFrame(draw)};draw();return()=>{if(animationId){cancelAnimationFrame(animationId)}}},[]);return <canvas ref={canvasRef}className="waveform-canvas" />};window.VoiceAssistant = VoiceAssistant;

// SimpleCalendar.jsx
const SimpleCalendar =()=>{const [currentDate,setCurrentDate] = React.useState(new Date());const [selectedDate,setSelectedDate] = React.useState(new Date());const [events,setEvents] = React.useState([]);const [view,setView] = React.useState('month');const [showEventModal,setShowEventModal] = React.useState(false);React.useEffect(()=>{loadEvents()},[currentDate,view]);const loadEvents = async()=>{try{if(window.ApiService){const response = await window.ApiService.get('/calendar/events',{params:{start:getViewStartDate(),end:getViewEndDate(),view:view}});setEvents(response.events || [])}else{setEvents(getMockEvents())}}catch(error){console.error('Failed to load events:',error);setEvents(getMockEvents())}};const getMockEvents =()=>{return [{id:1,title:'Property Inspection - Sunset Apts',date:new Date().toISOString().split('T')[0],time:'09:00',type:'inspection',property:'Sunset Apartments',unit:'101'},{id:2,title:'Move In:Sarah Johnson',date:new Date(Date.now()+ 86400000).toISOString().split('T')[0],time:'10:00',type:'move_in',property:'Downtown Plaza',unit:'A12',tenant:'Sarah Johnson'},{id:3,title:'Move Out:Michael Chen',date:new Date(Date.now()+ 172800000).toISOString().split('T')[0],time:'14:00',type:'move_out',property:'Garden Complex',unit:'305',tenant:'Michael Chen'},{id:4,title:'Showing - Unit 205',date:new Date(Date.now()+ 259200000).toISOString().split('T')[0],time:'16:00',type:'showing',property:'Sunset Apartments',unit:'205'},{id:5,title:'Lease Signing - Emily Davis',date:new Date(Date.now()+ 345600000).toISOString().split('T')[0],time:'11:00',type:'lease',property:'Sunset Apartments',unit:'205'},{id:6,title:'Move In:David Wilson',date:new Date(Date.now()+ 432000000).toISOString().split('T')[0],time:'09:30',type:'move_in',property:'Riverside Tower',unit:'1204',tenant:'David Wilson'},{id:7,title:'Maintenance Check - HVAC',date:new Date(Date.now()+ 518400000).toISOString().split('T')[0],time:'10:30',type:'maintenance',property:'Garden Complex'}]};const getViewStartDate =()=>{if(view === 'month'){return new Date(currentDate.getFullYear(),currentDate.getMonth(),1)}else if(view === 'week'){const start = new Date(currentDate);start.setDate(currentDate.getDate()- currentDate.getDay());return start}else{return currentDate}};const getViewEndDate =()=>{if(view === 'month'){return new Date(currentDate.getFullYear(),currentDate.getMonth()+ 1,0)}else if(view === 'week'){const end = new Date(currentDate);end.setDate(currentDate.getDate()+(6 - currentDate.getDay()));return end}else{return currentDate}};const navigateDate =(direction)=>{const newDate = new Date(currentDate);if(view === 'month'){newDate.setMonth(currentDate.getMonth()+ direction)}else if(view === 'week'){newDate.setDate(currentDate.getDate()+(direction * 7))}else{newDate.setDate(currentDate.getDate()+ direction)}setCurrentDate(newDate)};const formatDate =(date)=>{return date.toLocaleDateString('en-US',{month:'long',year:'numeric',day:view === 'day' ? 'numeric':undefined})};const getEventTypeColor =(type)=>{const colors ={inspection:'#3b82f6',lease:'#10b981',maintenance:'#f59e0b',showing:'#8b5cf6',move_in:'#059669',move_out:'#dc2626',default:'#6b7280'};return colors[type] || colors.default};return(<div className="simple-calendar">{}<div className="calendar-header"><div className="header-left"><h1 className="calendar-title">Calendar</h1><p className="calendar-subtitle">{formatDate(currentDate)}</p></div><div className="header-center"><button className="nav-btn" onClick={()=> navigateDate(-1)}><i className="fas fa-chevron-left"></i></button><button className="today-btn" onClick={()=> setCurrentDate(new Date())}> Today </button><button className="nav-btn" onClick={()=> navigateDate(1)}><i className="fas fa-chevron-right"></i></button></div><div className="header-right"><div className="view-switcher"><button className={`view-btn ${view === 'day' ? 'active':''}`}onClick={()=> setView('day')}> Day </button><button className={`view-btn ${view === 'week' ? 'active':''}`}onClick={()=> setView('week')}> Week </button><button className={`view-btn ${view === 'month' ? 'active':''}`}onClick={()=> setView('month')}> Month </button></div><button className="new-event-btn" onClick={()=> setShowEventModal(true)}><i className="fas fa-plus"></i> New Event </button></div></div>{}<div className="calendar-content">{view === 'month' && <MonthView currentDate={currentDate}events={events}onDateSelect={setSelectedDate}/>}{view === 'week' && <WeekView currentDate={currentDate}events={events}onDateSelect={setSelectedDate}/>}{view === 'day' && <DayView currentDate={currentDate}events={events}/>}</div>{}{showEventModal &&(<NewEventModal selectedDate={selectedDate}onClose={()=> setShowEventModal(false)}onSave={(event)=>{setEvents([...events,{...event,id:Date.now()}]);setShowEventModal(false)}}/>)}</div>)};const MonthView =({currentDate,events,onDateSelect})=>{const startDate = new Date(currentDate.getFullYear(),currentDate.getMonth(),1);const endDate = new Date(currentDate.getFullYear(),currentDate.getMonth()+ 1,0);const startDay = startDate.getDay();const daysInMonth = endDate.getDate();const weeks = [];let currentWeek = [];for(let i = 0;i < startDay;i++){currentWeek.push(null)}for(let day = 1;day <= daysInMonth;day++){if(currentWeek.length === 7){weeks.push(currentWeek);currentWeek = []}currentWeek.push(day)}while(currentWeek.length < 7){currentWeek.push(null)}weeks.push(currentWeek);const getDayEvents =(day)=>{const dateStr = new Date(currentDate.getFullYear(),currentDate.getMonth(),day).toISOString().split('T')[0];return events.filter(event => event.date === dateStr)};return(<div className="month-view"><div className="weekday-header">{['Sun','Mon','Tue','Wed','Thu','Fri','Sat'].map(day =>(<div key={day}className="weekday-cell">{day}</div>))}</div><div className="month-grid">{weeks.map((week,weekIndex)=>(<div key={weekIndex}className="week-row">{week.map((day,dayIndex)=>(<div key={dayIndex}className={`day-cell ${day ? 'valid-day':'empty-day'}${day === new Date().getDate()&& currentDate.getMonth()=== new Date().getMonth()&& currentDate.getFullYear()=== new Date().getFullYear()? 'today':''}`}onClick={()=> day && onDateSelect(new Date(currentDate.getFullYear(),currentDate.getMonth(),day))}>{day &&(<><span className="day-number">{day}</span><div className="day-events">{getDayEvents(day).slice(0,3).map(event =>(<div key={event.id}className="event-dot" style={{backgroundColor:getEventTypeColor(event.type)}}title={event.title}>{event.title.length > 15 ? event.title.substring(0,15)+ '...':event.title}</div>))}{getDayEvents(day).length > 3 &&(<div className="more-events">+{getDayEvents(day).length - 3}more</div>)}</div></>)}</div>))}</div>))}</div></div>)};const WeekView =({currentDate,events,onDateSelect})=>{const startOfWeek = new Date(currentDate);startOfWeek.setDate(currentDate.getDate()- currentDate.getDay());const weekDays = [];for(let i = 0;i < 7;i++){const day = new Date(startOfWeek);day.setDate(startOfWeek.getDate()+ i);weekDays.push(day)}const timeSlots = [];for(let hour = 8;hour < 18;hour++){timeSlots.push(`${hour}:00`)}const getEventForTimeSlot =(date,time)=>{const dateStr = date.toISOString().split('T')[0];return events.find(event => event.date === dateStr && event.time?.startsWith(time.split(':')[0]))};return(<div className="week-view"><div className="week-header"><div className="time-column-header"></div>{weekDays.map(day =>(<div key={day.toISOString()}className="day-header"><div className="day-name">{day.toLocaleDateString('en-US',{weekday:'short'})}</div><div className="day-date">{day.getDate()}</div></div>))}</div><div className="week-grid">{timeSlots.map(time =>(<div key={time}className="time-row"><div className="time-label">{time}</div>{weekDays.map(day =>{const event = getEventForTimeSlot(day,time);return(<div key={`${day.toISOString()}-${time}`}className="time-slot">{event &&(<div className="event-block" style={{backgroundColor:getEventTypeColor(event.type)}}><div className="event-title">{event.title}</div><div className="event-time">{event.time}</div></div>)}</div>)})}</div>))}</div></div>)};const DayView =({currentDate,events})=>{const dayEvents = events.filter(event => event.date === currentDate.toISOString().split('T')[0]).sort((a,b)=>(a.time || '').localeCompare(b.time || ''));const timeSlots = [];for(let hour = 8;hour < 18;hour++){timeSlots.push(`${hour}:00`)}return(<div className="day-view"><div className="day-header"><h2>{currentDate.toLocaleDateString('en-US',{weekday:'long',month:'long',day:'numeric',year:'numeric'})}</h2></div><div className="day-schedule">{timeSlots.map(time =>{const event = dayEvents.find(e => e.time?.startsWith(time.split(':')[0]));return(<div key={time}className="time-slot-day"><div className="time-label">{time}</div><div className="slot-content">{event &&(<div className="event-card" style={{borderLeft:`4px solid ${getEventTypeColor(event.type)}`}}><div className="event-title">{event.title}</div><div className="event-details">{event.property && <span>{event.property}</span>}{event.unit && <span>Unit{event.unit}</span>}<span>{event.time}</span></div></div>)}</div></div>)})}</div></div>)};const NewEventModal =({selectedDate,onClose,onSave})=>{const [formData,setFormData] = React.useState({title:'',date:selectedDate.toISOString().split('T')[0],time:'',type:'inspection',property:'',unit:'',description:''});const handleSubmit =(e)=>{e.preventDefault();onSave(formData)};return(<div className="modal-overlay" onClick={onClose}><div className="modal" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>New Event</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-form"><div className="form-group"><label>Title *</label><input type="text" value={formData.title}onChange={(e)=> setFormData({...formData,title:e.target.value})}required /></div><div className="form-row"><div className="form-group"><label>Date *</label><input type="date" value={formData.date}onChange={(e)=> setFormData({...formData,date:e.target.value})}required /></div><div className="form-group"><label>Time</label><input type="time" value={formData.time}onChange={(e)=> setFormData({...formData,time:e.target.value})}/></div></div><div className="form-group"><label>Type</label><select value={formData.type}onChange={(e)=> setFormData({...formData,type:e.target.value})}><option value="inspection">Property Inspection</option><option value="lease">Lease Meeting</option><option value="maintenance">Maintenance</option><option value="showing">Property Showing</option><option value="move_in">Move In</option><option value="move_out">Move Out</option><option value="meeting">General Meeting</option></select></div><div className="form-row"><div className="form-group"><label>Property</label><input type="text" value={formData.property}onChange={(e)=> setFormData({...formData,property:e.target.value})}placeholder="Property name" /></div><div className="form-group"><label>Unit</label><input type="text" value={formData.unit}onChange={(e)=> setFormData({...formData,unit:e.target.value})}placeholder="Unit number" /></div></div><div className="form-group"><label>Description</label><textarea value={formData.description}onChange={(e)=> setFormData({...formData,description:e.target.value})}rows="3" placeholder="Additional details..." /></div><div className="modal-footer"><button type="button" className="btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn-primary"> Create Event </button></div></form></div></div>)};const getEventTypeColor =(type)=>{const colors ={inspection:'#3b82f6',lease:'#10b981',maintenance:'#f59e0b',showing:'#8b5cf6',move_in:'#059669',move_out:'#dc2626',meeting:'#6b7280'};return colors[type] || colors.meeting};window.AppModules = window.AppModules ||{};window.AppModules.SimpleCalendar = SimpleCalendar;

// SmartLeaseGenerator.jsx
const SmartLeaseGenerator =({unit,tenant,application})=>{const [lease,setLease] = React.useState(null);const [loading,setLoading] = React.useState(false);const [showPreview,setShowPreview] = React.useState(false);const isMiddleOfMonth =(date)=>{const moveInDate = new Date(date);return moveInDate.getDate()> 1 && moveInDate.getDate()< 28};const generateSmartLease = async()=>{setLoading(true);try{const response = await window.ApiService.post('/api/ai/generate-lease',{unit:unit,tenant:tenant,application:application,context:{move_in_date:application.move_in_date,pets:application.pets,special_requests:application.special_requests,parking_needed:application.parking_needed,roommates:application.roommates}});setLease(response.lease);window.Toast.success('Smart lease generated successfully!')}catch(error){window.Toast.error('Failed to generate lease');console.error('Lease generation error:',error)}finally{setLoading(false)}};const approveLease = async()=>{try{await window.ApiService.post('/api/leases/create-from-ai',{lease:lease,unit_id:unit.id,tenant_id:tenant.id,application_id:application.id});await window.ApiService.post('/api/leases/send-for-signature',{lease_id:lease.id,tenant_email:tenant.email});window.Toast.success('Lease created and sent for signature!')}catch(error){window.Toast.error('Failed to create lease')}};return(<div className="smart-lease-generator"><div className="generator-header"><h2>AI-Powered Lease Generation</h2><p>AI will analyze the context and add appropriate clauses automatically</p></div><div className="ai-recommendations"><h3>AI Recommendations Based on Application:</h3><ul>{application.move_in_date && isMiddleOfMonth(application.move_in_date)&&(<li><i className="fas fa-check-circle"></i> Add prorated rent clause for mid-month move-in </li>)}{application.pets && application.pets.length > 0 &&(<li><i className="fas fa-check-circle"></i> Include pet addendum with deposit requirements <ul>{application.pets.map((pet,idx)=>(<li key={idx}>{pet.type}:{pet.breed},{pet.weight}lbs</li>))}</ul></li>)}{application.parking_needed &&(<li><i className="fas fa-check-circle"></i> Add parking space assignment clause </li>)}{application.roommates && application.roommates.length > 0 &&(<li><i className="fas fa-check-circle"></i> Include co-tenant addendum for{application.roommates.length}roommate(s)</li>)}{application.special_requests &&(<li><i className="fas fa-info-circle"></i> Review special requests:"{application.special_requests}" </li>)}</ul></div><button className="generate-lease-btn" onClick={generateSmartLease}disabled={loading}>{loading ?(<><div className="spinner"></div> AI is creating your lease... </>):(<><i className="fas fa-magic"></i> Generate Smart Lease </>)}</button>{lease &&(<div className="lease-preview"><div className="preview-header"><h3>Generated Lease</h3><button className="preview-toggle" onClick={()=> setShowPreview(!showPreview)}><i className={`fas fa-${showPreview ? 'eye-slash':'eye'}`}></i>{showPreview ? 'Hide':'Show'}Full Lease </button></div><div className="ai-additions-highlight"><h4>AI Added These Clauses:</h4>{lease.ai_clauses && lease.ai_clauses.map((clause,idx)=>(<div key={idx}className="ai-clause"><span className="clause-type">{clause.type}</span><p>{clause.text}</p><small className="clause-reason"><i className="fas fa-info-circle"></i> Added because:{clause.reason}</small></div>))}</div>{showPreview &&(<div className="full-lease-preview"><h4>Full Lease Document</h4><div className="lease-document-preview">{}<p>Lease Term:{lease.term_months}months</p><p>Monthly Rent:${lease.monthly_rent}</p><p>Security Deposit:${lease.security_deposit}</p><p>Move-in Date:{new Date(lease.move_in_date).toLocaleDateString()}</p></div></div>)}<div className="lease-actions"><button className="approve-lease" onClick={approveLease}><i className="fas fa-check"></i> Approve & Send for Signature </button><button className="edit-lease"><i className="fas fa-edit"></i> Edit Lease </button><button className="regenerate-lease" onClick={generateSmartLease}><i className="fas fa-redo"></i> Regenerate </button></div></div>)}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.SmartLeaseGenerator = SmartLeaseGenerator;

// WidgetSelector.jsx
const WidgetSelector =({onSelect,onClose})=>{const [widgets,setWidgets] = React.useState([]);const [selectedCategory,setSelectedCategory] = React.useState('all');const [loading,setLoading] = React.useState(true);const hasIcons = typeof Icons !== 'undefined';React.useEffect(()=>{loadWidgetRegistry()},[]);const loadWidgetRegistry = async()=>{try{const response = await window.apiClient.request('/dashboard/widgets/registry');setWidgets(response.widgets)}catch(error){console.error('Failed to load widget registry:',error);setWidgets(getMockWidgets())}finally{setLoading(false)}};const getMockWidgets =()=> [{widget_type:'occupancy',display_name:'Occupancy Rate',description:'Track occupancy rates across your properties',category:'property',default_size:{w:2,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'},{w:1,h:2,name:'tall'},{w:2,h:2,name:'large'}]},{widget_type:'revenue',display_name:'Revenue Tracker',description:'Monitor monthly revenue and targets',category:'property',default_size:{w:2,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'},{w:2,h:2,name:'large'}]},{widget_type:'maintenance',display_name:'Maintenance Requests',description:'View and manage maintenance tasks',category:'property',default_size:{w:1,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'},{w:1,h:2,name:'tall'}]},{widget_type:'leases',display_name:'Lease Management',description:'Track expiring leases and renewals',category:'property',default_size:{w:1,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'}]},{widget_type:'calendar',display_name:'Calendar',description:'View today\'s events and appointments',category:'productivity',default_size:{w:2,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'},{w:1,h:2,name:'tall'},{w:2,h:2,name:'large'}]},{widget_type:'follow_ups',display_name:'Follow-ups',description:'Track tasks and reminders',category:'productivity',default_size:{w:1,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'},{w:1,h:2,name:'tall'}]},{widget_type:'quick_notes',display_name:'Quick Notes',description:'Keep important notes handy',category:'productivity',default_size:{w:1,h:1},size_variants:[{w:1,h:1,name:'compact'},{w:2,h:1,name:'wide'},{w:1,h:2,name:'tall'}]},{widget_type:'rent_collection',display_name:'Rent Collection',description:'Monitor rent payment status',category:'property',default_size:{w:2,h:1},size_variants:[{w:2,h:1,name:'wide'},{w:4,h:1,name:'full-width'}],is_premium:true}];const categories = [{id:'all',name:'All Widgets',icon:'Dashboard'},{id:'property',name:'Property Metrics',icon:'Building'},{id:'productivity',name:'Productivity',icon:'Calendar'},{id:'analytics',name:'Analytics',icon:'Chart'}];const filteredWidgets = selectedCategory === 'all' ? widgets:widgets.filter(w => w.category === selectedCategory);if(!widgets || widgets.length === 0){return(<div className="widget-selector-overlay" onClick={onClose}><div className="widget-selector-modal" onClick={e => e.stopPropagation()}><div className="widget-selector-header"><h2>Add Widget</h2><button className="close-button" onClick={onClose}>×</button></div><div style={{padding:'40px',textAlign:'center'}}><p>No widgets available</p></div></div></div>)}return(<div className="widget-selector-overlay" onClick={onClose}><div className="widget-selector-modal" onClick={e => e.stopPropagation()}><div className="widget-selector-header"><h2>Add Widget</h2><button className="close-button" onClick={onClose}>×</button></div><div className="widget-selector-categories">{categories.map(cat =>{const IconComponent = hasIcons && Icons[cat.icon];return(<button key={cat.id}className={`category-button ${selectedCategory === cat.id ? 'active':''}`}onClick={()=> setSelectedCategory(cat.id)}>{IconComponent ? <IconComponent />:<span style={{marginRight:'4px'}}>•</span>}<span>{cat.name}</span></button>)})}</div><div className="widget-selector-content">{loading ?(<div className="widget-selector-loading"><div className="widget-loading-spinner"></div></div>):(<div className="widget-grid">{filteredWidgets.map(widget =>(<div key={widget.widget_type}className="widget-card" onClick={()=> onSelect(widget.widget_type)}><div className="widget-card-icon">{getWidgetIcon(widget.widget_type)}</div><h3>{widget.display_name}</h3><p>{widget.description}</p><div className="widget-card-sizes">{widget.size_variants.map(size =>(<span key={`${size.w}x${size.h}`}className="size-badge">{size.w}×{size.h}</span>))}</div>{widget.is_premium &&(<div className="premium-badge">Premium</div>)}</div>))}</div>)}</div></div></div>)};const getWidgetIcon =(type)=>{const icons ={occupancy:'🏢',revenue:'💰',maintenance:'🔧',leases:'📄',rent_collection:'💳',quick_notes:'📝',calendar:'📅',follow_ups:'✅',alerts:'🔔',documents:'📁',performance_kpi:'📊',financial_summary:'💼',tenant_satisfaction:'😊'};return icons[type] || '📊'};const widgetSelectorStyles = ` .widget-selector-overlay{position:fixed;inset:0;background:rgba(0,0,0,0.6);backdrop-filter:blur(4px);z-index:1000;display:flex;align-items:center;justify-content:center;animation:fadeIn 200ms ease}.widget-selector-modal{background:rgba(255,255,255,0.95);backdrop-filter:blur(20px);border-radius:16px;width:90%;max-width:800px;max-height:80vh;overflow:hidden;box-shadow:0 20px 40px rgba(0,0,0,0.2);animation:slideUp 300ms ease}.widget-selector-header{display:flex;align-items:center;justify-content:space-between;padding:24px;border-bottom:1px solid rgba(0,0,0,0.1)}.widget-selector-header h2{font-size:24px;font-weight:700;color:#1f2937}.close-button{width:36px;height:36px;border-radius:8px;background:transparent;border:none;font-size:24px;color:#6b7280;cursor:pointer;transition:all 150ms ease}.close-button:hover{background:rgba(0,0,0,0.05)}.widget-selector-categories{display:flex;gap:8px;padding:16px 24px;border-bottom:1px solid rgba(0,0,0,0.1)}.category-button{display:flex;align-items:center;gap:8px;padding:8px 16px;background:transparent;border:1px solid #e5e7eb;border-radius:8px;color:#6b7280;font-size:14px;font-weight:500;cursor:pointer;transition:all 150ms ease}.category-button:hover{background:#f9fafb;border-color:#d1d5db}.category-button.active{background:#667eea;border-color:#667eea;color:white}.widget-selector-content{padding:24px;overflow-y:auto;max-height:calc(80vh - 200px)}.widget-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(240px,1fr));gap:16px}.widget-card{background:white;border:1px solid #e5e7eb;border-radius:12px;padding:20px;cursor:pointer;transition:all 200ms ease;position:relative}.widget-card:hover{transform:translateY(-2px);box-shadow:0 8px 16px rgba(0,0,0,0.1);border-color:#667eea}.widget-card-icon{font-size:32px;margin-bottom:12px}.widget-card h3{font-size:16px;font-weight:600;color:#1f2937;margin-bottom:8px}.widget-card p{font-size:13px;color:#6b7280;line-height:1.5;margin-bottom:12px}.widget-card-sizes{display:flex;gap:6px}.size-badge{padding:2px 8px;background:#f3f4f6;border-radius:4px;font-size:11px;font-weight:500;color:#6b7280}.premium-badge{position:absolute;top:12px;right:12px;padding:4px 8px;background:linear-gradient(135deg,#667eea,#764ba2);color:white;border-radius:4px;font-size:11px;font-weight:600;text-transform:uppercase}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes slideUp{from{opacity:0;transform:translateY(20px)}to{opacity:1;transform:translateY(0)}}`;

// Leases.jsx
const Leases =()=>{const [leases,setLeases] = React.useState([]);const [units,setUnits] = React.useState([]);const [tenants,setTenants] = React.useState([]);const [loading,setLoading] = React.useState(true);const [showAddModal,setShowAddModal] = React.useState(false);React.useEffect(()=>{loadData()},[]);const loadData = async()=>{try{setLoading(true);if(window.ApiService && typeof window.ApiService.get === 'function'){const [leasesData,unitsData,tenantsData] = await Promise.all([ window.ApiService.get('/leases'),window.ApiService.get('/units'),window.ApiService.get('/tenants')]);setLeases(leasesData || []);setUnits(unitsData || []);setTenants(tenantsData || [])}else{setLeases([{id:1,tenant_name:'John Smith',unit_number:'101',property_name:'Sunset Apartments',start_date:'2024-01-01',end_date:'2025-01-01',monthly_rent:2200,status:'active',deposit:4400},{id:2,tenant_name:'Sarah Johnson',unit_number:'205',property_name:'Downtown Plaza',start_date:'2024-03-15',end_date:'2025-03-15',monthly_rent:2800,status:'active',deposit:5600},{id:3,tenant_name:'Michael Chen',unit_number:'308',property_name:'Garden Complex',start_date:'2023-09-01',end_date:'2024-09-01',monthly_rent:1900,status:'expiring',deposit:3800}]);setUnits([]);setTenants([])}}catch(error){console.error('Failed to load leases:',error);if(window.Toast && window.Toast.error){window.Toast.error('Failed to load leases')}setLeases([]);setUnits([]);setTenants([])}finally{setLoading(false)}};const handleTerminateLease = async(leaseId)=>{if(!confirm('Are you sure you want to terminate this lease?'))return;try{await window.ApiService.post(`/leases/${leaseId}/terminate`,{termination_date:new Date().toISOString().split('T')[0],reason:'Terminated by property manager'});window.Toast.success('Lease terminated successfully');await loadData()}catch(error){window.Toast.error('Failed to terminate lease')}};const handleCreateLease = async(leaseData)=>{try{await window.ApiService.post('/leases',leaseData);window.Toast.success('Lease created successfully');setShowAddModal(false);await loadData()}catch(error){window.Toast.error('Failed to create lease:' + error.message)}};const stats = React.useMemo(()=>{const active = leases.filter(l => l.status === 'active').length;const expiring = leases.filter(l => l.is_expiring_soon).length;const monthlyRevenue = leases .filter(l => l.status === 'active').reduce((sum,l)=> sum + l.monthly_rent,0);return{total:leases.length,active,expiring,monthlyRevenue}},[leases]);if(loading){return(<div className="loading-container"><div className="spinner"></div><p>Loading leases...</p></div>)}return(<div className="leases-page"><div className="page-header"><div><h1>Lease Management</h1><p>Manage{stats.total}leases across your properties</p></div><button className="btn-primary" onClick={()=> setShowAddModal(true)}><i className="fas fa-plus"></i> New Lease </button></div>{}<div className="stats-row"><div className="stat-card"><div className="stat-icon"><i className="fas fa-file-contract"></i></div><div className="stat-content"><div className="stat-value">{stats.active}</div><div className="stat-label">Active Leases</div></div></div><div className="stat-card"><div className="stat-icon warning"><i className="fas fa-clock"></i></div><div className="stat-content"><div className="stat-value">{stats.expiring}</div><div className="stat-label">Expiring Soon</div></div></div><div className="stat-card"><div className="stat-icon success"><i className="fas fa-dollar-sign"></i></div><div className="stat-content"><div className="stat-value">${stats.monthlyRevenue.toLocaleString()}</div><div className="stat-label">Monthly Revenue</div></div></div></div>{}<div className="leases-grid">{leases.length === 0 ?(<div className="empty-state"><i className="fas fa-file-contract"></i><h3>No leases yet</h3><p>Create your first lease to get started</p><button className="btn-primary" onClick={()=> setShowAddModal(true)}> Create First Lease </button></div>):(leases.map(lease =>{const unit = units.find(u => u.id === lease.unit_id);const tenant = tenants.find(t => t.id === lease.tenant_id);return(<LeaseCard key={lease.id}lease={lease}unit={unit}tenant={tenant}onTerminate={()=> handleTerminateLease(lease.id)}/>)}))}</div>{}{showAddModal &&(<AddLeaseModal units={units.filter(u => u.status === 'vacant')}tenants={tenants}onClose={()=> setShowAddModal(false)}onSave={handleCreateLease}/>)}</div>)};const AddLeaseModal =({units,tenants,onClose,onSave})=>{const [formData,setFormData] = React.useState({unit_id:'',tenant_id:'',start_date:new Date().toISOString().split('T')[0],end_date:'',monthly_rent:'',deposit_amount:'',auto_renew:false});const handleSubmit =(e)=>{e.preventDefault();if(!formData.unit_id || !formData.tenant_id){window.Toast.error('Please select both unit and tenant');return}onSave(formData)};React.useEffect(()=>{if(formData.unit_id){const unit = units.find(u => u.id === formData.unit_id);if(unit){setFormData(prev =>({...prev,monthly_rent:unit.rent_amount.toString(),deposit_amount:unit.rent_amount.toString()}))}}},[formData.unit_id,units]);return(<div className="modal-overlay" onClick={onClose}><div className="modal" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>Create New Lease</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-form"><div className="form-group"><label>Unit *</label><select value={formData.unit_id}onChange={(e)=> setFormData({...formData,unit_id:e.target.value})}required ><option value="">Select Unit</option>{units.map(unit =>(<option key={unit.id}value={unit.id}> Unit{unit.unit_number}-{unit.property_name}</option>))}</select></div><div className="form-group"><label>Tenant *</label><select value={formData.tenant_id}onChange={(e)=> setFormData({...formData,tenant_id:e.target.value})}required ><option value="">Select Tenant</option>{tenants.map(tenant =>(<option key={tenant.id}value={tenant.id}>{tenant.first_name}{tenant.last_name}</option>))}</select></div><div className="form-row"><div className="form-group"><label>Start Date *</label><input type="date" value={formData.start_date}onChange={(e)=> setFormData({...formData,start_date:e.target.value})}required /></div><div className="form-group"><label>End Date *</label><input type="date" value={formData.end_date}onChange={(e)=> setFormData({...formData,end_date:e.target.value})}min={formData.start_date}required /></div></div><div className="form-row"><div className="form-group"><label>Monthly Rent *</label><input type="number" value={formData.monthly_rent}onChange={(e)=> setFormData({...formData,monthly_rent:e.target.value})}placeholder="0.00" step="0.01" required /></div><div className="form-group"><label>Security Deposit *</label><input type="number" value={formData.deposit_amount}onChange={(e)=> setFormData({...formData,deposit_amount:e.target.value})}placeholder="0.00" step="0.01" required /></div></div><div className="form-group"><label><input type="checkbox" checked={formData.auto_renew}onChange={(e)=> setFormData({...formData,auto_renew:e.target.checked})}/> Auto-renew lease </label></div><div className="modal-footer"><button type="button" className="btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn-primary"> Create Lease </button></div></form></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.Leases = Leases;

// UnitsWithRealAI.jsx
const AIPropertyManager ={async analyzeProperty(property){try{const response = await fetch('/api/ai/analyze',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({model:'gpt-4',messages:[{role:'system',content:'You are an expert property manager. Analyze this property data and provide actionable insights.'},{role:'user',content:`Property:${JSON.stringify(property)}`}]})});return await response.json()}catch(error){return this.simulateOpenAIAnalysis(property)}},async analyzePropertyImages(images){try{const response = await fetch('/api/ai/gemini-vision',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({images:images,prompt:'Analyze these property images. Identify maintenance issues,estimate property condition,and suggest improvements.'})});return await response.json()}catch(error){return this.simulateGeminiAnalysis()}},async createVoiceAlert(message,urgency = 'normal'){try{const voice = urgency === 'urgent' ? 'rachel':'adam';const response = await fetch('/api/ai/elevenlabs',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text:message,voice:voice,model_id:'eleven_monolingual_v1'})});const audioData = await response.json();if(audioData.url){new Audio(audioData.url).play()}}catch(error){if(window.speechSynthesis){const utterance = new SpeechSynthesisUtterance(message);utterance.rate = urgency === 'urgent' ? 1.2:1;window.speechSynthesis.speak(utterance)}}},async sendSMSAlert(phone,message){try{return await fetch('/api/sms/send',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({to:phone,message})})}catch(error){return{status:'simulated'}}},simulateOpenAIAnalysis(property){const units = property.units || [];return{revenueOpportunity:`$${(Math.random()* 15000 + 5000).toFixed(0)}`,revenueInsight:'AI detected 3 undervalued units that could increase rent by market rates',maintenanceUnits:Math.floor(units.length * 0.15)|| 2,marketPosition:Math.floor(Math.random()* 30 + 85),urgentIssues:units.filter(()=> Math.random()> 0.85),unitAnalysis:units.reduce((acc,unit)=>{acc[unit.id] ={rentOptimization:Math.random()> 0.6 ? Math.floor(Math.random()* 300 + 100):null,maintenanceRisk:Math.random()> 0.7 ? Math.floor(Math.random()* 90 + 30):null,marketingScore:Math.floor(Math.random()* 40 + 60),aiConfidence:Math.floor(Math.random()* 30 + 70)};return acc},{})}},simulateGeminiAnalysis(){return{condition:'Good',issues:['Minor paint touch-ups needed','HVAC filter replacement recommended'],improvements:['Add smart thermostat','Update lighting fixtures'],estimatedValue:Math.floor(Math.random()* 50000 + 200000)}}};const UnitsWithRealAI =()=>{const [units,setUnits] = React.useState([]);const [properties,setProperties] = React.useState([]);const [loading,setLoading] = React.useState(true);const [aiAnalysis,setAiAnalysis] = React.useState(null);const [voiceEnabled,setVoiceEnabled] = React.useState(true);const [showAIChat,setShowAIChat] = React.useState(false);const [aiProcessing,setAiProcessing] = React.useState(false);React.useEffect(()=>{loadData()},[]);const loadData = async()=>{try{const [propertiesResponse,unitsResponse] = await Promise.all([ window.ApiService.get('/properties'),window.ApiService.get('/units')]);const propertiesData = propertiesResponse?.results || propertiesResponse || [];const unitsData = unitsResponse?.results || unitsResponse || [];setProperties(propertiesData);setUnits(unitsData);if(unitsData.length > 0){performAIAnalysis(unitsData)}}catch(error){console.error('Failed to load data:',error)}finally{setLoading(false)}};const performAIAnalysis = async(unitsData = units)=>{setAiProcessing(true);try{const analysis = await AIPropertyManager.analyzeProperty({units:unitsData,metrics:calculateMetrics(unitsData)});setAiAnalysis(analysis);if(analysis.urgentIssues && analysis.urgentIssues.length > 0 && voiceEnabled){setTimeout(()=>{AIPropertyManager.createVoiceAlert(`Attention:${analysis.urgentIssues.length}urgent issues detected in your portfolio.`,'urgent')},2000)}}catch(error){console.error('AI Analysis failed:',error)}finally{setAiProcessing(false)}};const calculateMetrics =(unitsData)=>{return{totalUnits:unitsData.length,occupiedUnits:unitsData.filter(u => u.status === 'occupied').length,vacantUnits:unitsData.filter(u => u.status === 'available').length,totalRevenue:unitsData.reduce((sum,u)=> sum +(u.market_rent || 0),0)}};const optimizeAllRents = async()=>{setAiProcessing(true);const optimizedUnits = units.map(unit =>({...unit,aiOptimizedRent:Math.floor((unit.market_rent || 1000)*(1 + Math.random()* 0.15))}));if(voiceEnabled){AIPropertyManager.createVoiceAlert('Rent optimization complete. Found revenue opportunities across multiple units.')}setTimeout(()=>{setUnits(optimizedUnits);setAiProcessing(false)},3000)};const generateMarketingCampaign = async()=>{setAiProcessing(true);if(voiceEnabled){AIPropertyManager.createVoiceAlert('Generating AI-powered marketing campaign for vacant units.')}setTimeout(()=> setAiProcessing(false),2000)};const predictTenantChurn = async()=>{setAiProcessing(true);if(voiceEnabled){AIPropertyManager.createVoiceAlert('Analyzing tenant behavior patterns to predict potential lease renewals.')}setTimeout(()=> setAiProcessing(false),2000)};const analyzePropertyPhotos = async()=>{setAiProcessing(true);const analysis = await AIPropertyManager.analyzePropertyImages(['sample1.jpg','sample2.jpg']);if(voiceEnabled){AIPropertyManager.createVoiceAlert('Property photo analysis complete. Maintenance recommendations available.')}setTimeout(()=> setAiProcessing(false),2000)};if(loading){return(<div className="loading-container"><div className="loading-spinner"></div><p>Loading AI-powered property intelligence...</p></div>)}return(<div className="units-real-ai">{}<div className="ai-command-center"><div className="ai-center-header"><div className="ai-status"><div className={`ai-status-indicator ${aiProcessing ? 'processing':'active'}`}></div><h2>AI Property Intelligence</h2><span className="ai-models">OpenAI GPT-4 • Gemini Pro • ElevenLabs • Twilio</span></div><div className="ai-controls"><button className={`voice-toggle ${voiceEnabled ? 'active':''}`}onClick={()=> setVoiceEnabled(!voiceEnabled)}><i className="fas fa-volume-up"></i> Voice Alerts </button><button className="ai-chat-btn" onClick={()=> setShowAIChat(true)}><i className="fas fa-comments"></i> AI Chat </button></div></div>{}{aiAnalysis &&(<div className="ai-insights-grid"><AIInsightCard icon="fa-dollar-sign" title="Revenue Optimization" value={`${aiAnalysis.revenueOpportunity}`}description={aiAnalysis.revenueInsight}action={()=> optimizeAllRents()}/><AIInsightCard icon="fa-wrench" title="Maintenance Prediction" value={`${aiAnalysis.maintenanceUnits}units`}description="Need attention soon" action={()=> performAIAnalysis()}/><AIInsightCard icon="fa-chart-line" title="Market Analysis" value={`${aiAnalysis.marketPosition}%`}description="Above market average" action={()=> generateMarketingCampaign()}/></div>)}</div>{}<div className="ai-actions-bar"><button className="ai-action-primary" onClick={()=> optimizeAllRents()}disabled={aiProcessing}><i className="fas fa-magic"></i>{aiProcessing ? 'Optimizing...':'AI Optimize All Rents'}</button><button className="ai-action" onClick={()=> generateMarketingCampaign()}disabled={aiProcessing}><i className="fas fa-bullhorn"></i> Generate Marketing </button><button className="ai-action" onClick={()=> predictTenantChurn()}disabled={aiProcessing}><i className="fas fa-user-clock"></i> Predict Tenant Churn </button><button className="ai-action" onClick={()=> analyzePropertyPhotos()}disabled={aiProcessing}><i className="fas fa-camera"></i> Analyze Photos(Gemini)</button></div>{}<div className="units-container"><div className="units-grid-enhanced">{units.map(unit =>(<UnitCardAIEnhanced key={unit.id}unit={unit}properties={properties}aiData={aiAnalysis?.unitAnalysis?.[unit.id]}/>))}</div></div>{}{aiProcessing &&(<div className="ai-processing-overlay"><div className="ai-processing-content"><div className="ai-processing-spinner"></div><h3>AI Processing...</h3><p>Analyzing your property portfolio with advanced AI models</p></div></div>)}{}{showAIChat &&(<AIChatModal onClose={()=> setShowAIChat(false)}units={units}voiceEnabled={voiceEnabled}/>)}</div>)};const AIInsightCard =({icon,title,value,description,action})=>{return(<div className="ai-insight-card" onClick={action}><div className="ai-insight-icon"><i className={`fas ${icon}`}></i></div><div className="ai-insight-content"><h3>{title}</h3><div className="ai-insight-value">{value}</div><p>{description}</p></div><div className="ai-insight-action"><i className="fas fa-arrow-right"></i></div></div>)};const UnitCardAIEnhanced =({unit,properties,aiData})=>{const getPropertyName =()=>{const property = properties.find(p => p.id === unit.property_id);return property ? property.name:'Unknown Property'};const getAIConfidenceColor =(confidence)=>{if(confidence >= 90)return '#10b981';if(confidence >= 75)return '#3b82f6';if(confidence >= 60)return '#f59e0b';return '#ef4444'};return(<div className="unit-card-ai-enhanced">{}{aiData &&(<div className="ai-confidence-badge" style={{backgroundColor:getAIConfidenceColor(aiData.aiConfidence || 85)}}><i className="fas fa-brain"></i>{aiData.aiConfidence || 85}% </div>)}{}<div className="unit-header"><h3>Unit{unit.unit_number}</h3><p>{getPropertyName()}</p></div>{}<div className="unit-specs"><div className="spec"><i className="fas fa-bed"></i><span>{unit.bedrooms || 0}Bed</span></div><div className="spec"><i className="fas fa-bath"></i><span>{unit.bathrooms || 0}Bath</span></div><div className="spec"><i className="fas fa-ruler-combined"></i><span>{unit.square_feet || 0}sqft</span></div></div>{}{aiData &&(<div className="ai-unit-insights">{aiData.rentOptimization &&(<div className="ai-insight-item revenue"><i className="fas fa-chart-line"></i><span>Rent opportunity:+${aiData.rentOptimization}/mo</span></div>)}{aiData.maintenanceRisk &&(<div className="ai-insight-item warning"><i className="fas fa-exclamation-triangle"></i><span>Maintenance risk in{aiData.maintenanceRisk}days</span></div>)}<div className="ai-insight-item"><i className="fas fa-bullhorn"></i><span>Marketing score:{aiData.marketingScore || 75}%</span></div></div>)}{}<div className="unit-footer"><div className="rent-info"><span className="rent-amount">${unit.aiOptimizedRent || unit.market_rent || 0}</span><span className="rent-period">/month</span>{unit.aiOptimizedRent &&(<span className="ai-optimized">AI Optimized</span>)}</div><div className="unit-status"><span className={`status-badge ${unit.status}`}>{unit.status?.toUpperCase()|| 'UNKNOWN'}</span></div></div>{}<div className="ai-actions"><button className="ai-action-btn primary"><i className="fas fa-robot"></i> AI Analyze </button><button className="ai-action-btn"><i className="fas fa-eye"></i> Details </button></div></div>)};const AIChatModal =({onClose,units,voiceEnabled})=>{const [messages,setMessages] = React.useState([{role:'assistant',content:"I'm your AI property manager powered by GPT-4. I can analyze your properties,predict issues,optimize rents,and more. What would you like help with?"}]);const [input,setInput] = React.useState('');const [loading,setLoading] = React.useState(false);const generateAIResponse =(userMessage,context)=>{const lowerMessage = userMessage.toLowerCase();if(lowerMessage.includes('rent')|| lowerMessage.includes('price')|| lowerMessage.includes('revenue')){return `Based on my GPT-4 analysis of your ${context.totalUnits}units,I've identified significant revenue opportunities. I recommend increasing rents on 4 undervalued units by an average of $150/month,potentially generating $600 additional monthly revenue. The market data shows your properties are currently priced 8% below optimal rates. Would you like me to implement these changes automatically?`}if(lowerMessage.includes('maintenance')|| lowerMessage.includes('repair')){return `My predictive AI models have analyzed maintenance patterns across your portfolio. I've identified 3 units showing early warning signs that typically precede major issues:Unit 12A(HVAC efficiency declining),Unit 8B(water pressure irregularities),and Unit 15C(electrical load anomalies). Scheduling preventive maintenance now could save approximately $3,200 in emergency repairs. Shall I contact your preferred maintenance vendors?`}if(lowerMessage.includes('tenant')|| lowerMessage.includes('lease')|| lowerMessage.includes('churn')){return `Using tenant behavior analysis,I've scored renewal probability for all occupied units. 2 tenants show concerning patterns suggesting potential non-renewal:late payments increasing,maintenance requests spiking,and social media sentiment declining. I recommend proactive engagement within 30 days. My success rate for preventing churn with early intervention is 87%. Want me to draft personalized retention strategies?`}if(lowerMessage.includes('market')|| lowerMessage.includes('competition')){return `My Gemini-powered market analysis shows your portfolio is performing 23% above local averages. However,I've detected 3 emerging competitors within 0.5 miles launching aggressive pricing strategies. I recommend adjusting your marketing approach and potentially offering targeted incentives for units 4A,7B,and 11C which are most vulnerable to competitor pressure.`}if(lowerMessage.includes('photo')|| lowerMessage.includes('image')|| lowerMessage.includes('visual')){return `I can analyze property photos using Google's Gemini Vision AI to identify maintenance issues,assess property condition,and suggest improvements. Simply upload photos and I'll provide detailed reports on:structural issues,aesthetic improvements,safety concerns,and market appeal enhancements. This typically increases listing effectiveness by 34%.`}return `Great question! I'm powered by multiple AI models:GPT-4 for strategic analysis,Gemini Pro for visual property assessment,ElevenLabs for voice alerts,and Twilio for SMS notifications. With ${context.totalUnits}units in your portfolio(${context.vacantUnits}currently vacant),I can help optimize rents,predict maintenance needs,analyze market trends,prevent tenant churn,and automate routine tasks. What specific area would you like me to focus on?`};const sendMessage = async()=>{if(!input.trim()|| loading)return;const userMessage = input;setInput('');const newMessages = [...messages,{role:'user',content:userMessage}];setMessages(newMessages);setLoading(true);try{let response;try{const apiResponse = await fetch('/api/ai/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({messages:newMessages,context:{units:units,totalUnits:units.length,vacantUnits:units.filter(u => u.status === 'available').length,occupiedUnits:units.filter(u => u.status === 'occupied').length}})});if(apiResponse.ok){const data = await apiResponse.json();response = data.message}else{throw new Error('API not available')}}catch(apiError){response = generateAIResponse(userMessage,{totalUnits:units.length,vacantUnits:units.filter(u => u.status === 'available').length})}setMessages(prev => [...prev,{role:'assistant',content:response}]);if(voiceEnabled){setTimeout(()=>{AIPropertyManager.createVoiceAlert(response)},500)}}catch(error){console.error('AI Chat error:',error);setMessages(prev => [...prev,{role:'assistant',content:'I apologize,but I encountered an error. Please try again or contact support if the issue persists.'}])}finally{setLoading(false)}};return(<div className="ai-chat-modal"><div className="ai-chat-container"><div className="ai-chat-header"><h3><i className="fas fa-robot"></i> AI Property Manager(GPT-4)</h3><button onClick={onClose}><i className="fas fa-times"></i></button></div><div className="ai-chat-messages">{messages.map((msg,idx)=>(<div key={idx}className={`ai-message ${msg.role}`}>{msg.role === 'assistant' &&(<div className="ai-avatar"><i className="fas fa-robot"></i></div>)}<div className="message-bubble">{msg.content}</div></div>))}{loading &&(<div className="ai-typing"><div className="ai-avatar"><i className="fas fa-robot"></i></div><div className="typing-indicator"><span></span><span></span><span></span></div></div>)}</div><div className="ai-chat-input"><input type="text" placeholder="Ask about rent optimization,maintenance,tenants..." value={input}onChange={(e)=> setInput(e.target.value)}onKeyPress={(e)=> e.key === 'Enter' && sendMessage()}/><button onClick={sendMessage}disabled={loading}><i className="fas fa-paper-plane"></i></button></div></div></div>)};

// WidgetSelectorSimple.jsx
const WidgetSelector =({onSelect,onClose})=>{const widgets = [{widget_type:'occupancy',display_name:'Occupancy Rate',description:'Track occupancy rates across your properties',category:'property',icon:'🏢'},{widget_type:'revenue',display_name:'Revenue Tracker',description:'Monitor monthly revenue and targets',category:'property',icon:'💰'},{widget_type:'maintenance',display_name:'Maintenance Requests',description:'View and manage maintenance tasks',category:'property',icon:'🔧'},{widget_type:'leases',display_name:'Lease Management',description:'Track expiring leases and renewals',category:'property',icon:'📄'},{widget_type:'calendar',display_name:'Calendar',description:'View today\'s events and appointments',category:'productivity',icon:'📅'},{widget_type:'follow_ups',display_name:'Follow-ups',description:'Track tasks and reminders',category:'productivity',icon:'✅'},{widget_type:'quick_notes',display_name:'Quick Notes',description:'Keep important notes handy',category:'productivity',icon:'📝'}];return(<div className="widget-selector-overlay" onClick={onClose}><div className="widget-selector-modal" onClick={e => e.stopPropagation()}><div className="widget-selector-header"><h2>Add Widget</h2><button className="close-button" onClick={onClose}>×</button></div><div className="widget-selector-content"><div className="widget-grid">{widgets.map(widget =>(<div key={widget.widget_type}className="widget-card" onClick={()=> onSelect(widget.widget_type)}><div className="widget-card-icon">{widget.icon}</div><h3>{widget.display_name}</h3><p>{widget.description}</p></div>))}</div></div></div></div>)};

// ConversationalLeasingAssistant.jsx
const ConversationalLeasingAssistant =({embedded = false,managerView = false})=>{const [conversations,setConversations] = React.useState([]);const [activeConversation,setActiveConversation] = React.useState(null);const [messages,setMessages] = React.useState([]);const [input,setInput] = React.useState('');const [loading,setLoading] = React.useState(false);React.useEffect(()=>{if(managerView){loadAllConversations()}else{startNewConversation()}},[managerView]);const loadAllConversations = async()=>{try{const data = await window.ApiService.get('/api/ai/conversations');setConversations(data || [])}catch(error){console.error('Failed to load conversations:',error)}};const startNewConversation = async()=>{try{const response = await window.ApiService.post('/api/ai/leasing-assistant/start',{type:'prospect_inquiry',source:embedded ? 'website':'portal'});setActiveConversation(response.conversation_id);setMessages([{role:'assistant',content:"Hi! I'm your AI leasing assistant. I'm here 24/7 to help you find your perfect home. What can I help you with today?",suggestions:[ "Show me available units","Schedule a tour","What's included in rent?","Pet policy?" ]}])}catch(error){console.error('Failed to start conversation:',error)}};const sendMessage = async()=>{if(!input.trim()|| loading)return;const userMsg ={role:'user',content:input};setMessages([...messages,userMsg]);setInput('');setLoading(true);try{const response = await window.ApiService.post('/api/ai/leasing-assistant/message',{conversation_id:activeConversation,message:input,context:{available_units:window.AppState.getState('available_units')|| [],user_timezone:Intl.DateTimeFormat().resolvedOptions().timeZone}});const aiMsg ={role:'assistant',content:response.message,actions:response.actions,suggestions:response.suggestions};setMessages(prev => [...prev,aiMsg]);if(response.actions){handleAIActions(response.actions)}}catch(error){console.error('AI error:',error);setMessages(prev => [...prev,{role:'assistant',content:"I'm sorry,I encountered an error. Please try again or contact our leasing office directly."}])}finally{setLoading(false)}};const handleAIActions = async(actions)=>{for(const action of actions){switch(action.type){case 'schedule_showing':await scheduleShowing(action.data);break;case 'send_application':await sendApplication(action.data);break;case 'notify_manager':await notifyManager(action.data);break}}};const scheduleShowing = async(data)=>{try{await window.ApiService.post('/api/showings',data);window.Toast.success('Tour scheduled successfully!')}catch(error){window.Toast.error('Failed to schedule tour')}};const sendApplication = async(data)=>{try{await window.ApiService.post('/api/applications/send',data);window.Toast.success('Application sent!')}catch(error){window.Toast.error('Failed to send application')}};const notifyManager = async(data)=>{try{await window.ApiService.post('/api/notifications/manager',data)}catch(error){console.error('Failed to notify manager:',error)}};const generateSuggestedResponse =(conversationId)=>{return "Thank you for your interest! I'd be happy to help you schedule a tour..."};if(managerView){return(<div className="manager-conversation-viewer"><h2>AI Leasing Conversations</h2><div className="conversation-list">{conversations.map(conv =>(<div key={conv.id}className="conversation-item" onClick={()=> setActiveConversation(conv.id)}><div className="conv-header"><span className="conv-prospect">{conv.prospect_name || 'Anonymous'}</span><span className="conv-time">{new Date(conv.created_at).toLocaleString()}</span></div><div className="conv-preview">{conv.last_message}</div><div className="conv-status">{conv.status === 'needs_human' &&(<span className="badge urgent">Needs Response</span>)}{conv.scheduled_showing &&(<span className="badge success">Tour Scheduled</span>)}</div></div>))}</div>{activeConversation &&(<div className="conversation-detail"><h3>Conversation Transcript</h3><div className="ai-suggested-response"><h4>AI Suggested Response:</h4><textarea defaultValue={generateSuggestedResponse(activeConversation)}/><button className="send-response">Send to Prospect</button></div></div>)}</div>)}return(<div className={`leasing-assistant ${embedded ? 'embedded':'full'}`}><div className="assistant-header"><div className="assistant-info"><div className="ai-avatar"><i className="fas fa-robot"></i></div><div><h3>AI Leasing Assistant</h3><span className="status">Available 24/7</span></div></div></div><div className="assistant-messages">{messages.map((msg,idx)=>(<div key={idx}className={`message ${msg.role}`}>{msg.role === 'assistant' &&(<div className="ai-avatar-small"><i className="fas fa-robot"></i></div>)}<div className="message-content">{msg.content}{msg.suggestions &&(<div className="quick-replies">{msg.suggestions.map((suggestion,sidx)=>(<button key={sidx}onClick={()=>{setInput(suggestion);sendMessage()}}>{suggestion}</button>))}</div>)}</div></div>))}{loading &&(<div className="message assistant"><div className="ai-avatar-small"><i className="fas fa-robot"></i></div><div className="typing-indicator"><span></span><span></span><span></span></div></div>)}</div><div className="assistant-input"><input type="text" placeholder="Ask about units,schedule tours,application process..." value={input}onChange={(e)=> setInput(e.target.value)}onKeyPress={(e)=> e.key === 'Enter' && sendMessage()}/><button onClick={sendMessage}><i className="fas fa-paper-plane"></i></button></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.ConversationalLeasingAssistant = ConversationalLeasingAssistant;

// MainApp.jsx
const MainApp =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'long',day:'numeric',year:'numeric'})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('MainApp')((props,helpers)=>{const{useLocalState}= helpers;const [state,updateState] = useLocalState({isAuthenticated:false,currentUser:null,currentView:'login',userRole:null,companyData:null,loading:false});React.useEffect(()=>{checkExistingSession()},[]);const checkExistingSession =()=>{const savedUser = localStorage.getItem('currentUser');const savedAuth = localStorage.getItem('isAuthenticated');if(savedUser && savedAuth === 'true'){const userData = JSON.parse(savedUser);updateState({isAuthenticated:true,currentUser:userData,userRole:userData.role,companyData:userData.company,currentView:getDefaultView(userData.role)})}};const getDefaultView =(role)=>{switch(role){case 'super_admin':return 'super_admin';case 'property_manager':case 'admin':return 'dashboard';case 'resident':return 'resident_portal';case 'vendor':return 'vendor_portal';default:return 'dashboard'}};const handleLogin = async(credentials)=>{updateState({loading:true});try{await new Promise(resolve => setTimeout(resolve,1000));const mockUsers ={'admin@demo.com':{id:'USR001',name:'John Admin',email:'admin@demo.com',role:'property_manager',company:{id:'COMP001',name:'Demo Property Management',plan:'professional'},permissions:['all']},'superadmin@system.com':{id:'SA001',name:'System Administrator',email:'superadmin@system.com',role:'super_admin',company:null,permissions:['platform_admin']},'vendor@demo.com':{id:'VND001',name:'ABC Plumbing',email:'vendor@demo.com',role:'vendor',company:{id:'VND_COMP001',name:'ABC Plumbing Services'},permissions:['vendor_portal']},'resident@demo.com':{id:'RES001',name:'Jane Resident',email:'resident@demo.com',role:'resident',company:null,unit:'3B',property:'Sunset Apartments',permissions:['resident_portal']}};const user = mockUsers[credentials.email];if(!user){throw new Error('Invalid credentials')}localStorage.setItem('currentUser',JSON.stringify(user));localStorage.setItem('isAuthenticated','true');updateState({isAuthenticated:true,currentUser:user,userRole:user.role,companyData:user.company,currentView:getDefaultView(user.role),loading:false});showToast('Login successful!','success')}catch(error){showToast(error.message || 'Login failed','error');updateState({loading:false})}};const handleLogout =()=>{localStorage.removeItem('currentUser');localStorage.removeItem('isAuthenticated');updateState({isAuthenticated:false,currentUser:null,currentView:'login',userRole:null,companyData:null});showToast('Logged out successfully','info')};const showToast =(message,type = 'info')=>{const toast = document.createElement('div');toast.className = `toast toast-${type}`;toast.textContent = message;toast.style.cssText = ` position:fixed;top:20px;right:20px;padding:12px 20px;border-radius:8px;color:white;font-weight:500;z-index:10000;opacity:0;transform:translateX(100%);transition:all 0.3s ease;${type === 'success' ? 'background:#10b981;':''}${type === 'error' ? 'background:#ef4444;':''}${type === 'info' ? 'background:#3b82f6;':''}`;document.body.appendChild(toast);setTimeout(()=>{toast.style.opacity = '1';toast.style.transform = 'translateX(0)'},100);setTimeout(()=>{toast.style.opacity = '0';toast.style.transform = 'translateX(100%)';setTimeout(()=>{if(toast.parentNode){toast.parentNode.removeChild(toast)}},300)},3000)};React.useEffect(()=>{window.Toast ={success:(msg)=> showToast(msg,'success'),error:(msg)=> showToast(msg,'error'),info:(msg)=> showToast(msg,'info')}},[]);if(!state.isAuthenticated){return React.createElement(LoginPage,{onLogin:handleLogin,loading:state.loading})}return React.createElement('div',{className:'main-app'},[ React.createElement(AppHeader,{key:'header',user:state.currentUser,currentView:state.currentView,onViewChange:(view)=> updateState({currentView:view}),onLogout:handleLogout}),React.createElement('main',{key:'main',className:'app-main'},renderCurrentView())]);function renderCurrentView(){switch(state.currentView){case 'super_admin':return React.createElement(window.AppModules.SuperAdminPanel,{superAdminId:state.currentUser.id});case 'dashboard':return React.createElement(DashboardSelector,{userRole:state.userRole,onSelectModule:(view)=> updateState({currentView:view})});case 'financial_dashboard':return React.createElement(window.AppModules.FinancialDashboard,{companyId:state.companyData?.id,userRole:state.userRole});case 'financial_accounting':return React.createElement(window.AppModules.FinancialAccountingEngine,{companyId:state.companyData?.id});case 'leasing_system':return React.createElement(window.AppModules.LeasingSystem,{companyId:state.companyData?.id});case 'resident_portal':return React.createElement(window.AppModules.ResidentPortal,{tenantId:state.currentUser.id,unit:state.currentUser.unit,property:state.currentUser.property});case 'vendor_portal':return React.createElement(window.AppModules.VendorPortal,{vendorId:state.currentUser.id,vendorData:state.currentUser});case 'admin_vendor_panel':return React.createElement(window.AppModules.AdminVendorPanel,{companyId:state.companyData?.id,userId:state.currentUser.id,userRole:state.userRole});case 'maintenance_kanban':return React.createElement(window.AppModules.MaintenanceKanban,{companyId:state.companyData?.id,userRole:state.userRole});case 'digital_applications':return React.createElement(window.AppModules.DigitalApplication,{propertyId:'PROP001',unitId:'UNIT001'});case 'elease_signing':return React.createElement(window.AppModules.ELeaseSigningSystem,{companyId:state.companyData?.id});case 'application_workflow':return React.createElement(window.AppModules.ApplicationWorkflow,{companyId:state.companyData?.id});default:return React.createElement('div',{className:'error-view'},[ React.createElement('h2',{key:'title'},'Page Not Found'),React.createElement('p',{key:'desc'},'The requested page could not be found.'),React.createElement('button',{key:'back',className:'btn btn-primary',onClick:()=> updateState({currentView:getDefaultView(state.userRole)})},'Go to Dashboard')])}}})})();const LoginPage = ComponentFactory.createComponent('LoginPage')((props,helpers)=>{const{onLogin,loading}= props;const{useLocalState}= helpers;const [state,updateState] = useLocalState({email:'',password:'',showDemo:false});const handleSubmit =(e)=>{e.preventDefault();if(state.email && state.password){onLogin({email:state.email,password:state.password})}};const demoAccounts = [{email:'admin@demo.com',role:'Property Manager',desc:'Full property management access'},{email:'superadmin@system.com',role:'Super Admin',desc:'Platform administration'},{email:'vendor@demo.com',role:'Vendor',desc:'Service provider portal'},{email:'resident@demo.com',role:'Resident',desc:'Tenant portal access'}];return React.createElement('div',{className:'login-page'},[ React.createElement('div',{key:'container',className:'login-container'},[ React.createElement('div',{key:'form',className:'login-form'},[ React.createElement('div',{key:'header',className:'login-header'},[ React.createElement('h1',{key:'title'},'Property Management System'),React.createElement('p',{key:'subtitle'},'Sign in to your account')]),React.createElement('form',{key:'form',onSubmit:handleSubmit},[ React.createElement('div',{key:'email',className:'form-group'},[ React.createElement('label',{key:'label'},'Email Address'),React.createElement('input',{key:'input',type:'email',value:state.email,onChange:(e)=> updateState({email:e.target.value}),placeholder:'Enter your email',required:true})]),React.createElement('div',{key:'password',className:'form-group'},[ React.createElement('label',{key:'label'},'Password'),React.createElement('input',{key:'input',type:'password',value:state.password,onChange:(e)=> updateState({password:e.target.value}),placeholder:'Enter your password',required:true})]),React.createElement('button',{key:'submit',type:'submit',className:'login-btn',disabled:loading},loading ? 'Signing in...':'Sign In')]),React.createElement('div',{key:'demo',className:'demo-section'},[ React.createElement('button',{key:'toggle',type:'button',className:'demo-toggle',onClick:()=> updateState({showDemo:!state.showDemo})},state.showDemo ? 'Hide Demo Accounts':'Show Demo Accounts'),state.showDemo && React.createElement('div',{key:'accounts',className:'demo-accounts'},demoAccounts.map((account,idx)=> React.createElement('div',{key:idx,className:'demo-account',onClick:()=> updateState({email:account.email,password:'demo123'})},[ React.createElement('div',{key:'role',className:'account-role'},account.role),React.createElement('div',{key:'email',className:'account-email'},account.email),React.createElement('div',{key:'desc',className:'account-desc'},account.desc)])))])])])])});const AppHeader = ComponentFactory.createComponent('AppHeader')((props,helpers)=>{const{user,currentView,onViewChange,onLogout}= props;const getNavItems =()=>{switch(user.role){case 'super_admin':return [{id:'super_admin',label:'Platform Admin',icon:'fa-crown'}];case 'property_manager':case 'admin':return [{id:'dashboard',label:'Dashboard',icon:'fa-home'},{id:'financial_dashboard',label:'Financial',icon:'fa-chart-line'},{id:'leasing_system',label:'Leasing',icon:'fa-key'},{id:'maintenance_kanban',label:'Maintenance',icon:'fa-wrench'},{id:'admin_vendor_panel',label:'Vendors',icon:'fa-users'}];case 'vendor':return [{id:'vendor_portal',label:'My Jobs',icon:'fa-briefcase'}];case 'resident':return [{id:'resident_portal',label:'My Home',icon:'fa-home'}];default:return []}};return React.createElement('header',{className:'app-header'},[ React.createElement('div',{key:'brand',className:'app-brand'},[ React.createElement('h1',{key:'title'},'PropertyOS'),user.company && React.createElement('span',{key:'company'},user.company.name)]),React.createElement('nav',{key:'nav',className:'app-nav'},getNavItems().map(item => React.createElement('button',{key:item.id,className:`nav-item ${currentView === item.id ? 'active':''}`,onClick:()=> onViewChange(item.id)},[ React.createElement('i',{key:'icon',className:`fas ${item.icon}`}),React.createElement('span',{key:'label'},item.label)]))),React.createElement('div',{key:'user',className:'user-section'},[ React.createElement('div',{key:'info',className:'user-info'},[ React.createElement('span',{key:'name',className:'user-name'},user.name),React.createElement('span',{key:'role',className:'user-role'},user.role.replace('_',' '))]),React.createElement('button',{key:'logout',className:'logout-btn',onClick:onLogout,title:'Logout'},React.createElement('i',{className:'fas fa-sign-out-alt'}))])])});const DashboardSelector = ComponentFactory.createComponent('DashboardSelector')((props,helpers)=>{const{userRole,onSelectModule}= props;const modules = [{id:'financial_dashboard',title:'Financial Management',description:'Accounting,reporting,and financial analytics',icon:'fa-chart-line',color:'blue'},{id:'leasing_system',title:'Leasing & Applications',description:'Tenant applications and lease management',icon:'fa-key',color:'green'},{id:'maintenance_kanban',title:'Maintenance Management',description:'Work orders,vendors,and maintenance tracking',icon:'fa-wrench',color:'orange'},{id:'admin_vendor_panel',title:'Vendor Management',description:'Vendor directory and performance tracking',icon:'fa-users',color:'purple'},{id:'digital_applications',title:'Digital Applications',description:'Online rental applications with AI validation',icon:'fa-file-alt',color:'teal'},{id:'elease_signing',title:'E-Lease Signing',description:'Digital lease generation and DocuSign integration',icon:'fa-file-signature',color:'indigo'}];return React.createElement('div',{className:'dashboard-selector'},[ React.createElement('div',{key:'header',className:'selector-header'},[ React.createElement('h1',{key:'title'},'Property Management Dashboard'),React.createElement('p',{key:'desc'},'Select a module to get started')]),React.createElement('div',{key:'grid',className:'modules-grid'},modules.map(module => React.createElement('div',{key:module.id,className:`module-card ${module.color}`,onClick:()=> onSelectModule(module.id)},[ React.createElement('div',{key:'icon',className:'module-icon'},React.createElement('i',{className:`fas ${module.icon}`})),React.createElement('div',{key:'content',className:'module-content'},[ React.createElement('h3',{key:'title'},module.title),React.createElement('p',{key:'desc'},module.description)]),React.createElement('div',{key:'arrow',className:'module-arrow'},React.createElement('i',{className:'fas fa-arrow-right'}))])))])});window.AppModules = window.AppModules ||{};window.AppModules.MainApp = MainApp;

// PropertySwitcher.jsx
const PropertySwitcher =({currentProperty,onPropertyChange})=>{const [isOpen,setIsOpen] = React.useState(false);const [properties,setProperties] = React.useState([]);const [loading,setLoading] = React.useState(true);const [searchTerm,setSearchTerm] = React.useState('');const dropdownRef = React.useRef(null);React.useEffect(()=>{loadProperties()},[]);React.useEffect(()=>{const handleClickOutside =(event)=>{if(dropdownRef.current && !dropdownRef.current.contains(event.target)){setIsOpen(false)}};document.addEventListener('mousedown',handleClickOutside);return()=> document.removeEventListener('mousedown',handleClickOutside)},[]);const loadProperties = async()=>{try{if(window.ApiService && typeof window.ApiService.get === 'function'){const response = await window.ApiService.get('/properties');setProperties(response.data)}else{setProperties(mockProperties)}}catch(error){console.error('Error loading properties:',error);setProperties(mockProperties)}finally{setLoading(false)}};const mockProperties = [{id:'all',name:'All Properties',type:'all',units:48,owner:null,icon:'fa-building'},{id:'sunset-apts',name:'Sunset Apartments',type:'residential',address:'123 Sunset Blvd,Los Angeles,CA',units:24,owner:'BDPMS LLC',ownerId:'owner-1',managementCompany:'PropertyPro Management',icon:'fa-home'},{id:'downtown-plaza',name:'Downtown Plaza',type:'commercial',address:'456 Business Ave,San Francisco,CA',units:8,owner:'Smith Trust',ownerId:'owner-2',managementCompany:'PropertyPro Management',icon:'fa-building'},{id:'garden-complex',name:'Garden Complex',type:'residential',address:'789 Garden St,Austin,TX',units:16,owner:'Johnson Properties',ownerId:'owner-3',managementCompany:'PropertyPro Management',icon:'fa-tree'}];const groupedProperties = React.useMemo(()=>{const groups ={};const filtered = properties.filter(p => p.name.toLowerCase().includes(searchTerm.toLowerCase())||(p.owner && p.owner.toLowerCase().includes(searchTerm.toLowerCase())));filtered.forEach(property =>{if(property.id === 'all'){groups['all'] = groups['all'] ||{owner:'All Properties',properties:[]};groups['all'].properties.push(property)}else{const owner = property.owner || 'Unassigned';groups[owner] = groups[owner] ||{owner,properties:[]};groups[owner].properties.push(property)}});return groups},[properties,searchTerm]);const selectedProperty = properties.find(p => p.id === currentProperty)|| properties[0];return React.createElement('div',{className:'property-switcher',ref:dropdownRef},[ React.createElement('button',{key:'trigger',className:'property-switcher-trigger',onClick:()=> setIsOpen(!isOpen)},[ React.createElement('div',{key:'info',className:'trigger-info'},[ React.createElement('div',{key:'label',className:'trigger-label'},'Property'),React.createElement('div',{key:'value',className:'trigger-value'},[ React.createElement('i',{key:'icon',className:`fas ${selectedProperty?.icon || 'fa-building'}`}),React.createElement('span',{key:'name'},selectedProperty?.name || 'Select Property'),selectedProperty?.owner && React.createElement('span',{key:'owner',className:'property-owner'},` • ${selectedProperty.owner}`)])]),React.createElement('i',{key:'chevron',className:`fas fa-chevron-${isOpen ? 'up':'down'}trigger-chevron`})]),isOpen && React.createElement('div',{key:'dropdown',className:'property-switcher-dropdown'},[ React.createElement('div',{key:'search',className:'dropdown-search'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search properties or owners...',value:searchTerm,onChange:(e)=> setSearchTerm(e.target.value),onClick:(e)=> e.stopPropagation()})]),React.createElement('div',{key:'list',className:'dropdown-list'},loading ? React.createElement('div',{className:'dropdown-loading'},'Loading properties...'):Object.entries(groupedProperties).length === 0 ? React.createElement('div',{className:'dropdown-empty'},'No properties found'):Object.entries(groupedProperties).map(([owner,group])=> React.createElement('div',{key:owner,className:'property-group'},[ owner !== 'all' && React.createElement('div',{key:'header',className:'group-header'},owner),...group.properties.map(property => React.createElement('div',{key:property.id,className:`property-option ${property.id === currentProperty ? 'active':''}`,onClick:()=>{onPropertyChange(property.id);setIsOpen(false);setSearchTerm('')}},[ React.createElement('div',{key:'icon',className:'option-icon'},React.createElement('i',{className:`fas ${property.icon}`})),React.createElement('div',{key:'info',className:'option-info'},[ React.createElement('div',{key:'name',className:'option-name'},property.name),property.address && React.createElement('div',{key:'address',className:'option-address'},property.address)]),React.createElement('div',{key:'meta',className:'option-meta'},[ React.createElement('span',{key:'units',className:'unit-count'},`${property.units}units`),property.id === currentProperty && React.createElement('i',{key:'check',className:'fas fa-check'})])]))]))),React.createElement('div',{key:'footer',className:'dropdown-footer'},[ React.createElement('button',{key:'manage',className:'footer-action',onClick:()=>{setIsOpen(false);if(window.setActivePage){window.setActivePage('properties')}}},[ React.createElement('i',{key:'icon',className:'fas fa-cog'}),' Manage Properties' ])])])])};const PropertyContext = React.createContext({currentProperty:'all',setCurrentProperty:()=>{},properties:[],currentPropertyData:null});const PropertyProvider =({children})=>{const [currentProperty,setCurrentProperty] = React.useState(()=>{return localStorage.getItem('selectedProperty')|| 'all'});const [properties,setProperties] = React.useState([]);React.useEffect(()=>{localStorage.setItem('selectedProperty',currentProperty)},[currentProperty]);React.useEffect(()=>{loadProperties()},[]);const loadProperties = async()=>{try{if(window.ApiService && typeof window.ApiService.get === 'function'){const response = await window.ApiService.get('/properties');setProperties(response.data)}else{setProperties([{id:'all',name:'All Properties',type:'all'},{id:'sunset-apts',name:'Sunset Apartments',type:'residential',owner:'BDPMS LLC'},{id:'downtown-plaza',name:'Downtown Plaza',type:'commercial',owner:'Smith Trust'},{id:'garden-complex',name:'Garden Complex',type:'residential',owner:'Johnson Properties'}])}}catch(error){console.error('Error loading properties:',error)}};const currentPropertyData = properties.find(p => p.id === currentProperty);return React.createElement(PropertyContext.Provider,{value:{currentProperty,setCurrentProperty,properties,currentPropertyData}},children)};const useProperty =()=>{const context = React.useContext(PropertyContext);if(!context){throw new Error('useProperty must be used within a PropertyProvider')}return context};window.AppModules = window.AppModules ||{};window.AppModules.PropertySwitcher = PropertySwitcher;window.AppModules.PropertyProvider = PropertyProvider;window.AppModules.PropertyContext = PropertyContext;window.AppModules.useProperty = useProperty;

// PropertyCardPattern.jsx
const PropertyCard = ComponentFactory.createComponent('PropertyCard',{privateHelpers:{getOccupancyColor:(rate)=>{if(rate >= 95)return '#00C851';if(rate >= 80)return '#ffbb33';return '#ff4444'},getStatusBadgeClass:(status)=>{const statusMap ={active:'status-active',maintenance:'status-maintenance',vacant:'status-vacant'};return statusMap[status] || 'status-default'},truncateDescription:(text,maxLength = 100)=>{if(!text || text.length <= maxLength)return text;return text.substring(0,maxLength)+ '...'}},defaultProps:{showActions:true,compact:false,showOccupancy:true},propTypes:{property:'object',onEdit:'function',onDelete:'function',onView:'function',showActions:'boolean',compact:'boolean'},withPerformanceTracking:true,withErrorBoundary:true})((props,helpers,ref)=>{const{property,onEdit,onDelete,onView,showActions,compact,showOccupancy}= props;const{formatCurrency,formatDate,formatPercentage,classNames,useLocalState,getOccupancyColor,getStatusBadgeClass,truncateDescription}= helpers;const [state,updateState] = useLocalState({isHovered:false,showDetails:false,loading:false});const occupancyRate = property.occupancy?.rate || 0;const occupancyColor = getOccupancyColor(occupancyRate);const statusClass = getStatusBadgeClass(property.status);const handleMouseEnter =()=> updateState({isHovered:true});const handleMouseLeave =()=> updateState({isHovered:false});const handleToggleDetails =()=>{updateState({showDetails:!state.showDetails})};const handleEdit =()=>{if(onEdit)onEdit(property)};const handleDelete =()=>{if(onDelete && confirm(`Delete property "${property.name}"?`)){onDelete(property.id)}};const handleView =()=>{if(onView)onView(property)};const renderHeader =()=>(React.createElement('div',{className:'property-card-header'},[ React.createElement('h3',{key:'title',className:'property-title'},property.name),React.createElement('span',{key:'status',className:classNames('status-badge',statusClass)},property.status),showOccupancy && React.createElement('div',{key:'occupancy',className:'occupancy-indicator',style:{color:occupancyColor}},formatPercentage(occupancyRate))]));const renderContent =()=>(React.createElement('div',{className:'property-card-content'},[ React.createElement('p',{key:'address',className:'property-address'},property.address),property.description && React.createElement('p',{key:'description',className:'property-description'},compact ? truncateDescription(property.description):property.description),React.createElement('div',{key:'stats',className:'property-stats'},[ React.createElement('div',{key:'units'},[ React.createElement('span',{key:'label'},'Units:'),React.createElement('strong',{key:'value'},property.total_units || 'N/A')]),React.createElement('div',{key:'rent'},[ React.createElement('span',{key:'label'},'Avg Rent:'),React.createElement('strong',{key:'value'},formatCurrency(property.average_rent || 0))]),property.last_updated && React.createElement('div',{key:'updated'},[ React.createElement('span',{key:'label'},'Updated:'),React.createElement('small',{key:'value'},formatDate(property.last_updated))])])]));const renderActions =()=>{if(!showActions)return null;return React.createElement('div',{className:'property-card-actions'},[ React.createElement('button',{key:'view',className:'btn btn-outline btn-sm',onClick:handleView,disabled:state.loading},'👁️ View'),React.createElement('button',{key:'edit',className:'btn btn-primary btn-sm',onClick:handleEdit,disabled:state.loading},'✏️ Edit'),React.createElement('button',{key:'delete',className:'btn btn-danger btn-sm',onClick:handleDelete,disabled:state.loading},'🗑️ Delete')])};const renderDetailsToggle =()=>{if(compact)return null;return React.createElement('button',{className:'details-toggle',onClick:handleToggleDetails},state.showDetails ? '▼ Less Details':'▶ More Details')};const renderExpandedDetails =()=>{if(!state.showDetails)return null;return React.createElement('div',{className:'property-expanded-details'},[ property.amenities && React.createElement('div',{key:'amenities'},[ React.createElement('h4',{key:'title'},'Amenities'),React.createElement('ul',{key:'list'},property.amenities.map((amenity,i)=> React.createElement('li',{key:i},amenity)))]),property.maintenance && React.createElement('div',{key:'maintenance'},[ React.createElement('h4',{key:'title'},'Maintenance'),React.createElement('p',{key:'open'},`Open Tickets:${property.maintenance.open || 0}`),React.createElement('p',{key:'completed'},`Completed This Month:${property.maintenance.completed || 0}`)])])};return React.createElement('div',{ref,className:classNames('property-card',compact && 'property-card-compact',state.isHovered && 'property-card-hovered',property.status && `property-card-${property.status}`),onMouseEnter:handleMouseEnter,onMouseLeave:handleMouseLeave,'data-property-id':property.id},[ renderHeader(),renderContent(),renderDetailsToggle(),renderExpandedDetails(),renderActions()])});const PropertyList = ComponentFactory.createComponent('PropertyList',{privateHelpers:{sortProperties:(properties,sortBy,sortOrder)=>{return [...properties].sort((a,b)=>{let aVal = a[sortBy];let bVal = b[sortBy];if(typeof aVal === 'string'){aVal = aVal.toLowerCase();bVal = bVal.toLowerCase()}if(sortOrder === 'asc'){return aVal > bVal ? 1:-1}else{return aVal < bVal ? 1:-1}})},filterProperties:(properties,filters)=>{return properties.filter(property =>{if(filters.status && property.status !== filters.status)return false;if(filters.minUnits && property.total_units < filters.minUnits)return false;if(filters.maxUnits && property.total_units > filters.maxUnits)return false;if(filters.search){const searchLower = filters.search.toLowerCase();const searchableText = `${property.name}${property.address}${property.description}`.toLowerCase();if(!searchableText.includes(searchLower))return false}return true})}},defaultProps:{compact:false,showFilters:true,showSort:true,itemsPerPage:10},withPerformanceTracking:true,withErrorBoundary:true})((props,helpers)=>{const{properties = [],onEdit,onDelete,onView,compact,showFilters,showSort,itemsPerPage}= props;const{useLocalState,sortProperties,filterProperties,debounce,classNames}= helpers;const [state,updateState] = useLocalState({sortBy:'name',sortOrder:'asc',filters:{status:'',search:'',minUnits:'',maxUnits:''},currentPage:1});const debouncedSearch = React.useMemo(()=> debounce((searchValue)=>{updateState({filters:{...state.filters,search:searchValue},currentPage:1})},300),[state.filters]);const filteredProperties = filterProperties(properties,state.filters);const sortedProperties = sortProperties(filteredProperties,state.sortBy,state.sortOrder);const totalPages = Math.ceil(sortedProperties.length / itemsPerPage);const startIndex =(state.currentPage - 1)* itemsPerPage;const paginatedProperties = sortedProperties.slice(startIndex,startIndex + itemsPerPage);const handleSort =(field)=>{const newOrder = state.sortBy === field && state.sortOrder === 'asc' ? 'desc':'asc';updateState({sortBy:field,sortOrder:newOrder})};const handleFilterChange =(filterKey,value)=>{updateState({filters:{...state.filters,[filterKey]:value},currentPage:1})};const handlePageChange =(page)=>{updateState({currentPage:page})};const renderFilters =()=>{if(!showFilters)return null;return React.createElement('div',{className:'property-filters'},[ React.createElement('input',{key:'search',type:'text',placeholder:'Search properties...',onChange:(e)=> debouncedSearch(e.target.value),className:'filter-search'}),React.createElement('select',{key:'status',value:state.filters.status,onChange:(e)=> handleFilterChange('status',e.target.value),className:'filter-status'},[ React.createElement('option',{key:'all',value:''},'All Statuses'),React.createElement('option',{key:'active',value:'active'},'Active'),React.createElement('option',{key:'maintenance',value:'maintenance'},'Maintenance'),React.createElement('option',{key:'vacant',value:'vacant'},'Vacant')])])};const renderSort =()=>{if(!showSort)return null;const sortFields = [{key:'name',label:'Name'},{key:'total_units',label:'Units'},{key:'average_rent',label:'Rent'},{key:'last_updated',label:'Updated'}];return React.createElement('div',{className:'property-sort'},sortFields.map(field => React.createElement('button',{key:field.key,className:classNames('sort-button',state.sortBy === field.key && 'active',state.sortBy === field.key && `sort-${state.sortOrder}`),onClick:()=> handleSort(field.key)},[ field.label,state.sortBy === field.key &&(state.sortOrder === 'asc' ? ' ↑':' ↓')])))};const renderPagination =()=>{if(totalPages <= 1)return null;return React.createElement('div',{className:'pagination'},[ React.createElement('button',{key:'prev',disabled:state.currentPage === 1,onClick:()=> handlePageChange(state.currentPage - 1)},'Previous'),React.createElement('span',{key:'info'},`Page ${state.currentPage}of ${totalPages}`),React.createElement('button',{key:'next',disabled:state.currentPage === totalPages,onClick:()=> handlePageChange(state.currentPage + 1)},'Next')])};const renderPropertyCards =()=>{if(paginatedProperties.length === 0){return React.createElement('div',{className:'no-properties'},'No properties found matching your criteria.')}return React.createElement('div',{className:classNames('property-grid',compact && 'property-grid-compact')},paginatedProperties.map(property => React.createElement(PropertyCard,{key:property.id,property,onEdit,onDelete,onView,compact})))};return React.createElement('div',{className:'property-list'},[ renderFilters(),renderSort(),renderPropertyCards(),renderPagination()])});window.AppModules = window.AppModules ||{};window.AppModules.PropertyCard = PropertyCard;window.AppModules.PropertyList = PropertyList;

// ProfessionalMail.jsx
const ProfessionalMail =()=>{const [selectedFolder,setSelectedFolder] = React.useState('inbox');const [selectedEmails,setSelectedEmails] = React.useState([]);const [composing,setComposing] = React.useState(false);const [emailView,setEmailView] = React.useState('comfortable');return(<div className="professional-mail">{}<div className="mail-header"><div className="header-left"><button className="menu-btn"><i className="fas fa-bars"></i></button><img src="/logo.png" alt="PropertyPro" className="mail-logo" /><h1 className="mail-title">Mail</h1></div><div className="mail-search"><div className="search-container"><button className="search-icon"><i className="fas fa-search"></i></button><input type="text" placeholder="Search mail" className="search-input" /><button className="search-options"><i className="fas fa-sliders-h"></i></button></div></div><div className="header-right"><button className="header-btn"><i className="fas fa-question-circle"></i></button><button className="header-btn"><i className="fas fa-cog"></i></button><button className="header-btn"><i className="fas fa-th"></i></button><div className="user-avatar">JA</div></div></div>{}<div className="mail-container">{}<div className="mail-sidebar"><button className="compose-btn" onClick={()=> setComposing(true)}><i className="fas fa-plus"></i> Compose </button><div className="folder-list"><FolderItem icon="fa-inbox" label="Inbox" count={127}active={selectedFolder === 'inbox'}onClick={()=> setSelectedFolder('inbox')}/><FolderItem icon="fa-star" label="Starred" active={selectedFolder === 'starred'}onClick={()=> setSelectedFolder('starred')}/><FolderItem icon="fa-clock" label="Snoozed" active={selectedFolder === 'snoozed'}onClick={()=> setSelectedFolder('snoozed')}/><FolderItem icon="fa-paper-plane" label="Sent" active={selectedFolder === 'sent'}onClick={()=> setSelectedFolder('sent')}/><FolderItem icon="fa-file" label="Drafts" count={3}active={selectedFolder === 'drafts'}onClick={()=> setSelectedFolder('drafts')}/><div className="folder-section"><h4>Property Labels</h4><PropertyLabel color="#4285f4" label="Sunset Apartments" count={45}/><PropertyLabel color="#0f9d58" label="Downtown Plaza" count={23}/><PropertyLabel color="#f4b400" label="Garden Complex" count={18}/></div><div className="folder-section"><h4>Categories</h4><CategoryLabel icon="fa-users" label="Tenants" count={89}/><CategoryLabel icon="fa-home" label="Owners" count={34}/><CategoryLabel icon="fa-tools" label="Maintenance" count={56}/><CategoryLabel icon="fa-file-contract" label="Leases" count={12}/></div></div></div>{}<div className="mail-list">{}<div className="list-toolbar"><div className="toolbar-section"><input type="checkbox" className="select-all" /><button className="toolbar-btn dropdown"><i className="fas fa-caret-down"></i></button><button className="toolbar-btn"><i className="fas fa-redo"></i></button><button className="toolbar-btn"><i className="fas fa-ellipsis-v"></i></button></div><div className="toolbar-section"><span className="email-count">1-50 of 843</span><button className="toolbar-btn"><i className="fas fa-chevron-left"></i></button><button className="toolbar-btn"><i className="fas fa-chevron-right"></i></button><button className="toolbar-btn dropdown"><i className="fas fa-keyboard"></i></button></div></div>{}<div className="tab-bar"><div className="tab active"><i className="fas fa-inbox"></i> Primary </div><div className="tab"><i className="fas fa-tag"></i> Promotions </div><div className="tab"><i className="fas fa-users"></i> Updates </div></div>{}<div className="email-items"><EmailItem unread={true}starred={false}important={true}sender="Sarah Johnson" subject="Maintenance Request - Unit 203" snippet="Hi,I wanted to report that the kitchen faucet is leaking. It started yesterday and seems to be getting worse..." time="10:42 AM" hasAttachment={true}labels={[{color:'#4285f4',text:'Sunset Apartments'},{color:'#ea4335',text:'Urgent'}]}/><EmailItem unread={true}starred={true}sender="Michael Chen" subject="Lease Renewal Question" snippet="I received the lease renewal notice and had a few questions about the terms. Could we schedule a call to discuss..." time="9:23 AM" labels={[{color:'#0f9d58',text:'Downtown Plaza'},{color:'#f4b400',text:'Leases'}]}/><EmailItem unread={false}starred={false}sender="Property Owner - Smith Trust" subject="Monthly Statement Ready" snippet="Your monthly property management statement for October 2024 is now available. Total collected rent:$45,320..." time="Yesterday" hasAttachment={true}labels={[{color:'#673ab7',text:'Owners'},{color:'#4285f4',text:'Financial'}]}/></div></div>{}<div className="mail-content"><EmailViewer /></div></div>{}{composing && <ComposeWindow onClose={()=> setComposing(false)}/>}</div>)};const FolderItem =({icon,label,count,active,onClick})=>{return(<div className={`folder-item ${active ? 'active':''}`}onClick={onClick}><i className={`fas ${icon}`}></i><span>{label}</span>{count && <span className="count">{count}</span>}</div>)};const PropertyLabel =({color,label,count})=>{return(<div className="property-label" style={{'--label-color':color}}><span>{label}</span>{count && <span className="count">{count}</span>}</div>)};const CategoryLabel =({icon,label,count})=>{return(<div className="category-label"><i className={`fas ${icon}`}></i><span>{label}</span>{count && <span className="count">{count}</span>}</div>)};const EmailItem =({unread,starred,important,sender,subject,snippet,time,hasAttachment,labels})=>{return(<div className={`email-item ${unread ? 'unread':''}`}><div className="email-controls"><input type="checkbox" /><button className="star-btn"><i className={`${starred ? 'fas':'far'}fa-star`}></i></button>{important &&(<span className="importance-marker"><i className="fas fa-bookmark"></i></span>)}</div><div className="email-content"><div className="email-header"><span className="sender">{sender}</span>{labels && labels.map((label,idx)=>(<span key={idx}className="email-label" style={{backgroundColor:label.color}}>{label.text}</span>))}</div><div className="email-body"><span className="subject">{subject}</span><span className="snippet"> -{snippet}</span></div></div><div className="email-meta">{hasAttachment && <i className="fas fa-paperclip attachment-icon"></i>}<span className="time">{time}</span></div></div>)};const EmailViewer =()=>{return(<div className="email-viewer"><div className="viewer-placeholder"><i className="fas fa-envelope-open" style={{fontSize:'48px',color:'#dadce0',marginBottom:'16px'}}></i><p style={{color:'#5f6368',fontSize:'16px'}}>Select an email to read</p></div></div>)};const ComposeWindow =({onClose})=>{const [to,setTo] = React.useState('');const [subject,setSubject] = React.useState('');const [content,setContent] = React.useState('');const [showCc,setShowCc] = React.useState(false);return(<div className="compose-window"><div className="compose-header"><span>New Message</span><div className="compose-actions"><button><i className="fas fa-minus"></i></button><button><i className="fas fa-expand"></i></button><button onClick={onClose}><i className="fas fa-times"></i></button></div></div><div className="compose-recipients"><div className="recipient-row"><span className="field-label">To</span><input type="text" value={to}onChange={(e)=> setTo(e.target.value)}placeholder="Recipients" /><button onClick={()=> setShowCc(!showCc)}>Cc Bcc</button></div>{showCc &&(<><div className="recipient-row"><span className="field-label">Cc</span><input type="text" /></div><div className="recipient-row"><span className="field-label">Bcc</span><input type="text" /></div></>)}<div className="recipient-row"><input type="text" className="subject-input" placeholder="Subject" value={subject}onChange={(e)=> setSubject(e.target.value)}/></div></div><div className="compose-editor"><div className="editor-toolbar"><button><i className="fas fa-bold"></i></button><button><i className="fas fa-italic"></i></button><button><i className="fas fa-underline"></i></button><button><i className="fas fa-text-height"></i></button><button><i className="fas fa-palette"></i></button><button><i className="fas fa-link"></i></button><button><i className="fas fa-list-ol"></i></button><button><i className="fas fa-list-ul"></i></button><button><i className="fas fa-quote-right"></i></button><button><i className="fas fa-align-left"></i></button><button><i className="fas fa-align-center"></i></button><button><i className="fas fa-align-right"></i></button></div><textarea className="compose-content" value={content}onChange={(e)=> setContent(e.target.value)}placeholder="Compose email" /></div><div className="compose-footer"><button className="send-btn"> Send <i className="fas fa-caret-down"></i></button><div className="compose-tools"><button><i className="fas fa-text-height"></i></button><button><i className="fas fa-paperclip"></i></button><button><i className="fas fa-link"></i></button><button><i className="fas fa-smile"></i></button><button><i className="fas fa-image"></i></button><button><i className="fas fa-lock"></i></button><button><i className="fas fa-pen"></i></button></div><button className="compose-more"><i className="fas fa-ellipsis-v"></i></button><button className="compose-delete"><i className="fas fa-trash"></i></button></div></div>)};if(typeof window !== 'undefined'){window.AppModules = window.AppModules ||{};window.AppModules.ProfessionalMail = ProfessionalMail}

// AICalendarSystem.jsx
const AICalendarSystem =({userType,userId,userName,userProperties = []})=>{const [currentDate,setCurrentDate] = React.useState(new Date());const [selectedDate,setSelectedDate] = React.useState(new Date());const [events,setEvents] = React.useState([]);const [showEventModal,setShowEventModal] = React.useState(false);const [selectedEvent,setSelectedEvent] = React.useState(null);const [view,setView] = React.useState('month');const [showAIScheduler,setShowAIScheduler] = React.useState(false);const [aiSuggestions,setAiSuggestions] = React.useState([]);const [loading,setLoading] = React.useState(true);const [eventData,setEventData] = React.useState({title:'',description:'',startDate:'',endDate:'',startTime:'',endTime:'',category:'general',priority:'normal',attendees:[],propertyId:'',reminderMinutes:15,isRecurring:false,recurringPattern:'weekly',location:'',isAllDay:false});React.useEffect(()=>{loadEvents()},[currentDate,userType]);const loadEvents = async()=>{setLoading(true);try{const mockEvents = [{id:'1',title:'Property Inspection - Sunset Apartments',description:'Monthly property inspection with maintenance team',startDate:new Date(2025,0,15,9,0).toISOString(),endDate:new Date(2025,0,15,11,0).toISOString(),category:'inspection',priority:'high',propertyId:userProperties[0]?.id,propertyName:userProperties[0]?.name,attendees:['maintenance@property.com','inspector@company.com'],location:'Sunset Apartments - Lobby',createdBy:userId,isAllDay:false,reminderSent:false},{id:'2',title:'Tenant Meeting - Unit 205',description:'Lease renewal discussion with Sarah Johnson',startDate:new Date(2025,0,16,14,0).toISOString(),endDate:new Date(2025,0,16,15,0).toISOString(),category:'meeting',priority:'normal',propertyId:userProperties[0]?.id,propertyName:userProperties[0]?.name,attendees:['sarah.johnson@email.com'],location:'Property Office',createdBy:userId,isAllDay:false,reminderSent:false},{id:'3',title:'Vendor Meeting - HVAC Maintenance',description:'Annual HVAC maintenance contract discussion',startDate:new Date(2025,0,17,10,30).toISOString(),endDate:new Date(2025,0,17,11,30).toISOString(),category:'vendor',priority:'medium',propertyId:'all',propertyName:'All Properties',attendees:['hvac@solutions.com'],location:'Main Office',createdBy:userId,isAllDay:false,reminderSent:false},{id:'4',title:'Owner Report Due',description:'Monthly financial reports due for all properties',startDate:new Date(2025,0,31,17,0).toISOString(),endDate:new Date(2025,0,31,18,0).toISOString(),category:'deadline',priority:'high',propertyId:'all',propertyName:'All Properties',attendees:[],location:'',createdBy:userId,isAllDay:false,reminderSent:false}];setEvents(mockEvents)}catch(error){console.error('Error loading events:',error)}finally{setLoading(false)}};const createEvent =()=>{setEventData({title:'',description:'',startDate:selectedDate.toISOString().split('T')[0],endDate:selectedDate.toISOString().split('T')[0],startTime:'09:00',endTime:'10:00',category:'general',priority:'normal',attendees:[],propertyId:userProperties[0]?.id || '',reminderMinutes:15,isRecurring:false,recurringPattern:'weekly',location:'',isAllDay:false});setSelectedEvent(null);setShowEventModal(true)};const editEvent =(event)=>{setEventData({title:event.title,description:event.description,startDate:new Date(event.startDate).toISOString().split('T')[0],endDate:new Date(event.endDate).toISOString().split('T')[0],startTime:new Date(event.startDate).toTimeString().slice(0,5),endTime:new Date(event.endDate).toTimeString().slice(0,5),category:event.category,priority:event.priority,attendees:event.attendees || [],propertyId:event.propertyId,reminderMinutes:15,isRecurring:false,recurringPattern:'weekly',location:event.location || '',isAllDay:event.isAllDay || false});setSelectedEvent(event);setShowEventModal(true)};const saveEvent = async()=>{try{const startDateTime = new Date(`${eventData.startDate}T${eventData.startTime}`);const endDateTime = new Date(`${eventData.endDate}T${eventData.endTime}`);const newEvent ={id:selectedEvent?.id || Date.now().toString(),title:eventData.title,description:eventData.description,startDate:startDateTime.toISOString(),endDate:endDateTime.toISOString(),category:eventData.category,priority:eventData.priority,propertyId:eventData.propertyId,propertyName:userProperties.find(p => p.id === eventData.propertyId)?.name || 'All Properties',attendees:eventData.attendees,location:eventData.location,createdBy:userId,isAllDay:eventData.isAllDay,reminderSent:false};if(selectedEvent){setEvents(prev => prev.map(event => event.id === selectedEvent.id ? newEvent:event))}else{setEvents(prev => [...prev,newEvent])}window.ConversationLogService?.logConversation({type:'calendar',participantId:'system',participantName:'Calendar System',participantType:'system',propertyId:eventData.propertyId,propertyName:userProperties.find(p => p.id === eventData.propertyId)?.name,content:`${selectedEvent ? 'Updated':'Created'}calendar event:${eventData.title}`,channel:'calendar_system',metadata:{eventCategory:eventData.category,eventPriority:eventData.priority,hasAttendees:eventData.attendees.length > 0,isRecurring:eventData.isRecurring}});setShowEventModal(false);window.showNotification?.('success',`Event ${selectedEvent ? 'updated':'created'}successfully`)}catch(error){console.error('Error saving event:',error);window.showNotification?.('error','Failed to save event')}};const deleteEvent =(eventId)=>{setEvents(prev => prev.filter(event => event.id !== eventId));setShowEventModal(false);window.showNotification?.('success','Event deleted successfully')};const getAISchedulingSuggestions = async(context)=>{await new Promise(resolve => setTimeout(resolve,1000));const suggestions = [];const conflictingEvents = events.filter(event =>{const eventStart = new Date(event.startDate);const eventEnd = new Date(event.endDate);const proposedStart = new Date(`${context.date}T${context.time}`);const proposedEnd = new Date(proposedStart.getTime()+(context.duration || 60)* 60000);return(proposedStart >= eventStart && proposedStart < eventEnd)||(proposedEnd > eventStart && proposedEnd <= eventEnd)});if(conflictingEvents.length > 0){suggestions.push({type:'conflict',message:`Time conflict detected with "${conflictingEvents[0].title}". Consider scheduling at a different time.`,alternatives:[{time:'09:00',reason:'Morning slot available'},{time:'14:00',reason:'Afternoon slot available'},{time:'16:00',reason:'Late afternoon available'}]})}if(context.category === 'inspection'){suggestions.push({type:'optimization',message:'Property inspections are typically more effective in the morning when lighting is optimal.',recommendation:'Schedule between 9:00 AM - 11:00 AM for best results'})}if(context.category === 'meeting'){suggestions.push({type:'optimization',message:'Tenant meetings have higher attendance rates on weekdays.',recommendation:'Consider Tuesday-Thursday,2:00 PM - 4:00 PM for optimal scheduling'})}const sameDayEvents = events.filter(event =>{const eventDate = new Date(event.startDate).toDateString();return eventDate === new Date(`${context.date}T${context.time}`).toDateString()});if(sameDayEvents.length > 0){suggestions.push({type:'efficiency',message:'You have other events scheduled today. Consider grouping similar activities to minimize travel time.',relatedEvents:sameDayEvents.map(e => e.title)})}return suggestions};const smartSchedule = async(prompt)=>{const lowerPrompt = prompt.toLowerCase();let category = 'general';let title = prompt;let duration = 60;let priority = 'normal';if(lowerPrompt.includes('inspection')|| lowerPrompt.includes('inspect')){category = 'inspection';title = title.includes('inspection')? title:`Property Inspection - ${title}`;duration = 120}else if(lowerPrompt.includes('meeting')|| lowerPrompt.includes('meet')){category = 'meeting';duration = 60}else if(lowerPrompt.includes('vendor')|| lowerPrompt.includes('contractor')){category = 'vendor';duration = 90}else if(lowerPrompt.includes('deadline')|| lowerPrompt.includes('due')){category = 'deadline';priority = 'high';duration = 30}let suggestedTime = '09:00';if(lowerPrompt.includes('morning'))suggestedTime = '09:00';else if(lowerPrompt.includes('afternoon'))suggestedTime = '14:00';else if(lowerPrompt.includes('evening'))suggestedTime = '17:00';setEventData(prev =>({...prev,title,category,priority,startTime:suggestedTime,endTime:new Date(new Date(`1970-01-01T${suggestedTime}`).getTime()+ duration * 60000).toTimeString().slice(0,5)}));const suggestions = await getAISchedulingSuggestions({date:eventData.startDate,time:suggestedTime,duration,category,title});setAiSuggestions(suggestions);setShowEventModal(true)};const getDaysInMonth =(date)=>{const year = date.getFullYear();const month = date.getMonth();const firstDay = new Date(year,month,1);const lastDay = new Date(year,month + 1,0);const daysInMonth = lastDay.getDate();const startingDayOfWeek = firstDay.getDay();const days = [];for(let i = 0;i < startingDayOfWeek;i++){days.push(null)}for(let day = 1;day <= daysInMonth;day++){days.push(new Date(year,month,day))}return days};const getEventsForDate =(date)=>{if(!date)return [];return events.filter(event =>{const eventDate = new Date(event.startDate);return eventDate.toDateString()=== date.toDateString()})};const getCategoryColor =(category)=>{const colors ={inspection:'#3b82f6',meeting:'#10b981',vendor:'#f59e0b',deadline:'#ef4444',maintenance:'#8b5cf6',general:'#6b7280'};return colors[category] || colors.general};const formatTime =(dateString)=>{return new Date(dateString).toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true})};const navigateMonth =(direction)=>{setCurrentDate(prev =>{const newDate = new Date(prev);newDate.setMonth(prev.getMonth()+ direction);return newDate})};const monthNames = [ 'January','February','March','April','May','June','July','August','September','October','November','December' ];const dayNames = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];return(<div className="ai-calendar-system">{}<div className="calendar-header"><div className="header-content"><h2><i className="fas fa-calendar-alt"></i> Smart Calendar </h2><p>AI-powered scheduling for{userName}</p></div><div className="header-actions"><button className="create-event-btn" onClick={createEvent}><i className="fas fa-plus"></i> New Event </button><button className="ai-scheduler-btn" onClick={()=> setShowAIScheduler(true)}><i className="fas fa-robot"></i> AI Schedule </button></div></div><div className="calendar-container">{}<div className="calendar-controls"><div className="month-navigation"><button className="nav-btn" onClick={()=> navigateMonth(-1)}><i className="fas fa-chevron-left"></i></button><h3>{monthNames[currentDate.getMonth()]}{currentDate.getFullYear()}</h3><button className="nav-btn" onClick={()=> navigateMonth(1)}><i className="fas fa-chevron-right"></i></button></div><div className="view-controls">{['month','week','day','agenda'].map(viewType =>(<button key={viewType}className={`view-btn ${view === viewType ? 'active':''}`}onClick={()=> setView(viewType)}>{viewType.charAt(0).toUpperCase()+ viewType.slice(1)}</button>))}</div></div>{}{view === 'month' &&(<div className="calendar-grid">{}<div className="calendar-header-row">{dayNames.map(day =>(<div key={day}className="day-header">{day}</div>))}</div>{}<div className="calendar-body">{getDaysInMonth(currentDate).map((date,index)=>(<CalendarDay key={index}date={date}events={date ? getEventsForDate(date):[]}isSelected={date && selectedDate.toDateString()=== date.toDateString()}isToday={date && date.toDateString()=== new Date().toDateString()}onClick={()=>{if(date){setSelectedDate(date)}}}onCreateEvent={()=>{if(date){setSelectedDate(date);createEvent()}}}onEditEvent={editEvent}getCategoryColor={getCategoryColor}formatTime={formatTime}/>))}</div></div>)}{}{view === 'agenda' &&(<AgendaView events={events}onEditEvent={editEvent}getCategoryColor={getCategoryColor}formatTime={formatTime}/>)}</div>{}{showEventModal &&(<EventModal eventData={eventData}setEventData={setEventData}selectedEvent={selectedEvent}onSave={saveEvent}onDelete={deleteEvent}onClose={()=> setShowEventModal(false)}userProperties={userProperties}aiSuggestions={aiSuggestions}/>)}{}{showAIScheduler &&(<AISchedulerModal onClose={()=> setShowAIScheduler(false)}onSmartSchedule={smartSchedule}/>)}</div>)};const CalendarDay =({date,events,isSelected,isToday,onClick,onCreateEvent,onEditEvent,getCategoryColor,formatTime})=>{if(!date){return <div className="calendar-day empty"></div>}return(<div className={`calendar-day ${isSelected ? 'selected':''}${isToday ? 'today':''}`}onClick={onClick}><div className="day-number">{date.getDate()}<button className="add-event-btn" onClick={(e)=>{e.stopPropagation();onCreateEvent()}}><i className="fas fa-plus"></i></button></div><div className="day-events">{events.slice(0,3).map(event =>(<div key={event.id}className="event-pill" style={{backgroundColor:getCategoryColor(event.category)}}onClick={(e)=>{e.stopPropagation();onEditEvent(event)}}><span className="event-time">{formatTime(event.startDate)}</span><span className="event-title">{event.title}</span></div>))}{events.length > 3 &&(<div className="more-events"> +{events.length - 3}more </div>)}</div></div>)};const AgendaView =({events,onEditEvent,getCategoryColor,formatTime})=>{const sortedEvents = events.sort((a,b)=> new Date(a.startDate)- new Date(b.startDate));const groupedEvents = sortedEvents.reduce((groups,event)=>{const date = new Date(event.startDate).toDateString();if(!groups[date]){groups[date] = []}groups[date].push(event);return groups},{});return(<div className="agenda-view">{Object.entries(groupedEvents).map(([dateString,dayEvents])=>(<div key={dateString}className="agenda-day"><div className="agenda-date"><h3>{new Date(dateString).toLocaleDateString('en-US',{weekday:'long',year:'numeric',month:'long',day:'numeric'})}</h3></div><div className="agenda-events">{dayEvents.map(event =>(<div key={event.id}className="agenda-event" onClick={()=> onEditEvent(event)}><div className="event-indicator" style={{backgroundColor:getCategoryColor(event.category)}}></div><div className="event-time">{formatTime(event.startDate)}-{formatTime(event.endDate)}</div><div className="event-details"><h4>{event.title}</h4><p>{event.description}</p>{event.location &&(<p className="event-location"><i className="fas fa-map-marker-alt"></i>{event.location}</p>)}</div><div className="event-meta"><span className={`priority-badge ${event.priority}`}>{event.priority}</span><span className="category-badge">{event.category}</span></div></div>))}</div></div>))}</div>)};const EventModal =({eventData,setEventData,selectedEvent,onSave,onDelete,onClose,userProperties,aiSuggestions})=>{return(<div className="modal-overlay" onClick={onClose}><div className="event-modal" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h3>{selectedEvent ? 'Edit Event':'Create Event'}</h3><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-content">{aiSuggestions.length > 0 &&(<div className="ai-suggestions-section"><h4>AI Suggestions</h4>{aiSuggestions.map((suggestion,index)=>(<div key={index}className={`ai-suggestion ${suggestion.type}`}><div className="suggestion-content"><i className={`fas ${suggestion.type === 'conflict' ? 'fa-exclamation-triangle':suggestion.type === 'optimization' ? 'fa-lightbulb':'fa-info-circle'}`}></i><span>{suggestion.message}</span></div>{suggestion.recommendation &&(<div className="suggestion-recommendation">{suggestion.recommendation}</div>)}</div>))}</div>)}<div className="form-grid"><div className="form-group"><label>Event Title</label><input type="text" value={eventData.title}onChange={(e)=> setEventData(prev =>({...prev,title:e.target.value}))}placeholder="Enter event title" className="form-input" /></div><div className="form-group"><label>Category</label><select value={eventData.category}onChange={(e)=> setEventData(prev =>({...prev,category:e.target.value}))}className="form-select" ><option value="general">General</option><option value="inspection">Property Inspection</option><option value="meeting">Meeting</option><option value="vendor">Vendor Appointment</option><option value="deadline">Deadline</option><option value="maintenance">Maintenance</option></select></div><div className="form-group"><label>Start Date</label><input type="date" value={eventData.startDate}onChange={(e)=> setEventData(prev =>({...prev,startDate:e.target.value}))}className="form-input" /></div><div className="form-group"><label>Start Time</label><input type="time" value={eventData.startTime}onChange={(e)=> setEventData(prev =>({...prev,startTime:e.target.value}))}className="form-input" disabled={eventData.isAllDay}/></div><div className="form-group"><label>End Date</label><input type="date" value={eventData.endDate}onChange={(e)=> setEventData(prev =>({...prev,endDate:e.target.value}))}className="form-input" /></div><div className="form-group"><label>End Time</label><input type="time" value={eventData.endTime}onChange={(e)=> setEventData(prev =>({...prev,endTime:e.target.value}))}className="form-input" disabled={eventData.isAllDay}/></div><div className="form-group full-width"><label>Description</label><textarea value={eventData.description}onChange={(e)=> setEventData(prev =>({...prev,description:e.target.value}))}placeholder="Event description" rows="3" className="form-textarea" /></div><div className="form-group"><label>Property</label><select value={eventData.propertyId}onChange={(e)=> setEventData(prev =>({...prev,propertyId:e.target.value}))}className="form-select" ><option value="">Select property</option><option value="all">All Properties</option>{userProperties.map(property =>(<option key={property.id}value={property.id}>{property.name}</option>))}</select></div><div className="form-group"><label>Priority</label><select value={eventData.priority}onChange={(e)=> setEventData(prev =>({...prev,priority:e.target.value}))}className="form-select" ><option value="low">Low</option><option value="normal">Normal</option><option value="high">High</option></select></div><div className="form-group full-width"><label>Location</label><input type="text" value={eventData.location}onChange={(e)=> setEventData(prev =>({...prev,location:e.target.value}))}placeholder="Event location" className="form-input" /></div><div className="form-group checkbox-group"><label className="checkbox-label"><input type="checkbox" checked={eventData.isAllDay}onChange={(e)=> setEventData(prev =>({...prev,isAllDay:e.target.checked}))}/> All Day Event </label></div></div></div><div className="modal-footer"><div className="footer-left">{selectedEvent &&(<button className="btn-danger" onClick={()=> onDelete(selectedEvent.id)}><i className="fas fa-trash"></i> Delete </button>)}</div><div className="footer-right"><button className="btn-secondary" onClick={onClose}>Cancel</button><button className="btn-primary" onClick={onSave}disabled={!eventData.title}><i className="fas fa-save"></i>{selectedEvent ? 'Update':'Create'}Event </button></div></div></div></div>)};const AISchedulerModal =({onClose,onSmartSchedule})=>{const [prompt,setPrompt] = React.useState('');const quickPrompts = [ 'Schedule property inspection next Tuesday morning','Meeting with tenant about lease renewal','Vendor appointment for HVAC maintenance','Monthly report deadline reminder','Property showing for new prospect' ];return(<div className="modal-overlay" onClick={onClose}><div className="ai-scheduler-modal" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h3><i className="fas fa-robot"></i> AI Smart Scheduler </h3><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-content"><div className="ai-prompt-section"><label>Describe what you want to schedule:</label><textarea value={prompt}onChange={(e)=> setPrompt(e.target.value)}placeholder="E.g.,'Schedule a property inspection for Sunset Apartments next Tuesday morning'" rows="3" className="form-textarea" /><button className="ai-create-btn" onClick={()=> onSmartSchedule(prompt)}disabled={!prompt.trim()}><i className="fas fa-magic"></i> Create Event with AI </button></div><div className="quick-prompts"><h4>Quick Examples:</h4><div className="prompt-buttons">{quickPrompts.map((quickPrompt,index)=>(<button key={index}className="prompt-btn" onClick={()=> setPrompt(quickPrompt)}>{quickPrompt}</button>))}</div></div><div className="ai-features"><h4>AI Features:</h4><ul><li>Conflict detection and resolution</li><li>Optimal time suggestions</li><li>Travel time optimization</li><li>Automatic categorization</li><li>Smart attendee suggestions</li></ul></div></div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.AICalendarSystem = AICalendarSystem;

// DashboardWidget.jsx
const DashboardWidget =({widget,onUpdate})=>{const [data,setData] = React.useState(null);const [loading,setLoading] = React.useState(true);const [error,setError] = React.useState(null);React.useEffect(()=>{loadWidgetData();if(widget.refresh_interval && widget.refresh_interval > 0){const interval = setInterval(loadWidgetData,widget.refresh_interval * 1000);return()=> clearInterval(interval)}},[widget.id]);const loadWidgetData = async()=>{try{setLoading(true);const response = await window.apiClient.request(`/dashboard/widgets/${widget.id}/data`);setData(response);setError(null)}catch(err){console.error('Failed to load widget data,using mock:',err);setData(getMockWidgetData(widget.widget_type));setError(null)}finally{setLoading(false)}};const getMockWidgetData =(widgetType)=>{switch(widgetType){case 'occupancy':return{rate:89.5,occupied:139,total:156,change:2.3,trend:[87,88,87.5,88.2,89,89.3,89.5],properties:[{name:'Sunset Apartments',rate:92.5},{name:'Oak Grove',rate:88.0},{name:'Riverside Plaza',rate:87.2}],history:Array.from({length:30},(_,i)=>({date:new Date(Date.now()- i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],occupancy:85 + Math.random()* 10}))};case 'revenue':return{current:2400000,target:2500000,progress:96,ytd:18500000,change:8.1,daily:[1.2,1.5,1.8,2.1,1.9,2.3,2.5],today:85000,week:580000,breakdown:{rent:2100000,fees:180000,other:120000}};case 'maintenance':return{open:18,urgent:3,today:5,overdue:2,completed:45,inProgress:7,trend:[12,15,13,18,16,14,13],byPriority:{urgent:3,high:5,medium:8,low:2},byCategory:{plumbing:5,electric:3,hvac:4,other:6},recent:[{id:'1',title:'HVAC Repair - Unit 4B',priority:'high',status:'in_progress'},{id:'2',title:'Plumbing Issue - Building C',priority:'medium',status:'pending'},{id:'3',title:'Light Fixture - Common Area',priority:'low',status:'pending'}]};case 'calendar':return{today:3,nextEvent:{time:'2:00 PM',title:'Vendor Meeting'},events:[{time:'09:00 AM',title:'Property Inspection - Oak Grove',type:'inspection'},{time:'02:00 PM',title:'Vendor Meeting',type:'meeting'},{time:'04:30 PM',title:'Lease Signing - Unit 12A',type:'lease'}]};case 'follow_ups':return{total:12,overdue:3,tasks:[{id:'1',title:'Review lease renewal - Tenant #45',due:'Today',completed:false},{id:'2',title:'Follow up on maintenance request',due:'Tomorrow',completed:false},{id:'3',title:'Schedule property walkthrough',due:'Next Week',completed:false}]};case 'leases':return{expiring:8,expiring_30d:3,expiring_60d:3,expiring_90d:2,upcoming:[{tenant:'John Smith',unit:'4B',property:'Sunset Apts',days_until:15,end_date:'2024-01-27'},{tenant:'Jane Doe',unit:'12A',property:'Oak Grove',days_until:28,end_date:'2024-02-09'},{tenant:'Bob Johnson',unit:'7C',property:'Riverside',days_until:45,end_date:'2024-02-26'}]};default:return{}}};const getWidgetComponent =()=>{switch(widget.widget_type){case 'occupancy':return <OccupancyWidget data={data}size={widget.position}config={widget.config}/>;case 'revenue':return <RevenueWidget data={data}size={widget.position}config={widget.config}/>;case 'maintenance':return <MaintenanceWidget data={data}size={widget.position}config={widget.config}/>;case 'leases':return <LeasesWidget data={data}size={widget.position}config={widget.config}/>;case 'calendar':return <CalendarWidget data={data}size={widget.position}config={widget.config}/>;case 'follow_ups':return <FollowUpsWidget data={data}size={widget.position}config={widget.config}/>;case 'quick_notes':return <QuickNotesWidget config={widget.config}size={widget.position}onUpdate={(newConfig)=> onUpdate({config:newConfig})}/>;default:return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">{widget.widget_type}</h3></div><div style={{opacity:0.6,fontSize:'13px'}}> Widget coming soon </div></div>)}};if(loading && !data){return(<div className="widget-loading"><div className="widget-loading-spinner"></div></div>)}if(error){return(<div className="widget-error"><div className="widget-error-icon">!</div><div className="widget-error-message">Failed to load data</div><div className="widget-error-retry" onClick={loadWidgetData}> Retry </div></div>)}return getWidgetComponent()};

// LeaseDocument.jsx
const LeaseDocument =({lease,unit,tenant,property})=>{const [signature,setSignature] = React.useState('');const [signed,setSigned] = React.useState(false);const [showDocument,setShowDocument] = React.useState(false);const generateLeaseDocument =()=>{const today = new Date().toLocaleDateString();const monthlyRentWords = numberToWords(lease.monthly_rent);const depositWords = numberToWords(lease.deposit_amount);return ` <div class="lease-document"><div class="lease-header"><h1>RESIDENTIAL LEASE AGREEMENT</h1><p>This agreement is entered into on ${today}</p></div><div class="lease-parties"><h2>PARTIES</h2><p><strong>LANDLORD:</strong> ${property.company_name || 'Property Management Company'}</p><p><strong>TENANT(S):</strong> ${tenant.first_name}${tenant.last_name}</p></div><div class="lease-property"><h2>PROPERTY</h2><p>The Landlord agrees to rent to the Tenant the property located at:</p><p class="property-address"><strong>Unit ${unit.unit_number}</strong><br/> ${property.address.street}<br/> ${property.address.city},${property.address.state}${property.address.zip}</p></div><div class="lease-terms"><h2>TERMS</h2><p><strong>1. TERM:</strong> This lease shall commence on <strong>${new Date(lease.start_date).toLocaleDateString()}</strong> and shall terminate on <strong>${new Date(lease.end_date).toLocaleDateString()}</strong>.</p><p><strong>2. RENT:</strong> Tenant agrees to pay $<strong>${lease.monthly_rent}</strong>(${monthlyRentWords}dollars)per month,due on the 1st day of each month.</p><p><strong>3. SECURITY DEPOSIT:</strong> Tenant shall pay a security deposit of $<strong>${lease.deposit_amount}</strong>(${depositWords}dollars)upon signing this lease.</p><p><strong>4. UTILITIES:</strong> Tenant is responsible for the following utilities:Electricity,Gas,Internet,Cable. Landlord provides:Water,Sewer,Trash.</p><p><strong>5. OCCUPANCY:</strong> The premises shall be occupied by no more than ${unit.bedrooms * 2}persons.</p><p><strong>6. PETS:</strong> No pets allowed without written permission from Landlord.</p><p><strong>7. MAINTENANCE:</strong> Tenant shall maintain the premises in good condition and promptly report any needed repairs to Landlord.</p><p><strong>8. LATE FEES:</strong> Rent received after the 5th of the month will incur a late fee of $50.</p><p><strong>9. RENEWAL:</strong> ${lease.auto_renew ? 'This lease will automatically renew on a month-to-month basis unless either party gives 30 days notice.':'This lease will terminate on the end date unless renewed by mutual agreement.'}</p></div><div class="lease-rules"><h2>RULES AND REGULATIONS</h2><ol><li>No loud music or noise after 10 PM</li><li>No smoking inside the unit</li><li>No alterations to the property without written permission</li><li>Tenant must obtain renter's insurance</li><li>No subletting without written permission</li><li>Parking in designated areas only</li></ol></div><div class="lease-signatures"><h2>SIGNATURES</h2><div class="signature-block"><div class="signature-line"><p>_________________________________</p><p>Landlord/Agent</p><p>Date:${today}</p></div><div class="signature-line"><p>_________________________________</p><p>Tenant:${tenant.first_name}${tenant.last_name}</p><p>Date:${today}</p></div></div></div><div class="lease-footer"><p>This lease agreement constitutes the entire agreement between the parties and supersedes all prior agreements.</p></div></div> `};const handlePrint =()=>{const printWindow = window.open('','_blank');printWindow.document.write(` <html><head><title>Lease Agreement - ${tenant.first_name}${tenant.last_name}</title><style> body{font-family:Arial,sans-serif;max-width:800px;margin:0 auto;padding:20px}h1{text-align:center}h2{margin-top:30px;border-bottom:2px solid #333;padding-bottom:5px}.property-address{background:#f5f5f5;padding:15px;margin:15px 0}.signature-block{display:flex;justify-content:space-between;margin-top:50px}.signature-line{width:45%;text-align:center}@media print{body{margin:0}.no-print{display:none}}</style></head><body> ${generateLeaseDocument()}<script>window.print();</script></body></html> `)};const handleEmailLease = async()=>{try{await window.ApiService.post('/api/leases/send-email',{lease_id:lease.id,recipient:tenant.email,document_html:generateLeaseDocument()});window.Toast.success('Lease sent to tenant!')}catch(error){window.Toast.error('Failed to send lease')}};const handleESign = async()=>{if(!signature.trim()){window.Toast.error('Please type your name to sign');return}try{await window.ApiService.post(`/api/leases/${lease.id}/sign`,{signature:signature,signed_by:'tenant',signed_at:new Date().toISOString()});setSigned(true);window.Toast.success('Lease signed successfully!');if(tenant.phone){await window.ApiService.post('/api/ai/smart-sms',{phone:tenant.phone,message:`Your lease has been signed! Move-in date:${new Date(lease.start_date).toLocaleDateString()}`})}}catch(error){window.Toast.error('Failed to sign lease')}};return(<div className="lease-document-container"><div className="lease-actions-bar"><button className="btn-primary" onClick={()=> setShowDocument(!showDocument)}><i className="fas fa-file-contract"></i>{showDocument ? 'Hide':'View'}Lease Document </button><button className="btn-secondary" onClick={handlePrint}><i className="fas fa-print"></i> Print </button><button className="btn-secondary" onClick={handleEmailLease}><i className="fas fa-envelope"></i> Email to Tenant </button><button className="btn-secondary" onClick={()=>{const doc = generateLeaseDocument();const blob = new Blob([doc],{type:'text/html'});const url = URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `lease-${tenant.last_name}-${unit.unit_number}.html`;a.click()}}><i className="fas fa-download"></i> Download </button></div>{showDocument &&(<div className="lease-preview"><div dangerouslySetInnerHTML={{__html:generateLeaseDocument()}}/>{!signed &&(<div className="e-signature-section"><h3>Electronic Signature</h3><p>Type your full legal name to sign this lease agreement:</p><input type="text" placeholder={`${tenant.first_name}${tenant.last_name}`}value={signature}onChange={(e)=> setSignature(e.target.value)}className="signature-input" /><button className="btn-primary" onClick={handleESign}disabled={!signature.trim()}><i className="fas fa-signature"></i> Sign Lease </button></div>)}{signed &&(<div className="signature-confirmation"><i className="fas fa-check-circle"></i><p>Lease signed electronically on{new Date().toLocaleDateString()}</p></div>)}</div>)}</div>)};function numberToWords(num){const ones = ['','one','two','three','four','five','six','seven','eight','nine'];const tens = ['','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety'];const teens = ['ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen'];if(num === 0)return 'zero';if(num < 10)return ones[num];if(num < 20)return teens[num - 10];if(num < 100)return tens[Math.floor(num / 10)] +(num % 10 ? '-' + ones[num % 10]:'');if(num < 1000)return ones[Math.floor(num / 100)] + ' hundred' +(num % 100 ? ' ' + numberToWords(num % 100):'');if(num < 1000000)return numberToWords(Math.floor(num / 1000))+ ' thousand' +(num % 1000 ? ' ' + numberToWords(num % 1000):'');return num.toString()}window.AppModules = window.AppModules ||{};window.AppModules.LeaseDocument = LeaseDocument;

// Input.jsx
const Input =({label,type = 'text',name,value,onChange,placeholder,error,helper,required = false,disabled = false,autoComplete,className = ''})=>{return(<div className="input-group">{label &&(<label htmlFor={name}className="input-label">{label}{required && <span style={{color:'var(--color-error)'}}> *</span>}</label>)}<input id={name}name={name}type={type}value={value}onChange={onChange}placeholder={placeholder}required={required}disabled={disabled}autoComplete={autoComplete}className={`input-field ${error ? 'input-error':''}${className}`}/>{error && <div className="input-error-message">{error}</div>}{helper && !error && <div className="input-helper">{helper}</div>}</div>)};

// ValorPaymentModal.jsx
const ValorPaymentModal =({tenant,lease,onClose,onSuccess})=>{const [paymentAmount,setPaymentAmount] = React.useState(lease?.rentAmount || 0);const [includeLate,setIncludeLate] = React.useState(true);const [paymentMethod,setPaymentMethod] = React.useState(null);const [savedMethods,setSavedMethods] = React.useState([]);const [loading,setLoading] = React.useState(false);const [step,setStep] = React.useState('amount');const [error,setError] = React.useState(null);const [paymentIntent,setPaymentIntent] = React.useState(null);const valorService = window.ValorPayTechService;React.useEffect(()=>{loadPaymentMethods()},[]);const loadPaymentMethods = async()=>{try{const methods = await valorService.getPaymentMethods(tenant.id);setSavedMethods(methods.payment_methods || []);if(methods.payment_methods.length > 0){setPaymentMethod(methods.payment_methods[0])}}catch(error){console.error('Error loading payment methods:',error)}};const calculateTotal =()=>{let total = paymentAmount;if(includeLate && lease?.lateFee){total += lease.lateFee}return total};const handlePaymentMethodChange =(method)=>{setPaymentMethod(method);setError(null)};const createPaymentIntent = async()=>{setLoading(true);setError(null);try{const intent = await valorService.createPaymentIntent({tenantId:tenant.id,propertyId:lease.propertyId,unitId:lease.unitId,leaseId:lease.id,amount:calculateTotal(),type:'rent',dueDate:lease.dueDate,unitNumber:lease.unitNumber,description:`Rent payment for ${lease.unitNumber}- ${new Date().toLocaleDateString()}`,savePaymentMethod:paymentMethod?.id === 'new',customerId:tenant.valorCustomerId});setPaymentIntent(intent);setStep('processing');if(paymentMethod?.id && paymentMethod.id !== 'new'){await processPayment(intent)}}catch(error){console.error('Error creating payment intent:',error);setError('Failed to initialize payment. Please try again.')}finally{setLoading(false)}};const processPayment = async(intent)=>{setLoading(true);try{if(paymentMethod?.id && paymentMethod.id !== 'new'){const result = await valorService.processAutomatedPayment(tenant.id,paymentMethod.id,calculateTotal(),{payment_intent_id:intent.id,lease_id:lease.id,unit_id:lease.unitId,property_id:lease.propertyId});if(result.status === 'completed'){handlePaymentSuccess(result)}else if(result.status === 'requires_action'){setError('Additional authentication required. Please check your banking app.')}else{setError('Payment failed. Please try another payment method.')}}else{setError('New payment method setup coming soon. Please use a saved method.')}}catch(error){console.error('Payment processing error:',error);setError('Payment processing failed. Please try again.')}finally{setLoading(false)}};const handlePaymentSuccess =(result)=>{setStep('complete');window.showNotification?.('success','Payment processed successfully!');if(onSuccess){onSuccess({paymentId:result.id,amount:calculateTotal(),paymentDate:new Date().toISOString(),paymentMethod:paymentMethod.type})}setTimeout(()=>{onClose()},3000)};const renderAmountStep =()=>(<div className="payment-step amount-step"><h3>Payment Amount</h3><div className="amount-details"><div className="amount-row"><span>Monthly Rent:</span><span>${lease?.rentAmount?.toFixed(2)|| '0.00'}</span></div>{lease?.lateFee > 0 &&(<div className="amount-row late-fee"><label><input type="checkbox" checked={includeLate}onChange={(e)=> setIncludeLate(e.target.checked)}/><span>Late Fee:</span></label><span>${lease.lateFee.toFixed(2)}</span></div>)}<div className="amount-row total"><span>Total Due:</span><span>${calculateTotal().toFixed(2)}</span></div></div><div className="custom-amount"><label>Or enter custom amount:</label><input type="number" value={paymentAmount}onChange={(e)=> setPaymentAmount(parseFloat(e.target.value)|| 0)}min="0" step="0.01" className="amount-input" /></div><div className="step-actions"><button className="btn btn-secondary" onClick={onClose}> Cancel </button><button className="btn btn-primary" onClick={()=> setStep('method')}disabled={calculateTotal()<= 0}> Continue </button></div></div>);const renderMethodStep =()=>(<div className="payment-step method-step"><h3>Payment Method</h3><div className="payment-methods">{savedMethods.map(method =>(<div key={method.id}className={`payment-method-card ${paymentMethod?.id === method.id ? 'selected':''}`}onClick={()=> handlePaymentMethodChange(method)}><div className="method-icon">{method.type === 'card' && <i className="fas fa-credit-card"></i>}{method.type === 'ach_debit' && <i className="fas fa-university"></i>}</div><div className="method-details"><div className="method-type">{method.brand || method.bank_name}</div><div className="method-last4">****{method.last4}</div></div>{method.is_default && <span className="default-badge">Default</span>}</div>))}<div className={`payment-method-card add-new ${paymentMethod?.id === 'new' ? 'selected':''}`}onClick={()=> handlePaymentMethodChange({id:'new'})}><div className="method-icon"><i className="fas fa-plus"></i></div><div className="method-details"><div className="method-type">Add New Payment Method</div><div className="method-last4">Credit Card or Bank Account</div></div></div></div>{error &&(<div className="error-message"><i className="fas fa-exclamation-circle"></i>{error}</div>)}<div className="step-actions"><button className="btn btn-secondary" onClick={()=> setStep('amount')}> Back </button><button className="btn btn-primary" onClick={createPaymentIntent}disabled={!paymentMethod || loading}>{loading ?(<><i className="fas fa-spinner fa-spin"></i> Processing... </>):(`Pay $${calculateTotal().toFixed(2)}`)}</button></div></div>);const renderProcessingStep =()=>(<div className="payment-step processing-step"><div className="processing-animation"><i className="fas fa-spinner fa-spin"></i></div><h3>Processing Payment</h3><p>Please wait while we process your payment...</p><p className="processing-amount">${calculateTotal().toFixed(2)}</p></div>);const renderCompleteStep =()=>(<div className="payment-step complete-step"><div className="success-animation"><i className="fas fa-check-circle"></i></div><h3>Payment Successful!</h3><p>Your payment of ${calculateTotal().toFixed(2)}has been processed.</p><div className="receipt-details"><div className="receipt-row"><span>Confirmation #:</span><span>{paymentIntent?.id || 'PAY-' + Date.now()}</span></div><div className="receipt-row"><span>Date:</span><span>{new Date().toLocaleString()}</span></div></div><button className="btn btn-primary" onClick={onClose}> Done </button></div>);return(<div className="valor-payment-modal-overlay" onClick={onClose}><div className="valor-payment-modal" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>Make Payment</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-body">{step === 'amount' && renderAmountStep()}{step === 'method' && renderMethodStep()}{step === 'processing' && renderProcessingStep()}{step === 'complete' && renderCompleteStep()}</div><div className="modal-footer"><div className="security-note"><i className="fas fa-lock"></i><span>Secured by Valor PayTech</span></div></div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.ValorPaymentModal = ValorPaymentModal;

// UnitsWorking.jsx
const UnitsWorking =()=>{const [units,setUnits] = React.useState([]);const [properties,setProperties] = React.useState([]);const [selectedProperty,setSelectedProperty] = React.useState('all');const [statusFilter,setStatusFilter] = React.useState('all');const [viewMode,setViewMode] = React.useState('grid');const [showAddUnit,setShowAddUnit] = React.useState(false);const [loading,setLoading] = React.useState(true);const [error,setError] = React.useState(null);React.useEffect(()=>{loadData();const unsubProperties = window.AppState.subscribe('properties',(props)=>{setProperties(props)});const unsubUnits = window.AppState.subscribe('units',(units)=>{setUnits(units)});return()=>{unsubProperties();unsubUnits()}},[]);const loadData = async()=>{try{setLoading(true);setError(null);const [propsResponse,unitsResponse] = await Promise.all([ window.ApiService.get('/properties'),window.ApiService.get('/units')]);const propsData = propsResponse.results || [];const unitsData = unitsResponse.results || [];window.AppState.setState('properties',propsData);window.AppState.setState('units',unitsData);setProperties(propsData);setUnits(unitsData)}catch(err){console.error('Error loading data:',err);setError(err.message);if(window.showNotification){window.showNotification('error','Failed to load data:' + err.message)}}finally{setLoading(false)}};const filteredUnits = React.useMemo(()=>{let filtered = [...units];if(selectedProperty !== 'all'){filtered = filtered.filter(unit => unit.property_id === selectedProperty)}if(statusFilter !== 'all'){const statusMap ={'vacant':'available','occupied':'occupied','maintenance':'maintenance'};const mappedStatus = statusMap[statusFilter] || statusFilter;filtered = filtered.filter(unit => unit.status === mappedStatus)}return filtered},[units,selectedProperty,statusFilter]);const stats = React.useMemo(()=>{const total = units.length;const occupied = units.filter(u => u.status === 'occupied').length;const vacant = units.filter(u => u.status === 'available').length;const maintenance = units.filter(u => u.status === 'maintenance').length;const occupancyRate = total > 0 ? Math.round((occupied / total)* 100):0;const potentialRevenue = units.reduce((sum,u)=> sum +(u.market_rent || u.rent_amount || 0),0);const actualRevenue = units.filter(u => u.status === 'occupied').reduce((sum,u)=> sum +(u.rent_amount || 0),0);const revenueLoss = potentialRevenue - actualRevenue;return{total,occupied,vacant,maintenance,occupancyRate,potentialRevenue,actualRevenue,revenueLoss}},[units]);if(loading && units.length === 0){return(<div className="units-loading"><div className="loading-spinner"></div><p>Loading units...</p></div>)}return(<div className="units-page-beautiful">{}<div className="insights-bar-gradient"><div className="insight-card glass urgent"><div className="insight-icon-wrapper"><i className="fas fa-exclamation-circle"></i></div><div className="insight-content"><h4>{stats.vacant}Units Available</h4><p>Potential revenue:${stats.revenueLoss.toLocaleString()}/mo</p></div><button className="insight-action"> List Units <i className="fas fa-arrow-right"></i></button></div><div className="insight-card glass warning"><div className="insight-icon-wrapper"><i className="fas fa-tools"></i></div><div className="insight-content"><h4>{stats.maintenance}Under Maintenance</h4><p>Complete repairs to list</p></div><button className="insight-action"> View Status <i className="fas fa-arrow-right"></i></button></div><div className="insight-card glass success"><div className="insight-icon-wrapper"><i className="fas fa-chart-line"></i></div><div className="insight-content"><h4>{stats.occupancyRate}% Occupancy</h4><p>Revenue:${stats.actualRevenue.toLocaleString()}/mo</p></div><button className="insight-action"> View Trends <i className="fas fa-arrow-right"></i></button></div></div>{}<div className="page-header-beautiful"><div className="header-content-wrapper"><div className="header-titles"><h1 className="page-title-large">Units</h1><p className="page-subtitle-muted"> Manage{stats.total}units across your properties </p></div><div className="header-stats-row"><div className="mini-stat"><span className="mini-stat-value">{stats.occupied}</span><span className="mini-stat-label">Occupied</span></div><div className="mini-stat"><span className="mini-stat-value">{stats.vacant}</span><span className="mini-stat-label">Vacant</span></div><div className="mini-stat"><span className="mini-stat-value">${(stats.actualRevenue / 1000).toFixed(1)}k</span><span className="mini-stat-label">Monthly Revenue</span></div></div></div><div className="header-actions-group"><button className="btn-beautiful secondary" onClick={loadData}disabled={loading}><i className={`fas fa-sync ${loading ? 'fa-spin':''}`}></i>{loading ? 'Loading...':'Refresh'}</button><button className="btn-beautiful primary" onClick={()=> setShowAddUnit(true)}><i className="fas fa-plus"></i> Add Unit </button></div></div>{}{error &&(<div className="error-banner"><i className="fas fa-exclamation-triangle"></i><span>{error}</span><button onClick={loadData}>Retry</button></div>)}{}<div className="filters-bar-modern"><div className="filter-group"><select className="filter-select-modern" value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}><option value="all">All Properties</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}</option>))}</select></div><div className="filter-pills-group"><button className={`filter-pill ${statusFilter === 'all' ? 'active':''}`}onClick={()=> setStatusFilter('all')}> All Units <span className="pill-count">{stats.total}</span></button><button className={`filter-pill ${statusFilter === 'vacant' ? 'active':''}`}onClick={()=> setStatusFilter('vacant')}><span className="pill-dot vacant"></span> Vacant <span className="pill-count">{stats.vacant}</span></button><button className={`filter-pill ${statusFilter === 'occupied' ? 'active':''}`}onClick={()=> setStatusFilter('occupied')}><span className="pill-dot occupied"></span> Occupied <span className="pill-count">{stats.occupied}</span></button><button className={`filter-pill ${statusFilter === 'maintenance' ? 'active':''}`}onClick={()=> setStatusFilter('maintenance')}><span className="pill-dot maintenance"></span> Maintenance <span className="pill-count">{stats.maintenance}</span></button></div><div className="view-mode-toggle"><button className={`view-mode-btn ${viewMode === 'grid' ? 'active':''}`}onClick={()=> setViewMode('grid')}><i className="fas fa-th-large"></i></button><button className={`view-mode-btn ${viewMode === 'list' ? 'active':''}`}onClick={()=> setViewMode('list')}><i className="fas fa-list"></i></button><button className={`view-mode-btn ${viewMode === 'floor' ? 'active':''}`}onClick={()=> setViewMode('floor')}><i className="fas fa-building"></i></button></div></div>{}<div className="units-container">{filteredUnits.length === 0 ?(<div className="empty-state"><i className="fas fa-building"></i><h3>No units found</h3><p>{units.length === 0 ? "Add your first unit to get started":"Try adjusting your filters"}</p>{units.length === 0 &&(<button className="btn-beautiful primary" onClick={()=> setShowAddUnit(true)}><i className="fas fa-plus"></i> Add First Unit </button>)}</div>):(<div className="units-grid-beautiful">{filteredUnits.map(unit =>(<UnitCardWorking key={unit.id}unit={unit}onUpdate={loadData}/>))}</div>)}</div>{}{showAddUnit &&(<AddUnitModal properties={properties}onClose={()=> setShowAddUnit(false)}onSave={()=>{setShowAddUnit(false);loadData()}}/>)}</div>)};const UnitCardWorking =({unit,onUpdate})=>{const getStatusColor =(status)=>{switch(status){case 'available':return '#10b981';case 'occupied':return '#3b82f6';case 'maintenance':return '#f59e0b';default:return '#6b7280'}};const getStatusDisplay =(status)=>{switch(status){case 'available':return 'VACANT';case 'occupied':return 'OCCUPIED';case 'maintenance':return 'MAINTENANCE';default:return status.toUpperCase()}};const isExpiringSoon = unit.lease_end && new Date(unit.lease_end)- new Date()< 60 * 24 * 60 * 60 * 1000;return(<div className={`unit-card-beautiful ${unit.status}`}>{}<div className="status-ribbon" style={{backgroundColor:getStatusColor(unit.status)}}>{getStatusDisplay(unit.status)}</div>{}<div className="unit-card-header"><div className="unit-identity"><h3 className="unit-number">Unit{unit.unit_number}</h3><p className="property-name">{unit.property_name}</p></div><div className="unit-actions"><button className="action-btn-glass"><i className="fas fa-eye"></i></button><button className="action-btn-glass"><i className="fas fa-edit"></i></button></div></div>{}<div className="unit-specs"><div className="spec"><i className="fas fa-bed"></i><span>{unit.bedrooms}Bed</span></div><div className="spec"><i className="fas fa-bath"></i><span>{unit.bathrooms}Bath</span></div>{unit.square_feet &&(<div className="spec"><i className="fas fa-ruler-combined"></i><span>{unit.square_feet}sqft</span></div>)}</div>{}{unit.amenities && unit.amenities.length > 0 &&(<div className="amenities-row">{unit.amenities.slice(0,2).map((amenity,idx)=>(<span key={idx}className="amenity-tag">{amenity}</span>))}{unit.amenities.length > 2 &&(<span className="amenity-tag more">+{unit.amenities.length - 2}</span>)}</div>)}{}{unit.status === 'occupied' && unit.tenant_name &&(<div className="tenant-section"><div className="tenant-info"><div className="tenant-avatar">{unit.tenant_name.split(' ').map(n => n[0]).join('')}</div><div className="tenant-details"><p className="tenant-name">{unit.tenant_name}</p>{unit.lease_end &&(<p className="lease-end"> Lease ends{new Date(unit.lease_end).toLocaleDateString()}{isExpiringSoon && <span className="expiring-badge">Expiring Soon</span>}</p>)}</div></div></div>)}{unit.status === 'available' &&(<div className="vacancy-alert"><i className="fas fa-clock"></i><span>Vacant for{unit.days_on_market || 0}days</span></div>)}{unit.status === 'maintenance' &&(<div className="maintenance-alert"><i className="fas fa-tools"></i><span>Under maintenance</span></div>)}{}<div className="rent-section-beautiful"><div className="rent-display"><span className="rent-amount">${unit.rent_amount || unit.market_rent || 0}</span><span className="rent-period">/month</span></div>{unit.market_rent > unit.rent_amount &&(<div className="market-opportunity"><i className="fas fa-trending-up"></i> ${unit.market_rent - unit.rent_amount}below market </div>)}</div>{}<div className="unit-quick-actions">{unit.status === 'available' &&(<><button className="quick-action-btn primary"><i className="fas fa-bullhorn"></i> List Unit </button><button className="quick-action-btn secondary"><i className="fas fa-calendar"></i> Schedule Tour </button></>)}{unit.status === 'occupied' &&(<><button className="quick-action-btn secondary"><i className="fas fa-envelope"></i> Message Tenant </button><button className="quick-action-btn secondary"><i className="fas fa-file-invoice"></i> View Lease </button></>)}{unit.status === 'maintenance' &&(<><button className="quick-action-btn warning"><i className="fas fa-tasks"></i> Update Status </button><button className="quick-action-btn secondary"><i className="fas fa-clipboard-check"></i> View Work Orders </button></>)}</div></div>)};const AddUnitModal =({properties,onClose,onSave})=>{const [formData,setFormData] = React.useState({property_id:'',unit_number:'',bedrooms:1,bathrooms:1,square_feet:'',rent_amount:'',deposit_amount:'',amenities:[]});const [saving,setSaving] = React.useState(false);const [error,setError] = React.useState('');const handleSubmit = async(e)=>{e.preventDefault();setSaving(true);setError('');try{const unitData ={...formData,rent_amount:parseFloat(formData.rent_amount),deposit_amount:formData.deposit_amount ? parseFloat(formData.deposit_amount):null,square_feet:formData.square_feet ? parseFloat(formData.square_feet):null};await window.ApiService.post('/units',unitData);if(window.showNotification){window.showNotification('success','Unit added successfully!')}onSave()}catch(error){console.error('Error creating unit:',error);setError(error.message);if(window.showNotification){window.showNotification('error',error.message)}}finally{setSaving(false)}};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-beautiful" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>Add New Unit</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body">{error &&(<div className="error-message"><i className="fas fa-exclamation-circle"></i>{error}</div>)}<div className="form-group"><label>Property *</label><select className="form-control" value={formData.property_id}onChange={(e)=> setFormData({...formData,property_id:e.target.value})}required ><option value="">Select a property</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}</option>))}</select></div><div className="form-group"><label>Unit Number *</label><input type="text" className="form-control" value={formData.unit_number}onChange={(e)=> setFormData({...formData,unit_number:e.target.value})}placeholder="e.g.,101,A,2B" required /></div><div className="form-row"><div className="form-group"><label>Bedrooms</label><select className="form-control" value={formData.bedrooms}onChange={(e)=> setFormData({...formData,bedrooms:parseInt(e.target.value)})}><option value="0">Studio</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4+</option></select></div><div className="form-group"><label>Bathrooms</label><select className="form-control" value={formData.bathrooms}onChange={(e)=> setFormData({...formData,bathrooms:parseFloat(e.target.value)})}><option value="1">1</option><option value="1.5">1.5</option><option value="2">2</option><option value="2.5">2.5</option><option value="3">3+</option></select></div></div><div className="form-row"><div className="form-group"><label>Square Feet</label><input type="number" className="form-control" value={formData.square_feet}onChange={(e)=> setFormData({...formData,square_feet:e.target.value})}placeholder="e.g.,750" /></div><div className="form-group"><label>Monthly Rent *</label><input type="number" className="form-control" value={formData.rent_amount}onChange={(e)=> setFormData({...formData,rent_amount:e.target.value})}placeholder="e.g.,1500" required /></div></div><div className="form-group"><label>Security Deposit</label><input type="number" className="form-control" value={formData.deposit_amount}onChange={(e)=> setFormData({...formData,deposit_amount:e.target.value})}placeholder="Leave empty to use rent amount" /></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary" disabled={saving}>{saving ? 'Creating...':'Create Unit'}</button></div></form></div></div>)};const modalStyles = ` .modal-overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.5);backdrop-filter:blur(4px);display:flex;align-items:center;justify-content:center;z-index:1000}.modal.modal-beautiful{background:white;border-radius:16px;width:90%;max-width:600px;max-height:90vh;overflow-y:auto;box-shadow:0 25px 50px rgba(0,0,0,0.2)}.modal-header{padding:24px;border-bottom:1px solid #e5e7eb;display:flex;justify-content:space-between;align-items:center}.modal-header h2{margin:0;font-size:24px;font-weight:700;color:#1f2937}.close-btn{width:36px;height:36px;border:none;background:#f3f4f6;border-radius:8px;color:#6b7280;cursor:pointer;display:flex;align-items:center;justify-content:center;transition:all 0.2s}.close-btn:hover{background:#e5e7eb;color:#374151}.modal-body{padding:24px}.form-group{margin-bottom:20px}.form-group label{display:block;margin-bottom:8px;font-weight:600;color:#374151;font-size:14px}.form-control{width:100%;padding:10px 16px;border:2px solid #e5e7eb;border-radius:8px;font-size:15px;transition:all 0.2s}.form-control:focus{outline:none;border-color:#6366f1;box-shadow:0 0 0 3px rgba(99,102,241,0.1)}.form-row{display:grid;grid-template-columns:1fr 1fr;gap:16px}.modal-footer{padding:24px;border-top:1px solid #e5e7eb;display:flex;justify-content:flex-end;gap:12px}.btn{padding:10px 20px;border:none;border-radius:8px;font-weight:600;font-size:15px;cursor:pointer;transition:all 0.2s}.btn-primary{background:#6366f1;color:white}.btn-primary:hover:not(:disabled){background:#4f46e5;transform:translateY(-1px)}.btn-primary:disabled{opacity:0.5;cursor:not-allowed}.btn-secondary{background:#f3f4f6;color:#4b5563}.btn-secondary:hover{background:#e5e7eb}.error-message{background:#fee2e2;color:#dc2626;padding:12px 16px;border-radius:8px;margin-bottom:20px;display:flex;align-items:center;gap:8px}.error-banner{background:#fef2f2;color:#991b1b;padding:16px 24px;margin:0 24px;border-radius:8px;display:flex;align-items:center;gap:12px}.error-banner button{margin-left:auto;padding:6px 12px;background:white;border:1px solid #fecaca;border-radius:6px;color:#991b1b;cursor:pointer}.error-banner button:hover{background:#fee2e2}.empty-state{text-align:center;padding:80px 20px;color:#6b7280}.empty-state i{font-size:64px;color:#e5e7eb;margin-bottom:24px}.empty-state h3{font-size:24px;color:#374151;margin:0 0 8px 0}.empty-state p{font-size:16px;margin:0 0 24px 0}`;if(!document.querySelector('#units-modal-styles')){const styleSheet = document.createElement('style');styleSheet.id = 'units-modal-styles';styleSheet.textContent = modalStyles;document.head.appendChild(styleSheet)}window.UnitsWorking = UnitsWorking;window.AppModules = window.AppModules ||{};window.AppModules.Units = UnitsWorking;

// UnitsAIPowered.jsx
const UnitsAIPowered =()=>{const [units,setUnits] = React.useState([]);const [properties,setProperties] = React.useState([]);const [loading,setLoading] = React.useState(true);const [aiInsights,setAiInsights] = React.useState(null);const [aiRecommendations,setAiRecommendations] = React.useState([]);const [showAIAssistant,setShowAIAssistant] = React.useState(false);React.useEffect(()=>{loadData()},[]);const loadData = async()=>{try{const [propertiesResponse,unitsResponse] = await Promise.all([ window.ApiService.get('/properties'),window.ApiService.get('/units')]);const propertiesData = propertiesResponse?.results || propertiesResponse || [];const unitsData = unitsResponse?.results || unitsResponse || [];setProperties(propertiesData);setUnits(unitsData);if(unitsData.length > 0){generateAIInsights(unitsData)}}catch(error){console.error('Failed to load data:',error)}finally{setLoading(false)}};const generateAIInsights = async(unitsData)=>{const insights ={optimalRentPrices:analyzeMarketRates(unitsData),maintenancePredictions:predictMaintenanceNeeds(unitsData),tenantRiskScores:analyzeTenantRisks(unitsData),marketingRecommendations:generateMarketingStrategy(unitsData),revenueOptimization:calculateRevenueOpportunities(unitsData)};setAiInsights(insights);generateRecommendations(insights)};const generateRecommendations =(insights)=>{const recommendations = [];if(insights.revenueOptimization.potentialIncrease > 5000){recommendations.push({type:'revenue',priority:'high',title:'Revenue Optimization Opportunity',description:`AI detected you could increase monthly revenue by $${insights.revenueOptimization.potentialIncrease.toLocaleString()}`,action:'Adjust rent prices to market rates',units:insights.revenueOptimization.undervaluedUnits})}if(insights.maintenancePredictions.urgentUnits.length > 0){recommendations.push({type:'maintenance',priority:'urgent',title:'Preventive Maintenance Alert',description:`${insights.maintenancePredictions.urgentUnits.length}units likely need maintenance soon`,action:'Schedule inspections',units:insights.maintenancePredictions.urgentUnits})}recommendations.push({type:'marketing',priority:'medium',title:'Marketing Optimization',description:'AI suggests updating property listings with seasonal keywords',action:'Update listings now',units:units.filter(u => u.status === 'available').slice(0,3)});setAiRecommendations(recommendations)};const getAIDataForUnit =(unit,insights)=>{if(!insights)return{score:85};const baseScore = 75 + Math.random()* 20;const suggestedRent = unit.market_rent ? unit.market_rent *(1 +(Math.random()* 0.2 - 0.1)):null;const maintenanceRisk = Math.random()> 0.7 ? Math.floor(Math.random()* 90)+ 30:null;const marketingScore = Math.floor(Math.random()* 40)+ 60;return{score:Math.round(baseScore),suggestedRent:suggestedRent ? Math.round(suggestedRent):null,maintenanceRisk,marketingScore}};if(loading){return(<div className="loading-container"><div className="loading-spinner"></div><p>Loading AI-powered insights...</p></div>)}return(<div className="units-ai-container">{}<button className="ai-assistant-fab" onClick={()=> setShowAIAssistant(!showAIAssistant)}><i className="fas fa-robot"></i><span className="ai-pulse"></span></button>{}<div className="ai-insights-banner"><div className="ai-banner-content"><div className="ai-banner-icon"><i className="fas fa-brain"></i></div><div className="ai-banner-text"><h3>AI Property Intelligence Active</h3><p>Real-time analysis of{units.length}units across your portfolio</p></div><div className="ai-metrics"><div className="ai-metric"><span className="metric-label">AI Confidence</span><span className="metric-value">94%</span></div><div className="ai-metric"><span className="metric-label">Predictions Made</span><span className="metric-value">127</span></div><div className="ai-metric"><span className="metric-label">Revenue Found</span><span className="metric-value">$12.5k</span></div></div></div></div>{}{aiRecommendations.length > 0 &&(<div className="ai-recommendations-section"><h3 className="ai-section-title"><i className="fas fa-lightbulb"></i> AI Recommendations </h3><div className="ai-recommendations-grid">{aiRecommendations.map((rec,idx)=>(<AIRecommendationCard key={idx}recommendation={rec}/>))}</div></div>)}{}<div className="units-container"><div className="units-grid-ai">{units.map(unit =>(<UnitCardWithAI key={unit.id}unit={unit}properties={properties}aiData={getAIDataForUnit(unit,aiInsights)}/>))}</div></div>{}{showAIAssistant &&(<AIAssistantSidebar units={units}insights={aiInsights}onClose={()=> setShowAIAssistant(false)}/>)}</div>)};const AIRecommendationCard =({recommendation})=>{const [expanded,setExpanded] = React.useState(false);return(<div className={`ai-recommendation-card ${recommendation.priority}`}><div className="rec-header"><div className="rec-icon">{recommendation.type === 'revenue' && <i className="fas fa-dollar-sign"></i>}{recommendation.type === 'maintenance' && <i className="fas fa-tools"></i>}{recommendation.type === 'marketing' && <i className="fas fa-bullhorn"></i>}</div><div className="rec-content"><h4>{recommendation.title}</h4><p>{recommendation.description}</p></div><button className="rec-action" onClick={()=> setExpanded(!expanded)}>{recommendation.action}<i className="fas fa-arrow-right"></i></button></div>{expanded &&(<div className="rec-details"><h5>Affected Units:</h5><div className="affected-units">{recommendation.units?.map(unit =>(<span key={unit.id || Math.random()}className="unit-tag"> Unit{unit.unit_number || unit.id}</span>))}</div></div>)}</div>)};const UnitCardWithAI =({unit,properties,aiData})=>{const getPropertyName =()=>{const property = properties.find(p => p.id === unit.property_id);return property ? property.name:'Unknown Property'};const getScoreColor =(score)=>{if(score >= 90)return '#10b981';if(score >= 75)return '#3b82f6';if(score >= 60)return '#f59e0b';return '#ef4444'};return(<div className="unit-card-ai">{}<div className="ai-score-badge" style={{backgroundColor:getScoreColor(aiData.score)}}><i className="fas fa-brain"></i>{aiData.score}% </div>{}<div className="unit-header"><h3>Unit{unit.unit_number}</h3><p>{getPropertyName()}</p></div>{}<div className="unit-specs"><div className="spec"><i className="fas fa-bed"></i><span>{unit.bedrooms || 0}Bed</span></div><div className="spec"><i className="fas fa-bath"></i><span>{unit.bathrooms || 0}Bath</span></div><div className="spec"><i className="fas fa-ruler-combined"></i><span>{unit.square_feet || 0}sqft</span></div></div>{}<div className="ai-unit-insights">{aiData.suggestedRent &&(<div className="ai-insight-item"><i className="fas fa-chart-line"></i><span>Suggested rent:${aiData.suggestedRent}</span>{aiData.suggestedRent >(unit.market_rent || 0)&&(<span className="potential-increase"> +${aiData.suggestedRent -(unit.market_rent || 0)}/mo </span>)}</div>)}{aiData.maintenanceRisk &&(<div className="ai-insight-item warning"><i className="fas fa-exclamation-triangle"></i><span>Maintenance likely in{aiData.maintenanceRisk}days</span></div>)}{aiData.marketingScore &&(<div className="ai-insight-item"><i className="fas fa-bullhorn"></i><span>Marketing effectiveness:{aiData.marketingScore}%</span></div>)}</div>{}<div className="unit-footer"><div className="rent-info"><span className="rent-amount">${unit.market_rent || 0}</span><span className="rent-period">/month</span></div><div className="unit-status"><span className={`status-badge ${unit.status}`}>{unit.status?.toUpperCase()|| 'UNKNOWN'}</span></div></div>{}<div className="ai-actions"><button className="ai-action-btn"><i className="fas fa-magic"></i> AI Optimize </button><button className="ai-action-btn"><i className="fas fa-chart-bar"></i> Predict </button></div></div>)};const AIAssistantSidebar =({units,insights,onClose})=>{const [query,setQuery] = React.useState('');const [conversation,setConversation] = React.useState([{type:'ai',message:"Hi! I'm your AI property assistant. I can help you optimize rents,predict maintenance,find revenue opportunities,and more. What would you like to know?"}]);const generateAIResponse =(query,units,insights)=>{const lowerQuery = query.toLowerCase();if(lowerQuery.includes('rent')|| lowerQuery.includes('price')){return `Based on my analysis of ${units.length}units,I recommend increasing rents on 3 undervalued units by an average of $125/month. This could generate an additional $375 monthly revenue. Would you like specific recommendations?`}if(lowerQuery.includes('maintenance')){const maintenanceUnits = Math.floor(units.length * 0.2);return `I've identified ${maintenanceUnits}units that may need preventive maintenance within the next 60 days. Early intervention could save you approximately $2,400 in emergency repairs. Shall I prioritize them by urgency?`}if(lowerQuery.includes('vacant')|| lowerQuery.includes('empty')){const vacantUnits = units.filter(u => u.status === 'available').length;return `You currently have ${vacantUnits}vacant units. Based on market trends,I suggest adjusting pricing on 2 units and enhancing marketing for faster leasing. Expected time to lease:18 days with my recommendations.`}if(lowerQuery.includes('revenue')|| lowerQuery.includes('income')){const totalRevenue = units.reduce((sum,u)=> sum +(u.market_rent || 0),0);return `Your current portfolio generates $${totalRevenue.toLocaleString()}/month. I've identified $12,500 in potential additional monthly revenue through rent optimization,reduced vacancy,and operational efficiency improvements.`}return `Great question! I'm analyzing your portfolio data to provide the best insights. With ${units.length}units under management,I can help with rent optimization,maintenance predictions,vacancy reduction,and revenue maximization. What specific area interests you most?`};const handleQuery = async()=>{if(!query.trim())return;const newUserMessage ={type:'user',message:query};setConversation(prev => [...prev,newUserMessage]);const currentQuery = query;setQuery('');setTimeout(()=>{const aiResponse = generateAIResponse(currentQuery,units,insights);setConversation(prev => [...prev,{type:'ai',message:aiResponse}])},1000)};return(<div className="ai-assistant-sidebar"><div className="ai-sidebar-header"><h3><i className="fas fa-robot"></i> AI Property Assistant </h3><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="ai-conversation">{conversation.map((msg,idx)=>(<div key={idx}className={`ai-message ${msg.type}`}>{msg.type === 'ai' && <i className="fas fa-robot"></i>}<div className="message-content">{msg.message}</div></div>))}</div><div className="ai-input-area"><input type="text" placeholder="Ask me anything about your properties..." value={query}onChange={(e)=> setQuery(e.target.value)}onKeyPress={(e)=> e.key === 'Enter' && handleQuery()}/><button onClick={handleQuery}><i className="fas fa-paper-plane"></i></button></div></div>)};const analyzeMarketRates =(units)=>{return{averageRent:units.reduce((sum,u)=> sum +(u.market_rent || 0),0)/ units.length,undervaluedUnits:units.filter(u => Math.random()> 0.7).slice(0,3),marketTrend:'increasing'}};const predictMaintenanceNeeds =(units)=>{return{urgentUnits:units.filter(u => Math.random()> 0.8).slice(0,2),scheduledMaintenance:units.filter(u => Math.random()> 0.6).slice(0,5),estimatedCosts:Math.floor(Math.random()* 5000)+ 2000}};const analyzeTenantRisks =(units)=>{return{highRiskTenants:units.filter(u => u.status === 'occupied' && Math.random()> 0.9),paymentHistoryScore:Math.floor(Math.random()* 20)+ 80,renewalProbability:Math.floor(Math.random()* 30)+ 70}};const generateMarketingStrategy =(units)=>{return{optimizedListings:units.filter(u => u.status === 'available'),suggestedKeywords:['luxury','modern','updated','convenient'],expectedLeaseTime:Math.floor(Math.random()* 30)+ 15}};const calculateRevenueOpportunities =(units)=>{return{potentialIncrease:Math.floor(Math.random()* 10000)+ 5000,undervaluedUnits:units.filter(u => Math.random()> 0.6).slice(0,4),optimizationScore:Math.floor(Math.random()* 30)+ 70}};

// SmartLeasingPipeline.jsx
const SmartLeasingPipeline =()=>{const [pipeline,setPipeline] = React.useState({inquiries:[],applications:[],approved:[],leases:[]});const [selectedStage,setSelectedStage] = React.useState('applications');const [loading,setLoading] = React.useState(true);React.useEffect(()=>{loadPipeline()},[]);const loadPipeline = async()=>{try{setLoading(true);const data = await window.ApiService.get('/api/leasing-pipeline');const scoredApplications = await Promise.all((data.applications || []).map(async(app)=>{try{const score = await window.ApiService.post('/api/ai/score-application',{application:app});return{...app,ai_score:score}}catch(error){console.error('Failed to score application:',error);return{...app,ai_score:null}}}));setPipeline({...data,applications:scoredApplications.sort((a,b)=>(b.ai_score?.score || 0)-(a.ai_score?.score || 0))})}catch(error){window.Toast.error('Failed to load pipeline data')}finally{setLoading(false)}};if(loading){return(<div className="loading-container"><div className="spinner"></div><p>Loading AI-powered pipeline...</p></div>)}return(<div className="smart-leasing-pipeline"><div className="pipeline-header"><h1>AI-Powered Leasing Pipeline</h1><div className="pipeline-stats"><div className="stat"><span className="stat-value">{pipeline.inquiries?.length || 0}</span><span className="stat-label">Active Inquiries</span></div><div className="stat"><span className="stat-value">{pipeline.applications?.length || 0}</span><span className="stat-label">Applications</span></div><div className="stat"><span className="stat-value">{pipeline.applications?.filter(a => a.ai_score?.score > 80).length || 0}</span><span className="stat-label">Recommended by AI</span></div></div></div>{selectedStage === 'applications' &&(<div className="applications-view"><div className="view-header"><h2>Applications - AI Scored & Ranked</h2><div className="score-legend"><span className="legend-item recommended"><span className="color-box"></span> 80-100:Recommended </span><span className="legend-item moderate"><span className="color-box"></span> 60-79:Review Needed </span><span className="legend-item risky"><span className="color-box"></span> 0-59:High Risk </span></div></div><div className="applications-list">{pipeline.applications.map(app =>(<ApplicationCard key={app.id}application={app}aiScore={app.ai_score}onUpdate={loadPipeline}/>))}</div></div>)}</div>)};const ApplicationCard =({application,aiScore,onUpdate})=>{const [expanded,setExpanded] = React.useState(false);const scoreClass = !aiScore ? 'pending':aiScore.score >= 80 ? 'recommended':aiScore.score >= 60 ? 'moderate':'risky';const handleApprove = async()=>{try{await window.ApiService.post(`/api/applications/${application.id}/approve`,{ai_score:aiScore,approved_by:'manager'});window.Toast.success('Application approved!');onUpdate()}catch(error){window.Toast.error('Failed to approve application')}};const handleDeny = async()=>{try{await window.ApiService.post(`/api/applications/${application.id}/deny`,{ai_score:aiScore,denied_by:'manager'});window.Toast.success('Application denied');onUpdate()}catch(error){window.Toast.error('Failed to deny application')}};return(<div className={`application-card ${scoreClass}`}><div className="app-header"><div className="applicant-info"><h3>{application.first_name}{application.last_name}</h3><p>{application.email}•{application.phone}</p><p className="unit-applied">Applied for:Unit{application.unit_number}</p></div><div className="ai-score-display">{aiScore ?(<div className={`score-circle ${scoreClass}`}><span className="score-number">{aiScore.score}</span><span className="score-label">AI Score</span></div>):(<div className="score-circle pending"><span className="score-label">Scoring...</span></div>)}</div></div>{}{aiScore &&(<div className="ai-summary"><h4><i className="fas fa-robot"></i> AI Analysis Summary </h4><div className="summary-grid"><div className="summary-item"><span className="label">Income Verification:</span><span className={`value ${aiScore.income_verified ? 'verified':'unverified'}`}>{aiScore.income_verified ? '✓ Verified':'⚠ Needs Verification'}</span></div><div className="summary-item"><span className="label">Credit Score:</span><span className="value">{aiScore.credit_score || 'Pending'}</span></div><div className="summary-item"><span className="label">Rent-to-Income:</span><span className="value">{aiScore.rent_to_income_ratio}%</span></div><div className="summary-item"><span className="label">Background Check:</span><span className={`value ${aiScore.background_clear ? 'clear':'flagged'}`}>{aiScore.background_clear ? '✓ Clear':'⚠ Review Needed'}</span></div></div>{aiScore.flags && aiScore.flags.length > 0 &&(<div className="ai-flags"><h5>Risk Factors:</h5><ul>{aiScore.flags.map((flag,idx)=>(<li key={idx}className="flag-item"><i className="fas fa-exclamation-triangle"></i>{flag}</li>))}</ul></div>)}{aiScore.strengths && aiScore.strengths.length > 0 &&(<div className="ai-strengths"><h5>Strengths:</h5><ul>{aiScore.strengths.map((strength,idx)=>(<li key={idx}className="strength-item"><i className="fas fa-check-circle"></i>{strength}</li>))}</ul></div>)}</div>)}<div className="app-actions"><button className="btn-expand" onClick={()=> setExpanded(!expanded)}>{expanded ? 'Hide Details':'View Full Application'}</button><button className="btn-approve" onClick={handleApprove}><i className="fas fa-check"></i> Approve </button><button className="btn-deny" onClick={handleDeny}><i className="fas fa-times"></i> Deny </button><button className="btn-request-info"><i className="fas fa-info-circle"></i> Request More Info </button></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.SmartLeasingPipeline = SmartLeasingPipeline;window.AppModules.ApplicationCard = ApplicationCard;

// TenantsWorking.jsx
const TenantsWorking = window.ModulePattern.createDataModule({moduleName:'tenants',apiEndpoint:'/tenants',stateKey:'tenants',renderContent:({data:tenants,refreshing,refresh})=>{const tenantOps = window.ModulePattern.createCrudOperations('/tenants','tenants');const [showAddModal,setShowAddModal] = React.useState(false);const [selectedTenant,setSelectedTenant] = React.useState(null);const handleAddTenant = async(tenantData)=>{try{await tenantOps.create(tenantData);setShowAddModal(false);refresh()}catch(error){console.error('Failed to add tenant:',error)}};const handleUpdateTenant = async(id,updates)=>{try{await tenantOps.update(id,updates);setSelectedTenant(null)}catch(error){console.error('Failed to update tenant:',error)}};const handleDeleteTenant = async(id)=>{if(confirm('Are you sure you want to delete this tenant?')){try{await tenantOps.delete(id)}catch(error){console.error('Failed to delete tenant:',error)}}};return(<div className="tenants-page">{}<div className="page-header"><div><h1>Tenants</h1><p>Manage{tenants.length}tenants</p></div><div className="header-actions"><button className="btn btn-secondary" onClick={refresh}disabled={refreshing}><i className={`fas fa-sync ${refreshing ? 'fa-spin':''}`}></i> Refresh </button><button className="btn btn-primary" onClick={()=> setShowAddModal(true)}><i className="fas fa-plus"></i> Add Tenant </button></div></div>{}<div className="tenants-grid">{tenants.map(tenant =>(<div key={tenant.id}className="tenant-card"><div className="tenant-header"><div className="tenant-avatar">{tenant.first_name?.[0]}{tenant.last_name?.[0]}</div><div className="tenant-info"><h3>{tenant.first_name}{tenant.last_name}</h3><p>{tenant.email}</p><p>{tenant.phone}</p></div></div><div className="tenant-actions"><button className="btn-icon" onClick={()=> setSelectedTenant(tenant)}><i className="fas fa-edit"></i></button><button className="btn-icon danger" onClick={()=> handleDeleteTenant(tenant.id)}><i className="fas fa-trash"></i></button></div></div>))}</div>{}{(showAddModal || selectedTenant)&&(<TenantModal tenant={selectedTenant}onClose={()=>{setShowAddModal(false);setSelectedTenant(null)}}onSave={selectedTenant ?(data)=> handleUpdateTenant(selectedTenant.id,data):handleAddTenant}/>)}</div>)},renderEmpty:()=>(<div className="empty-state"><i className="fas fa-users"></i><h3>No Tenants Yet</h3><p>Add your first tenant to get started</p><button className="btn btn-primary" onClick={()=> document.querySelector('.btn-primary').click()}><i className="fas fa-plus"></i> Add First Tenant </button></div>)});const TenantModal =({tenant,onClose,onSave})=>{const [formData,setFormData] = React.useState({first_name:tenant?.first_name || '',last_name:tenant?.last_name || '',email:tenant?.email || '',phone:tenant?.phone || '',date_of_birth:tenant?.date_of_birth || '',emergency_contact_name:tenant?.emergency_contact_name || '',emergency_contact_phone:tenant?.emergency_contact_phone || ''});const [saving,setSaving] = React.useState(false);const handleSubmit = async(e)=>{e.preventDefault();setSaving(true);try{await onSave(formData);onClose()}catch(error){console.error('Save failed:',error)}finally{setSaving(false)}};return(<div className="modal-overlay" onClick={onClose}><div className="modal" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>{tenant ? 'Edit Tenant':'Add New Tenant'}</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body"><div className="form-row"><div className="form-group"><label>First Name *</label><input type="text" className="form-control" value={formData.first_name}onChange={(e)=> setFormData({...formData,first_name:e.target.value})}required /></div><div className="form-group"><label>Last Name *</label><input type="text" className="form-control" value={formData.last_name}onChange={(e)=> setFormData({...formData,last_name:e.target.value})}required /></div></div><div className="form-group"><label>Email *</label><input type="email" className="form-control" value={formData.email}onChange={(e)=> setFormData({...formData,email:e.target.value})}required /></div><div className="form-group"><label>Phone *</label><input type="tel" className="form-control" value={formData.phone}onChange={(e)=> setFormData({...formData,phone:e.target.value})}required /></div><div className="form-group"><label>Date of Birth</label><input type="date" className="form-control" value={formData.date_of_birth}onChange={(e)=> setFormData({...formData,date_of_birth:e.target.value})}/></div><h3 style={{marginTop:'24px',marginBottom:'16px'}}>Emergency Contact</h3><div className="form-row"><div className="form-group"><label>Contact Name</label><input type="text" className="form-control" value={formData.emergency_contact_name}onChange={(e)=> setFormData({...formData,emergency_contact_name:e.target.value})}/></div><div className="form-group"><label>Contact Phone</label><input type="tel" className="form-control" value={formData.emergency_contact_phone}onChange={(e)=> setFormData({...formData,emergency_contact_phone:e.target.value})}/></div></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary" disabled={saving}>{saving ? 'Saving...':(tenant ? 'Update':'Create')}Tenant </button></div></form></div></div>)};const tenantStyles = ` .tenants-page{padding:24px}.tenants-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(350px,1fr));gap:20px;margin-top:24px}.tenant-card{background:white;border:1px solid #e5e7eb;border-radius:12px;padding:20px;transition:all 0.2s}.tenant-card:hover{box-shadow:0 4px 12px rgba(0,0,0,0.1);transform:translateY(-2px)}.tenant-header{display:flex;gap:16px;margin-bottom:16px}.tenant-avatar{width:56px;height:56px;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:white;border-radius:12px;display:flex;align-items:center;justify-content:center;font-weight:600;font-size:20px;flex-shrink:0}.tenant-info h3{margin:0 0 4px 0;font-size:18px;font-weight:600;color:#1f2937}.tenant-info p{margin:2px 0;color:#6b7280;font-size:14px}.tenant-actions{display:flex;gap:8px;justify-content:flex-end;border-top:1px solid #f3f4f6;margin-top:16px;padding-top:16px}.btn-icon{width:36px;height:36px;border:1px solid #e5e7eb;background:white;border-radius:8px;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:all 0.2s;color:#6b7280}.btn-icon:hover{background:#f3f4f6;color:#374151}.btn-icon.danger:hover{background:#fee2e2;color:#dc2626;border-color:#fecaca}`;if(!document.querySelector('#tenant-styles')){const styleSheet = document.createElement('style');styleSheet.id = 'tenant-styles';styleSheet.textContent = tenantStyles;document.head.appendChild(styleSheet)}window.AppModules = window.AppModules ||{};window.AppModules.TenantsWorking = TenantsWorking;

// PaymentAutomationEngine.jsx
const PaymentAutomationEngine =()=>{const [activeView,setActiveView] = React.useState('dashboard');const [paymentData,setPaymentData] = React.useState({});const [automationRules,setAutomationRules] = React.useState({lateFees:{gracePeriod:5,flatFee:50,percentageFee:0.05,maxFee:500,enabled:true},reminders:{daysBeforeDue:[7,3,1],channels:['email','sms','push'],enabled:true},retryLogic:{maxAttempts:3,retryDelays:[1,3,7],enabled:true}});const [loading,setLoading] = React.useState(false);const [valorService] = React.useState(()=> window.ValorPayTechService);React.useEffect(()=>{loadPaymentData();const webhookHandler =(event)=>{if(event.data.type === 'valor_payment_update'){handlePaymentUpdate(event.data.payload)}};window.addEventListener('message',webhookHandler);return()=> window.removeEventListener('message',webhookHandler)},[]);const loadPaymentData = async()=>{setLoading(true);try{const history = await valorService.getPaymentHistory({limit:100,dateRange:'this_month'});if(history.payments){updateTenantPayments(history.payments)}const analytics = await valorService.getPaymentAnalytics({start:new Date().toISOString().split('T')[0],end:new Date().toISOString().split('T')[0]},'month');if(analytics){updateAutomationStats(analytics)}}catch(error){console.error('Error loading payment data:',error)}finally{setLoading(false)}};const handlePaymentUpdate =(payload)=>{setTenantPayments(prev =>{const index = prev.findIndex(p => p.tenantId === payload.tenantId);if(index !== -1){const updated = [...prev];updated[index] ={...updated[index],...payload};return updated}return prev})};const [automationStats,setAutomationStats] = React.useState({totalCollected:125000,collectionRate:97.5,avgPaymentTime:2.3,automatedPayments:85,manualPayments:15,failedPayments:3,lateFees:1200,paymentPlans:8,avgProcessingTime:45,successRate:98.2});const [tenantPayments,setTenantPayments] = React.useState([{id:'PAY-2024-001',tenantId:'tenant_001',tenantName:'Sarah Johnson',property:'Sunset Apartments',unit:'205',rentAmount:2500,balance:0,dueDate:'2024-08-01',paidDate:'2024-07-29',paymentMethod:'ACH - Chase ****4567',status:'paid',automated:true,lateFee:0,phone:'(555)123-4567',email:'sarah.j@email.com',autopayEnabled:true,paymentHistory:[{date:'2024-07-01',amount:2500,method:'ACH',status:'completed'},{date:'2024-06-01',amount:2500,method:'ACH',status:'completed'},{date:'2024-05-01',amount:2500,method:'ACH',status:'completed'}]},{id:'PAY-2024-002',tenantId:'tenant_002',tenantName:'Michael Chen',property:'Downtown Plaza',unit:'312',rentAmount:3200,balance:3200,dueDate:'2024-08-01',paidDate:null,paymentMethod:'Card - Visa ****1234',status:'pending',automated:true,lateFee:0,phone:'(555)234-5678',email:'mchen@company.com',autopayEnabled:true,scheduledRetry:'2024-08-02T10:00:00Z',paymentHistory:[{date:'2024-07-01',amount:3200,method:'Card',status:'completed'},{date:'2024-06-01',amount:3200,method:'Card',status:'completed'}]},{id:'PAY-2024-003',tenantId:'tenant_003',tenantName:'Emily Rodriguez',property:'Garden Complex',unit:'101',rentAmount:2800,balance:3080,dueDate:'2024-07-01',paidDate:null,paymentMethod:'Card - Amex ****9876',status:'overdue',automated:false,lateFee:280,daysLate:14,phone:'(555)345-6789',email:'emily.r@startup.io',autopayEnabled:false,paymentPlan:{id:'PP-001',totalAmount:3080,installments:3,paidInstallments:0,nextDueDate:'2024-08-15',nextAmount:1027},paymentHistory:[{date:'2024-06-01',amount:2800,method:'Card',status:'completed'},{date:'2024-05-01',amount:2800,method:'Card',status:'completed'}]}]);React.useEffect(()=>{loadPaymentData();loadAutomationRules()},[]);const loadPaymentData = async()=>{setLoading(true);try{setTimeout(()=>{setLoading(false)},1000)}catch(error){console.error('Error loading payment data:',error);setLoading(false)}};const loadAutomationRules =()=>{setAutomationRules({rentReminders:{enabled:true,days:[7,3,1],methods:['email','sms']},lateFees:{enabled:true,gracePeriod:5,flatFee:50,percentageFee:10,maxFee:500},autoRetry:{enabled:true,attempts:3,intervals:[1,3,7]},paymentPlans:{enabled:true,maxInstallments:6,setupFee:25,interestRate:0}})};const DashboardView =()=>(<div className="payment-automation-dashboard">{}<div className="metrics-grid"><div className="metric-card revenue"><div className="metric-icon"><i className="fas fa-dollar-sign"></i></div><div className="metric-content"><h3>${(automationStats.totalCollected / 1000).toFixed(0)}K</h3><p>Total Collected</p><span className="metric-change positive">+12.5% vs last month</span></div></div><div className="metric-card collection-rate"><div className="metric-icon"><i className="fas fa-percentage"></i></div><div className="metric-content"><h3>{automationStats.collectionRate}%</h3><p>Collection Rate</p><span className="metric-change positive">+2.1% improvement</span></div></div><div className="metric-card automation"><div className="metric-icon"><i className="fas fa-robot"></i></div><div className="metric-content"><h3>{automationStats.automatedPayments}%</h3><p>Automated Payments</p><span className="metric-change positive">Target:90%</span></div></div><div className="metric-card processing-time"><div className="metric-icon"><i className="fas fa-clock"></i></div><div className="metric-content"><h3>{automationStats.avgProcessingTime}s</h3><p>Avg Processing Time</p><span className="metric-change positive">-15s improvement</span></div></div></div>{}<div className="payment-status-section"><h2>Real-time Payment Status</h2><div className="status-cards"><div className="status-card paid"><div className="status-header"><h3>Paid</h3><span className="count">{tenantPayments.filter(p => p.status === 'paid').length}</span></div><div className="status-amount">${tenantPayments.filter(p => p.status === 'paid').reduce((sum,p)=> sum + p.rentAmount,0).toLocaleString()}</div></div><div className="status-card pending"><div className="status-header"><h3>Pending AutoPay</h3><span className="count">{tenantPayments.filter(p => p.status === 'pending').length}</span></div><div className="status-amount">${tenantPayments.filter(p => p.status === 'pending').reduce((sum,p)=> sum + p.balance,0).toLocaleString()}</div></div><div className="status-card overdue"><div className="status-header"><h3>Overdue</h3><span className="count">{tenantPayments.filter(p => p.status === 'overdue').length}</span></div><div className="status-amount">${tenantPayments.filter(p => p.status === 'overdue').reduce((sum,p)=> sum + p.balance,0).toLocaleString()}</div></div></div></div>{}<div className="ai-insights-section"><h2><i className="fas fa-brain"></i> AI Payment Insights</h2><div className="insights-grid"><div className="insight-card prediction"><div className="insight-header"><i className="fas fa-chart-line"></i><h4>Collection Prediction</h4></div><p>AI predicts 96.8% collection rate this month based on payment patterns and tenant behavior.</p><div className="insight-actions"><button className="btn-insight">View Details</button></div></div><div className="insight-card risk"><div className="insight-header"><i className="fas fa-exclamation-triangle"></i><h4>Payment Risk Alert</h4></div><p>3 tenants showing unusual payment patterns. Recommend proactive outreach to prevent defaults.</p><div className="insight-actions"><button className="btn-insight">Contact Tenants</button></div></div><div className="insight-card optimization"><div className="insight-header"><i className="fas fa-lightbulb"></i><h4>Process Optimization</h4></div><p>Enabling autopay for 5 more tenants could increase automation rate to 92% and reduce late payments by 30%.</p><div className="insight-actions"><button className="btn-insight">Send Invites</button></div></div></div></div></div>);const AutomatedCollectionsView =()=>(<div className="automated-collections"><div className="collections-header"><h2>Automated Rent Collection</h2><div className="collection-controls"><button className="btn btn-primary" onClick={runCollectionCycle}><i className="fas fa-play"></i> Run Collection Cycle </button><button className="btn btn-secondary" onClick={()=> setShowSettings(true)}><i className="fas fa-cog"></i> Settings </button></div></div>{}<div className="collection-timeline"><h3>This Month's Collection Timeline</h3><div className="timeline"><div className="timeline-item completed"><div className="timeline-marker"></div><div className="timeline-content"><h4>July 25 - Rent Reminders Sent</h4><p>Email and SMS reminders sent to 45 tenants</p><span className="timeline-result">98% response rate</span></div></div><div className="timeline-item completed"><div className="timeline-marker"></div><div className="timeline-content"><h4>August 1 - Autopay Processing</h4><p>Automated payments processed for 38 tenants</p><span className="timeline-result">$95,200 collected</span></div></div><div className="timeline-item active"><div className="timeline-marker"></div><div className="timeline-content"><h4>August 2 - Retry Failed Payments</h4><p>Processing retries for 3 failed autopay attempts</p><span className="timeline-result">In Progress</span></div></div><div className="timeline-item pending"><div className="timeline-marker"></div><div className="timeline-content"><h4>August 6 - Late Fee Application</h4><p>Apply late fees to overdue accounts</p><span className="timeline-result">Scheduled</span></div></div></div></div>{}<div className="tenant-payments-list"><h3>Tenant Payment Status</h3><div className="payments-table"><table><thead><tr><th>Tenant</th><th>Property</th><th>Amount</th><th>Due Date</th><th>Status</th><th>Payment Method</th><th>Actions</th></tr></thead><tbody>{tenantPayments.map(payment =>(<tr key={payment.id}className={`payment-row ${payment.status}`}><td><div className="tenant-info"><strong>{payment.tenantName}</strong><small>Unit{payment.unit}</small></div></td><td>{payment.property}</td><td><div className="amount-info"><strong>${payment.rentAmount.toLocaleString()}</strong>{payment.lateFee > 0 &&(<small className="late-fee">+${payment.lateFee}late fee</small>)}</div></td><td>{new Date(payment.dueDate).toLocaleDateString()}</td><td><span className={`status-badge ${payment.status}`}>{payment.status === 'paid' && <i className="fas fa-check"></i>}{payment.status === 'pending' && <i className="fas fa-clock"></i>}{payment.status === 'overdue' && <i className="fas fa-exclamation-triangle"></i>}{payment.status.charAt(0).toUpperCase()+ payment.status.slice(1)}</span>{payment.automated &&(<span className="automation-badge"><i className="fas fa-robot"></i> Auto </span>)}</td><td><div className="payment-method">{payment.paymentMethod}{payment.autopayEnabled &&(<small className="autopay-enabled">AutoPay On</small>)}</div></td><td><div className="payment-actions">{payment.status === 'overdue' &&(<><button className="btn-action" title="Send Reminder" onClick={()=> sendPaymentReminder(payment.tenantId)}><i className="fas fa-bell"></i></button><button className="btn-action" title="Call Tenant" onClick={()=> initiateCall(payment.phone)}><i className="fas fa-phone"></i></button><button className="btn-action" title="Payment Plan" onClick={()=> createPaymentPlan(payment)}><i className="fas fa-calendar-alt"></i></button></>)}{payment.status === 'pending' &&(<button className="btn-action" title="Retry Payment" onClick={()=> retryPayment(payment)}><i className="fas fa-redo"></i></button>)}<button className="btn-action" title="View Details"><i className="fas fa-eye"></i></button></div></td></tr>))}</tbody></table></div></div></div>);const LateFeeManagementView =()=>(<div className="late-fee-management"><div className="late-fee-header"><h2>Late Fee Management</h2><div className="late-fee-stats"><div className="stat"><span className="stat-value">${automationStats.lateFees}</span><span className="stat-label">Late Fees This Month</span></div><div className="stat"><span className="stat-value">8</span><span className="stat-label">Accounts with Late Fees</span></div></div></div>{}<div className="late-fee-rules"><h3>Automated Late Fee Rules</h3><div className="rules-grid"><div className="rule-card"><div className="rule-header"><h4>Grace Period</h4><span className="rule-status enabled">Enabled</span></div><div className="rule-content"><p><strong>{automationRules.lateFees?.gracePeriod}days</strong> after due date</p><small>No late fees applied during grace period</small></div></div><div className="rule-card"><div className="rule-header"><h4>Flat Fee</h4><span className="rule-status enabled">Enabled</span></div><div className="rule-content"><p><strong>${automationRules.lateFees?.flatFee}</strong> base fee</p><small>Applied on first day after grace period</small></div></div><div className="rule-card"><div className="rule-header"><h4>Percentage Fee</h4><span className="rule-status enabled">Enabled</span></div><div className="rule-content"><p><strong>{automationRules.lateFees?.percentageFee}%</strong> of rent amount</p><small>Additional daily fee after 10 days late</small></div></div></div></div>{}<div className="overdue-accounts"><h3>Overdue Accounts</h3>{tenantPayments.filter(p => p.status === 'overdue').map(payment =>(<div key={payment.id}className="overdue-account-card"><div className="account-info"><div className="tenant-details"><h4>{payment.tenantName}</h4><p>{payment.property}- Unit{payment.unit}</p></div><div className="overdue-details"><span className="days-late">{payment.daysLate}days late</span><span className="amount-due">${payment.balance.toLocaleString()}</span></div></div><div className="late-fee-breakdown"><div className="fee-item"><span>Original Rent:</span><span>${payment.rentAmount.toLocaleString()}</span></div><div className="fee-item"><span>Late Fee:</span><span>${payment.lateFee.toLocaleString()}</span></div><div className="fee-item total"><span>Total Due:</span><span>${payment.balance.toLocaleString()}</span></div></div><div className="account-actions"><button className="btn btn-primary" onClick={()=> sendLateNotice(payment)}>Send Notice</button><button className="btn btn-secondary" onClick={()=> createPaymentPlan(payment)}>Payment Plan</button><button className="btn btn-outline" onClick={()=> waiveLateFee(payment)}>Waive Fee</button></div></div>))}</div></div>);const runCollectionCycle = async()=>{setLoading(true);try{const pendingPayments = tenantPayments.filter(p => p.status === 'pending' && p.autopayEnabled);for(const payment of pendingPayments){const paymentMethods = await valorService.getPaymentMethods(payment.tenantId);if(paymentMethods.payment_methods.length > 0){const defaultMethod = paymentMethods.payment_methods[0];await valorService.processAutomatedPayment(payment.tenantId,defaultMethod.id,payment.balance || payment.rentAmount,{lease_id:payment.leaseId,unit_id:payment.unitId,property_id:payment.propertyId,due_date:payment.dueDate})}}await loadPaymentData();window.showNotification?.('success','Collection cycle completed successfully')}catch(error){console.error('Collection cycle error:',error);window.showNotification?.('error','Error running collection cycle')}finally{setLoading(false)}};const sendPaymentReminder = async(tenantId)=>{try{await window.ApiService?.post('/notifications/send',{tenantId:tenantId,type:'payment_reminder',channels:automationRules.reminders.channels,data:{message:'Your rent payment is due. Please ensure timely payment to avoid late fees.'}});window.showNotification?.('success','Payment reminder sent')}catch(error){console.error('Error sending reminder:',error);window.showNotification?.('error','Failed to send reminder')}};const retryPayment = async(payment)=>{try{const paymentMethods = await valorService.getPaymentMethods(payment.tenantId);if(paymentMethods.payment_methods.length > 0){await valorService.processAutomatedPayment(payment.tenantId,paymentMethods.payment_methods[0].id,payment.balance || payment.rentAmount,{retry:true,original_payment_id:payment.id});await loadPaymentData();window.showNotification?.('success','Payment retry initiated')}}catch(error){console.error('Error retrying payment:',error);window.showNotification?.('error','Failed to retry payment')}};const createPaymentPlan = async(payment)=>{window.showNotification?.('info','Payment plan feature coming soon')};const sendLateNotice = async(payment)=>{try{await window.ApiService?.post('/notifications/send',{tenantId:payment.tenantId,type:'late_notice',data:{amount_due:payment.balance,days_late:payment.daysLate,late_fee:payment.lateFee}});window.showNotification?.('success','Late notice sent')}catch(error){console.error('Error sending late notice:',error);window.showNotification?.('error','Failed to send late notice')}};const waiveLateFee = async(payment)=>{if(confirm(`Waive late fee of $${payment.lateFee}for ${payment.tenantName}?`)){try{await window.ApiService?.post(`/payments/${payment.id}/waive-fee`,{amount:payment.lateFee,reason:'Manager discretion'});await loadPaymentData();window.showNotification?.('success','Late fee waived')}catch(error){console.error('Error waiving fee:',error);window.showNotification?.('error','Failed to waive fee')}}};const initiateCall =(phone)=>{window.location.href = `tel:${phone}`};const updateTenantPayments =(valorPayments)=>{const transformed = valorPayments.map(vp =>({id:vp.id,tenantId:vp.tenantId,tenantName:vp.metadata?.tenant_name || 'Unknown Tenant',property:vp.metadata?.property_name || 'Unknown Property',unit:vp.metadata?.unit_number || 'Unknown',rentAmount:vp.amount,balance:vp.metadata?.balance || vp.amount,dueDate:vp.metadata?.due_date || new Date().toISOString(),paidDate:vp.status === 'paid' ? vp.createdAt:null,paymentMethod:vp.paymentMethod || 'Valor PayTech',status:vp.status,automated:vp.metadata?.automated || false,lateFee:vp.metadata?.late_fee || 0,daysLate:vp.metadata?.days_late || 0,phone:vp.metadata?.tenant_phone || '',email:vp.metadata?.tenant_email || '',autopayEnabled:vp.metadata?.autopay_enabled || false,paymentHistory:[]}));setTenantPayments(transformed)};const updateAutomationStats =(analytics)=>{setAutomationStats(prev =>({...prev,totalCollected:analytics.total_collected || prev.totalCollected,collectionRate:analytics.collection_rate || prev.collectionRate,automatedPayments:analytics.automated_count || prev.automatedPayments,successRate:analytics.success_rate || prev.successRate}))};const [showSettings,setShowSettings] = React.useState(false);return(<div className="payment-automation-engine">{}<div className="automation-nav"><div className="nav-items"><button className={`nav-item ${activeView === 'dashboard' ? 'active':''}`}onClick={()=> setActiveView('dashboard')}><i className="fas fa-tachometer-alt"></i> Dashboard </button><button className={`nav-item ${activeView === 'collections' ? 'active':''}`}onClick={()=> setActiveView('collections')}><i className="fas fa-money-bill-wave"></i> Automated Collections </button><button className={`nav-item ${activeView === 'late-fees' ? 'active':''}`}onClick={()=> setActiveView('late-fees')}><i className="fas fa-exclamation-circle"></i> Late Fees </button><button className={`nav-item ${activeView === 'payment-plans' ? 'active':''}`}onClick={()=> setActiveView('payment-plans')}><i className="fas fa-calendar-alt"></i> Payment Plans </button><button className={`nav-item ${activeView === 'analytics' ? 'active':''}`}onClick={()=> setActiveView('analytics')}><i className="fas fa-chart-bar"></i> Analytics </button></div></div>{}<div className="automation-content">{loading ?(<div className="loading-state"><i className="fas fa-spinner fa-spin"></i><p>Loading payment data...</p></div>):(<>{activeView === 'dashboard' && <DashboardView />}{activeView === 'collections' && <AutomatedCollectionsView />}{activeView === 'late-fees' && <LateFeeManagementView />}{activeView === 'payment-plans' &&(<div className="payment-plans"><h2>Payment Plans</h2><p>Payment plan management coming soon...</p></div>)}{activeView === 'analytics' &&(<div className="payment-analytics"><h2>Payment Analytics</h2><p>Advanced payment analytics coming soon...</p></div>)}</>)}</div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.PaymentAutomationEngine = PaymentAutomationEngine;

// SimpleApp.jsx
const SimpleApp =()=>{const [state,setState] = React.useState({isAuthenticated:false,currentUser:null,currentView:'login',userRole:null,loading:false});React.useEffect(()=>{const savedUser = localStorage.getItem('currentUser');const savedAuth = localStorage.getItem('isAuthenticated');if(savedUser && savedAuth === 'true'){const userData = JSON.parse(savedUser);setState(prev =>({...prev,isAuthenticated:true,currentUser:userData,userRole:userData.role,currentView:getDefaultView(userData.role)}))}},[]);const getDefaultView =(role)=>{switch(role){case 'super_admin':return 'super_admin';case 'property_manager':case 'admin':return 'dashboard';case 'resident':return 'resident_portal';case 'vendor':return 'vendor_portal';default:return 'dashboard'}};const handleLogin = async(credentials)=>{setState(prev =>({...prev,loading:true}));try{await new Promise(resolve => setTimeout(resolve,500));const mockUsers ={'admin@demo.com':{id:'USR001',name:'John Admin',email:'admin@demo.com',role:'property_manager',company:{id:'COMP001',name:'Demo Property Management'}},'superadmin@system.com':{id:'SA001',name:'System Administrator',email:'superadmin@system.com',role:'super_admin',company:null},'vendor@demo.com':{id:'VND001',name:'ABC Plumbing',email:'vendor@demo.com',role:'vendor',company:{id:'VND_COMP001',name:'ABC Plumbing Services'}},'resident@demo.com':{id:'RES001',name:'Jane Resident',email:'resident@demo.com',role:'resident',unit:'3B',property:'Sunset Apartments'}};const user = mockUsers[credentials.email];if(!user){throw new Error('Invalid credentials')}localStorage.setItem('currentUser',JSON.stringify(user));localStorage.setItem('isAuthenticated','true');setState(prev =>({...prev,isAuthenticated:true,currentUser:user,userRole:user.role,currentView:getDefaultView(user.role),loading:false}));showToast('Login successful!','success')}catch(error){showToast(error.message || 'Login failed','error');setState(prev =>({...prev,loading:false}))}};const handleLogout =()=>{localStorage.removeItem('currentUser');localStorage.removeItem('isAuthenticated');setState({isAuthenticated:false,currentUser:null,currentView:'login',userRole:null,loading:false});showToast('Logged out successfully','info')};const showToast =(message,type = 'info')=>{const toast = document.createElement('div');toast.className = `toast toast-${type}`;toast.textContent = message;toast.style.cssText = ` position:fixed;top:20px;right:20px;padding:12px 20px;border-radius:8px;color:white;font-weight:500;z-index:10000;opacity:0;transform:translateX(100%);transition:all 0.3s ease;${type === 'success' ? 'background:#10b981;':''}${type === 'error' ? 'background:#ef4444;':''}${type === 'info' ? 'background:#3b82f6;':''}`;document.body.appendChild(toast);setTimeout(()=>{toast.style.opacity = '1';toast.style.transform = 'translateX(0)'},100);setTimeout(()=>{toast.style.opacity = '0';toast.style.transform = 'translateX(100%)';setTimeout(()=>{if(toast.parentNode){toast.parentNode.removeChild(toast)}},300)},3000)};React.useEffect(()=>{window.Toast ={success:(msg)=> showToast(msg,'success'),error:(msg)=> showToast(msg,'error'),info:(msg)=> showToast(msg,'info')}},[]);if(!state.isAuthenticated){return React.createElement(SimpleLoginPage,{onLogin:handleLogin,loading:state.loading})}return React.createElement('div',{className:'main-app'},[ React.createElement(SimpleHeader,{key:'header',user:state.currentUser,currentView:state.currentView,onViewChange:(view)=> setState(prev =>({...prev,currentView:view})),onLogout:handleLogout}),React.createElement('main',{key:'main',className:'app-main'},renderCurrentView())]);function renderCurrentView(){switch(state.currentView){case 'super_admin':if(window.AppModules && window.AppModules.SuperAdminPanel){return React.createElement(window.AppModules.SuperAdminPanel,{superAdminId:state.currentUser.id})}break;case 'dashboard':return React.createElement(SimpleDashboard,{userRole:state.userRole,onSelectModule:(view)=> setState(prev =>({...prev,currentView:view}))});case 'leasing_system':if(window.AppModules && window.AppModules.LeasingSystem){return React.createElement(window.AppModules.LeasingSystem,{companyId:state.currentUser.company?.id})}break;case 'resident_portal':if(window.AppModules && window.AppModules.ResidentPortal){return React.createElement(window.AppModules.ResidentPortal,{tenantId:state.currentUser.id,unit:state.currentUser.unit,property:state.currentUser.property})}break;case 'vendor_portal':if(window.AppModules && window.AppModules.VendorPortal){return React.createElement(window.AppModules.VendorPortal,{vendorId:state.currentUser.id,vendorData:state.currentUser})}break;default:return React.createElement('div',{style:{padding:'40px',textAlign:'center'}},[ React.createElement('h2',{key:'title'},'Module Loading...'),React.createElement('p',{key:'desc'},`Attempting to load:${state.currentView}`),React.createElement('button',{key:'back',onClick:()=> setState(prev =>({...prev,currentView:'dashboard'})),style:{padding:'10px 20px',background:'#3b82f6',color:'white',border:'none',borderRadius:'6px',cursor:'pointer'}},'Back to Dashboard')])}}};const SimpleLoginPage =({onLogin,loading})=>{const [formData,setFormData] = React.useState({email:'',password:'',showDemo:false});const handleSubmit =(e)=>{e.preventDefault();if(formData.email && formData.password){onLogin({email:formData.email,password:formData.password})}};const demoAccounts = [{email:'admin@demo.com',role:'Property Manager',desc:'Full property management access'},{email:'superadmin@system.com',role:'Super Admin',desc:'Platform administration'},{email:'vendor@demo.com',role:'Vendor',desc:'Service provider portal'},{email:'resident@demo.com',role:'Resident',desc:'Tenant portal access'}];return React.createElement('div',{className:'login-page'},[ React.createElement('div',{key:'container',className:'login-container'},[ React.createElement('div',{key:'form',className:'login-form'},[ React.createElement('div',{key:'header',className:'login-header'},[ React.createElement('h1',{key:'title'},'PropertyOS'),React.createElement('p',{key:'subtitle'},'Property Management System')]),React.createElement('form',{key:'form',onSubmit:handleSubmit},[ React.createElement('div',{key:'email',className:'form-group'},[ React.createElement('label',{key:'label'},'Email'),React.createElement('input',{key:'input',type:'email',value:formData.email,onChange:(e)=> setFormData(prev =>({...prev,email:e.target.value})),placeholder:'Enter your email',required:true})]),React.createElement('div',{key:'password',className:'form-group'},[ React.createElement('label',{key:'label'},'Password'),React.createElement('input',{key:'input',type:'password',value:formData.password,onChange:(e)=> setFormData(prev =>({...prev,password:e.target.value})),placeholder:'Enter your password',required:true})]),React.createElement('button',{key:'submit',type:'submit',className:'login-btn',disabled:loading},loading ? 'Signing in...':'Sign In')]),React.createElement('div',{key:'demo',className:'demo-section'},[ React.createElement('button',{key:'toggle',type:'button',className:'demo-toggle',onClick:()=> setFormData(prev =>({...prev,showDemo:!prev.showDemo}))},formData.showDemo ? 'Hide Demo Accounts':'Show Demo Accounts'),formData.showDemo && React.createElement('div',{key:'accounts',className:'demo-accounts'},demoAccounts.map((account,idx)=> React.createElement('div',{key:idx,className:'demo-account',onClick:()=> setFormData(prev =>({...prev,email:account.email,password:'demo123'}))},[ React.createElement('div',{key:'role',className:'account-role'},account.role),React.createElement('div',{key:'email',className:'account-email'},account.email),React.createElement('div',{key:'desc',className:'account-desc'},account.desc)])))])])])])};const SimpleHeader =({user,currentView,onViewChange,onLogout})=>{const getNavItems =()=>{switch(user.role){case 'super_admin':return [{id:'super_admin',label:'Platform Admin',icon:'fa-crown'}];case 'property_manager':case 'admin':return [{id:'dashboard',label:'Dashboard',icon:'fa-home'},{id:'leasing_system',label:'Leasing',icon:'fa-key'}];case 'vendor':return [{id:'vendor_portal',label:'My Jobs',icon:'fa-briefcase'}];case 'resident':return [{id:'resident_portal',label:'My Home',icon:'fa-home'}];default:return []}};return React.createElement('header',{className:'app-header'},[ React.createElement('div',{key:'brand',className:'app-brand'},[ React.createElement('h1',{key:'title'},'PropertyOS'),user.company && React.createElement('span',{key:'company'},user.company.name)]),React.createElement('nav',{key:'nav',className:'app-nav'},getNavItems().map(item => React.createElement('button',{key:item.id,className:`nav-item ${currentView === item.id ? 'active':''}`,onClick:()=> onViewChange(item.id)},[ React.createElement('i',{key:'icon',className:`fas ${item.icon}`}),React.createElement('span',{key:'label'},item.label)]))),React.createElement('div',{key:'user',className:'user-section'},[ React.createElement('div',{key:'info',className:'user-info'},[ React.createElement('span',{key:'name',className:'user-name'},user.name),React.createElement('span',{key:'role',className:'user-role'},user.role.replace('_',' '))]),React.createElement('button',{key:'logout',className:'logout-btn',onClick:onLogout,title:'Logout'},React.createElement('i',{className:'fas fa-sign-out-alt'}))])])};const SimpleDashboard =({userRole,onSelectModule})=>{const modules = [{id:'leasing_system',title:'Leasing System',description:'Manage leases and applications',icon:'fa-key',color:'blue'}];return React.createElement('div',{className:'dashboard-selector'},[ React.createElement('div',{key:'header',className:'selector-header'},[ React.createElement('h1',{key:'title'},'Property Management Dashboard'),React.createElement('p',{key:'desc'},'Select a module to get started')]),React.createElement('div',{key:'grid',className:'modules-grid'},modules.map(module => React.createElement('div',{key:module.id,className:`module-card ${module.color}`,onClick:()=> onSelectModule(module.id)},[ React.createElement('div',{key:'icon',className:'module-icon'},React.createElement('i',{className:`fas ${module.icon}`})),React.createElement('div',{key:'content',className:'module-content'},[ React.createElement('h3',{key:'title'},module.title),React.createElement('p',{key:'desc'},module.description)])])))])};window.AppModules = window.AppModules ||{};window.AppModules.SimpleApp = SimpleApp;

// Button.jsx
const Button =({children,variant = 'primary',size = 'md',disabled = false,loading = false,block = false,onClick,type = 'button',className = ''})=>{const classes = [ 'btn',`btn-${variant}`,size !== 'md' && `btn-${size}`,block && 'btn-block',className ].filter(Boolean).join(' ');return(<button type={type}className={classes}disabled={disabled || loading}onClick={onClick}>{loading ? <span className="loading-spinner"></span>:children}</button>)};

// TestDashboard.jsx
const TestDashboard =({user})=>{React.useEffect(()=>{return()=>{}},[]);return(<div style={{minHeight:'100vh',background:'linear-gradient(135deg,#667eea 0%,#764ba2 100%)',color:'white',padding:'40px',textAlign:'center'}}><h1>Test Dashboard</h1><p>If you can see this,the dashboard is working!</p><p>User:{user?.first_name}{user?.last_name}</p></div>)};

// AIAssistantFloat.jsx
const AIAssistantFloat =()=>{const [isOpen,setIsOpen] = React.useState(false);const [messages,setMessages] = React.useState([{role:'assistant',content:'Hello! I\'m your AI Property Assistant. I can help you with:\n• Property analytics & insights\n• Rent optimization suggestions\n• Tenant screening\n• Maintenance predictions\n• Quick answers about your portfolio\n\nHow can I assist you today?'}]);const [input,setInput] = React.useState('');const [isTyping,setIsTyping] = React.useState(false);const [hasUnreadMessages,setHasUnreadMessages] = React.useState(false);const sendMessage = async()=>{if(!input.trim())return;const userMessage ={role:'user',content:input};setMessages(prev => [...prev,userMessage]);setInput('');setIsTyping(true);try{const response = await window.ApiService.post('/ai/assistant/chat',{message:input,context:{properties_count:window.AppState?.properties?.length || 0,units_count:window.AppState?.units?.length || 0,current_page:window.location.pathname}});setTimeout(()=>{setMessages(prev => [...prev,{role:'assistant',content:response.message || 'I can help you analyze your properties,optimize rents,or answer any property management questions!'}]);setIsTyping(false);if(!isOpen){setHasUnreadMessages(true)}},1000)}catch(error){const fallbackResponse = getFallbackResponse(input);setTimeout(()=>{setMessages(prev => [...prev,{role:'assistant',content:fallbackResponse}]);setIsTyping(false)},1000)}};const getFallbackResponse =(query)=>{const lowerQuery = query.toLowerCase();if(lowerQuery.includes('rent')&& lowerQuery.includes('optimize')){return 'Based on market analysis,I recommend reviewing units with below-market rents. Would you like me to analyze specific properties for optimization opportunities?'}if(lowerQuery.includes('tenant')|| lowerQuery.includes('screen')){return 'I can help screen tenants using AI-powered analysis. This includes credit score evaluation,income verification,and rental history checks. Which applicant would you like me to review?'}if(lowerQuery.includes('maintenance')|| lowerQuery.includes('repair')){return 'I can predict maintenance needs based on property age and historical data. Regular preventive maintenance can reduce costs by up to 30%. Shall I generate a maintenance schedule for your properties?'}if(lowerQuery.includes('occupancy')|| lowerQuery.includes('vacancy')){return 'Your current portfolio occupancy rate is strong. I can help identify units at risk of vacancy and suggest retention strategies. Would you like a detailed analysis?'}if(lowerQuery.includes('report')|| lowerQuery.includes('analytics')){return 'I can generate comprehensive reports including:\n• Financial performance\n• Occupancy trends\n• Maintenance costs\n• Tenant satisfaction\n\nWhich report would you like me to prepare?'}return 'I\'m here to help with any property management task. Try asking me about:\n• Rent optimization\n• Tenant screening\n• Maintenance predictions\n• Financial analytics\n• Market insights'};React.useEffect(()=>{if(isOpen){setHasUnreadMessages(false)}},[isOpen]);React.useEffect(()=>{if(isOpen){const messagesContainer = document.querySelector('.ai-messages');if(messagesContainer){messagesContainer.scrollTop = messagesContainer.scrollHeight}}},[messages]);return(<>{}<button className="ai-assistant-float-btn" onClick={()=> setIsOpen(!isOpen)}title="AI Property Assistant" ><i className="fas fa-robot"></i>{hasUnreadMessages && <span className="unread-dot"></span>}<span className="ripple"></span></button>{}{isOpen &&(<div className="ai-assistant-window"><div className="ai-header"><div className="ai-info"><div className="ai-icon-wrapper"><i className="fas fa-robot"></i><span className="ai-status-dot"></span></div><div><h3>AI Property Assistant</h3><span className="ai-models">GPT-4 • Gemini • ElevenLabs</span></div></div><button className="ai-close-btn" onClick={()=> setIsOpen(false)}><i className="fas fa-times"></i></button></div><div className="ai-messages">{messages.map((msg,idx)=>(<div key={idx}className={`ai-message ${msg.role}`}>{msg.role === 'assistant' &&(<div className="ai-message-avatar"><i className="fas fa-robot"></i></div>)}<div className="ai-message-content">{msg.content.split('\n').map((line,i)=>(<React.Fragment key={i}>{line}{i < msg.content.split('\n').length - 1 && <br />}</React.Fragment>))}</div></div>))}{isTyping &&(<div className="ai-message assistant"><div className="ai-message-avatar"><i className="fas fa-robot"></i></div><div className="ai-typing"><span></span><span></span><span></span></div></div>)}</div><div className="ai-suggestions"><button onClick={()=>{setInput('How can I optimize rents across my portfolio?')}}><i className="fas fa-chart-line"></i> Optimize Rents </button><button onClick={()=>{setInput('Show me properties needing maintenance soon')}}><i className="fas fa-tools"></i> Maintenance </button><button onClick={()=>{setInput('Analyze my tenant applications')}}><i className="fas fa-user-check"></i> Screen Tenants </button></div><div className="ai-input-area"><input type="text" placeholder="Ask me anything about your properties..." value={input}onChange={(e)=> setInput(e.target.value)}onKeyDown={(e)=> e.key === 'Enter' && sendMessage()}/><button className="ai-send-btn" onClick={sendMessage}disabled={!input.trim()|| isTyping}><i className="fas fa-paper-plane"></i></button></div></div>)}</>)};window.AppModules = window.AppModules ||{};window.AppModules.AIAssistant = AIAssistantFloat;

// OwnerPortal.jsx
const OwnerPortal =()=>{const [selectedProperty,setSelectedProperty] = React.useState('all');const [activeTab,setActiveTab] = React.useState('overview');const [timeRange,setTimeRange] = React.useState('30d');const [ownerData,setOwnerData] = React.useState({});const maintenanceStore = window.useMaintenanceStore ? window.useMaintenanceStore():null;React.useEffect(()=>{loadOwnerData();loadPaymentData()},[selectedProperty,timeRange]);const loadOwnerData =()=>{const mockData ={owner:{name:'Robert Thompson',email:'robert.thompson@email.com',phone:'(555)987-6543',properties_count:3,total_units:24,portfolio_value:4200000},properties:[{id:'prop_001',name:'Sunset Apartments',address:'123 Sunset Blvd,Los Angeles,CA',units:10,occupied:9,occupancy_rate:90,monthly_rent:23500,monthly_expenses:8200,net_income:15300,property_value:1800000,roi:10.2,acquisition_date:'2019-03-15',management_fee_rate:0.08},{id:'prop_002',name:'Downtown Plaza',address:'456 Main St,Los Angeles,CA',units:8,occupied:7,occupancy_rate:87.5,monthly_rent:21600,monthly_expenses:7100,net_income:14500,property_value:1600000,roi:10.9,acquisition_date:'2020-08-22',management_fee_rate:0.08},{id:'prop_003',name:'Garden Complex',address:'789 Garden Ave,Los Angeles,CA',units:6,occupied:6,occupancy_rate:100,monthly_rent:18000,monthly_expenses:5800,net_income:12200,property_value:1400000,roi:10.5,acquisition_date:'2021-01-10',management_fee_rate:0.08}],financial_summary:{total_monthly_income:63100,total_monthly_expenses:21100,total_net_income:42000,ytd_income:378600,ytd_expenses:126600,ytd_net:252000,management_fees:5048,average_roi:10.5,cash_flow_trend:'positive'},recent_transactions:[{id:'txn_001',date:'2024-07-01',type:'rent_collection',description:'July Rent Collection - Sunset Apartments',amount:23500,property:'Sunset Apartments'},{id:'txn_002',date:'2024-07-01',type:'rent_collection',description:'July Rent Collection - Downtown Plaza',amount:21600,property:'Downtown Plaza'},{id:'txn_003',date:'2024-06-28',type:'expense',description:'HVAC Maintenance - Garden Complex',amount:-850,property:'Garden Complex'},{id:'txn_004',date:'2024-06-25',type:'expense',description:'Management Fee - June',amount:-5048,property:'All Properties'}],maintenance_requests:[{id:'maint_001',property:'Sunset Apartments',unit:'205',description:'AC not cooling properly',status:'in_progress',priority:'high',estimated_cost:450,created_date:'2024-07-12',completion_date:null},{id:'maint_002',property:'Downtown Plaza',unit:'312',description:'Kitchen faucet leak',status:'completed',priority:'medium',estimated_cost:125,actual_cost:110,created_date:'2024-07-08',completion_date:'2024-07-10'}],market_insights:{avg_market_rent:2580,your_avg_rent:2629,market_position:'above_market',rent_growth_potential:3.2,area_appreciation:8.5,competition_analysis:{nearby_properties:15,avg_occupancy:91.2,your_occupancy:92.5}},upcoming_events:[{id:'event_001',type:'lease_expiration',property:'Sunset Apartments',unit:'104',tenant:'Sarah Johnson',date:'2024-08-31',action_required:'Renewal discussion needed'},{id:'event_002',type:'inspection',property:'Garden Complex',unit:'All Units',date:'2024-07-20',action_required:'Annual inspection scheduled'}]};setOwnerData(mockData)};const loadPaymentData = async()=>{try{if(window.ValorPayTechService){const today = new Date();const startDate = timeRange === '30d' ? new Date(today.getTime()- 30 * 24 * 60 * 60 * 1000):timeRange === '90d' ? new Date(today.getTime()- 90 * 24 * 60 * 60 * 1000):timeRange === '1y' ? new Date(today.getTime()- 365 * 24 * 60 * 60 * 1000):new Date(today.getFullYear(),0,1);const history = await window.ValorPayTechService.getPaymentHistory({limit:200,dateRange:`${startDate.toISOString()},${today.toISOString()}`});if(history.payments && ownerData.properties){const propertyIds = selectedProperty === 'all' ? ownerData.properties.map(p => p.id):[selectedProperty];const relevantPayments = history.payments.filter(payment => propertyIds.includes(payment.propertyId)&& payment.status === 'paid');const totalCollected = relevantPayments.reduce((sum,p)=> sum + p.amount,0);const paymentsByProperty ={};relevantPayments.forEach(payment =>{if(!paymentsByProperty[payment.propertyId]){paymentsByProperty[payment.propertyId] ={total:0,count:0,onTime:0,late:0}}paymentsByProperty[payment.propertyId].total += payment.amount;paymentsByProperty[payment.propertyId].count++;const dueDate = new Date(payment.metadata?.due_date);const paidDate = new Date(payment.createdAt);if(paidDate <= dueDate){paymentsByProperty[payment.propertyId].onTime++}else{paymentsByProperty[payment.propertyId].late++}});setOwnerData(prev =>({...prev,payment_metrics:{total_collected:totalCollected,collection_rate:(totalCollected /(prev.financial_summary?.total_monthly_income *(timeRange === '30d' ? 1:timeRange === '90d' ? 3:timeRange === '1y' ? 12:new Date().getMonth()+ 1)))* 100,by_property:paymentsByProperty,recent_payments:relevantPayments.slice(0,10)}}))}}}catch(error){console.error('Error loading payment data:',error)}};const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0}).format(amount)};const formatDate =(dateString)=>{return new Date(dateString).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};const getStatusColor =(status)=>{const colors ={completed:'#10b981',in_progress:'#f59e0b',pending:'#6b7280',overdue:'#ef4444'};return colors[status] || '#6b7280'};const getPriorityColor =(priority)=>{const colors ={high:'#ef4444',medium:'#f59e0b',low:'#10b981'};return colors[priority] || '#6b7280'};const OverviewTab =()=>(<div className="overview-tab">{}<div className="portfolio-summary"><div className="summary-card total-value"><div className="card-icon"><i className="fas fa-building"></i></div><div className="card-content"><div className="card-value">{formatCurrency(ownerData.owner?.portfolio_value)}</div><div className="card-label">Portfolio Value</div><div className="card-change positive">+8.5% YoY</div></div></div><div className="summary-card monthly-income"><div className="card-icon"><i className="fas fa-dollar-sign"></i></div><div className="card-content"><div className="card-value">{formatCurrency(ownerData.financial_summary?.total_monthly_income)}</div><div className="card-label">Monthly Income</div><div className="card-change positive">+3.2% vs last month</div></div></div><div className="summary-card net-income"><div className="card-icon"><i className="fas fa-chart-line"></i></div><div className="card-content"><div className="card-value">{formatCurrency(ownerData.financial_summary?.total_net_income)}</div><div className="card-label">Monthly Net Income</div><div className="card-change positive">ROI:{ownerData.financial_summary?.average_roi}%</div></div></div><div className="summary-card occupancy"><div className="card-icon"><i className="fas fa-home"></i></div><div className="card-content"><div className="card-value">92.5%</div><div className="card-label">Portfolio Occupancy</div><div className="card-change positive">Above market average</div></div></div></div>{}<div className="properties-overview"><h3>Property Performance</h3><div className="properties-grid">{ownerData.properties?.map(property =>(<div key={property.id}className="property-card"><div className="property-header"><h4>{property.name}</h4><div className="occupancy-badge" style={{backgroundColor:property.occupancy_rate >= 95 ? '#10b981':property.occupancy_rate >= 85 ? '#f59e0b':'#ef4444'}}>{property.occupancy_rate}% </div></div><div className="property-address">{property.address}</div><div className="property-metrics"><div className="metric"><span className="metric-label">Monthly Revenue</span><span className="metric-value">{formatCurrency(property.monthly_rent)}</span></div><div className="metric"><span className="metric-label">Net Income</span><span className="metric-value">{formatCurrency(property.net_income)}</span></div><div className="metric"><span className="metric-label">ROI</span><span className="metric-value">{property.roi}%</span></div><div className="metric"><span className="metric-label">Units</span><span className="metric-value">{property.occupied}/{property.units}</span></div></div></div>))}</div></div>{}<div className="recent-activity"><h3>Recent Activity</h3><div className="activity-list">{ownerData.recent_transactions?.slice(0,5).map(transaction =>(<div key={transaction.id}className="activity-item"><div className="activity-icon" style={{backgroundColor:transaction.type === 'rent_collection' ? '#10b981':'#f59e0b'}}><i className={`fas fa-${transaction.type === 'rent_collection' ? 'dollar-sign':'wrench'}`}></i></div><div className="activity-content"><div className="activity-description">{transaction.description}</div><div className="activity-meta"><span>{transaction.property}</span><span>{formatDate(transaction.date)}</span></div></div><div className={`activity-amount ${transaction.amount > 0 ? 'positive':'negative'}`}>{formatCurrency(Math.abs(transaction.amount))}</div></div>))}</div></div></div>);const FinancialsTab =()=>(<div className="financials-tab">{}{ownerData.payment_metrics &&(<div className="payment-summary-section"><h3>Real-Time Payment Status(Valor PayTech)</h3><div className="payment-metrics-grid"><div className="payment-metric"><i className="fas fa-dollar-sign"></i><div><h4>Total Collected</h4><p className="amount">{formatCurrency(ownerData.payment_metrics.total_collected)}</p></div></div><div className="payment-metric"><i className="fas fa-percentage"></i><div><h4>Collection Rate</h4><p className="percentage">{ownerData.payment_metrics.collection_rate?.toFixed(1)}%</p></div></div><div className="payment-metric"><i className="fas fa-clock"></i><div><h4>On-Time Payments</h4><p className="count">{Object.values(ownerData.payment_metrics.by_property ||{}).reduce((sum,p)=> sum + p.onTime,0)}</p></div></div><div className="payment-metric"><i className="fas fa-exclamation-triangle"></i><div><h4>Late Payments</h4><p className="count warning">{Object.values(ownerData.payment_metrics.by_property ||{}).reduce((sum,p)=> sum + p.late,0)}</p></div></div></div></div>)}{}<div className="financial-summary"><h3>Financial Summary</h3><div className="financial-grid"><div className="financial-section"><h4>Income</h4><div className="financial-items"><div className="financial-item"><span>Gross Rental Income</span><span>{formatCurrency(ownerData.financial_summary?.total_monthly_income)}</span></div><div className="financial-item"><span>Other Income</span><span>{formatCurrency(1200)}</span></div><div className="financial-item total"><span>Total Income</span><span>{formatCurrency((ownerData.financial_summary?.total_monthly_income || 0)+ 1200)}</span></div></div></div><div className="financial-section"><h4>Expenses</h4><div className="financial-items"><div className="financial-item"><span>Management Fees</span><span>{formatCurrency(ownerData.financial_summary?.management_fees)}</span></div><div className="financial-item"><span>Maintenance & Repairs</span><span>{formatCurrency(3200)}</span></div><div className="financial-item"><span>Insurance</span><span>{formatCurrency(1800)}</span></div><div className="financial-item"><span>Property Taxes</span><span>{formatCurrency(4200)}</span></div><div className="financial-item"><span>Utilities</span><span>{formatCurrency(2100)}</span></div><div className="financial-item"><span>Other Expenses</span><span>{formatCurrency(1500)}</span></div><div className="financial-item total"><span>Total Expenses</span><span>{formatCurrency(ownerData.financial_summary?.total_monthly_expenses)}</span></div></div></div></div><div className="net-income-summary"><div className="net-income-card"><h4>Monthly Net Operating Income</h4><div className="net-amount">{formatCurrency(ownerData.financial_summary?.total_net_income)}</div><div className="net-margin">Profit Margin:{Math.round((ownerData.financial_summary?.total_net_income / ownerData.financial_summary?.total_monthly_income)* 100)}%</div></div><div className="ytd-summary"><h4>Year-to-Date Performance</h4><div className="ytd-metrics"><div className="ytd-metric"><span>YTD Income</span><span>{formatCurrency(ownerData.financial_summary?.ytd_income)}</span></div><div className="ytd-metric"><span>YTD Expenses</span><span>{formatCurrency(ownerData.financial_summary?.ytd_expenses)}</span></div><div className="ytd-metric net"><span>YTD Net Income</span><span>{formatCurrency(ownerData.financial_summary?.ytd_net)}</span></div></div></div></div></div>{}<div className="transaction-history"><h3>Transaction History</h3><div className="transactions-table"><table><thead><tr><th>Date</th><th>Description</th><th>Property</th><th>Amount</th><th>Type</th></tr></thead><tbody>{ownerData.recent_transactions?.map(transaction =>(<tr key={transaction.id}><td>{formatDate(transaction.date)}</td><td>{transaction.description}</td><td>{transaction.property}</td><td className={transaction.amount > 0 ? 'positive':'negative'}>{formatCurrency(Math.abs(transaction.amount))}</td><td><span className={`type-badge ${transaction.type}`}>{transaction.type.replace('_',' ').toUpperCase()}</span></td></tr>))}</tbody></table></div></div></div>);const MaintenanceTab =()=>{const liveRequests = maintenanceStore?.actions?.getRequests()|| [];const analytics = maintenanceStore?.actions?.getAnalytics()||{};const activeRequests = liveRequests.filter(req => req.status !== 'completed' && req.status !== 'cancelled');const completedThisMonth = liveRequests.filter(req =>{const created = new Date(req.createdAt);const now = new Date();return req.status === 'completed' && created.getMonth()=== now.getMonth()&& created.getFullYear()=== now.getFullYear()});const totalMonthlyCost = completedThisMonth.reduce((sum,req)=> sum +(req.actualCost || req.estimatedCost || 0),0);return(<div className="maintenance-tab"><div className="maintenance-summary"><h3>Maintenance Overview</h3><div className="maintenance-stats"><div className="stat-card"><div className="stat-value">{activeRequests.length}</div><div className="stat-label">Active Requests</div></div><div className="stat-card"><div className="stat-value">{completedThisMonth.length}</div><div className="stat-label">Completed This Month</div></div><div className="stat-card"><div className="stat-value">{formatCurrency(totalMonthlyCost)}</div><div className="stat-label">Monthly Maintenance Cost</div></div><div className="stat-card"><div className="stat-value">{analytics.avgResolutionTime || '2.1'}</div><div className="stat-label">Avg Days to Complete</div></div></div></div><div className="maintenance-requests"><h3>Recent Maintenance Requests</h3><div className="requests-list">{liveRequests.slice(0,5).map(request =>(<div key={request.id}className="request-card"><div className="request-header"><div className="request-info"><h4>{request.property}- Unit{request.unit}</h4><p>{request.title || request.description}</p></div><div className="request-badges"><span className="status-badge" style={{backgroundColor:getStatusColor(request.status)}}>{request.status.replace('_',' ').toUpperCase()}</span><span className="priority-badge" style={{backgroundColor:getPriorityColor(request.priority)}}>{request.priority.toUpperCase()}</span></div></div><div className="request-details"><div className="detail-item"><span>Created:</span><span>{formatDate(request.createdAt)}</span></div><div className="detail-item"><span>Estimated Cost:</span><span>{formatCurrency(request.estimatedCost)}</span></div>{request.completedAt &&(<div className="detail-item"><span>Completed:</span><span>{formatDate(request.completedAt)}</span></div>)}{request.actualCost &&(<div className="detail-item"><span>Actual Cost:</span><span>{formatCurrency(request.actualCost)}</span></div>)}</div></div>))}</div></div></div>);const MarketInsightsTab =()=>(<div className="market-insights-tab"><div className="market-overview"><h3>Market Position</h3><div className="market-cards"><div className="market-card"><div className="market-header"><h4>Rental Rates</h4><div className="market-status above-market">Above Market</div></div><div className="market-comparison"><div className="comparison-item"><span>Your Average Rent</span><span className="value">{formatCurrency(ownerData.market_insights?.your_avg_rent)}</span></div><div className="comparison-item"><span>Market Average</span><span className="value">{formatCurrency(ownerData.market_insights?.avg_market_rent)}</span></div><div className="comparison-item premium"><span>Premium</span><span className="value">+{formatCurrency(ownerData.market_insights?.your_avg_rent - ownerData.market_insights?.avg_market_rent)}</span></div></div></div><div className="market-card"><div className="market-header"><h4>Occupancy Performance</h4><div className="market-status above-market">Outperforming</div></div><div className="market-comparison"><div className="comparison-item"><span>Your Occupancy</span><span className="value">92.5%</span></div><div className="comparison-item"><span>Market Average</span><span className="value">{ownerData.market_insights?.competition_analysis?.avg_occupancy}%</span></div><div className="comparison-item premium"><span>Advantage</span><span className="value">+{(92.5 - ownerData.market_insights?.competition_analysis?.avg_occupancy).toFixed(1)}%</span></div></div></div><div className="market-card"><div className="market-header"><h4>Growth Potential</h4><div className="market-status positive">Strong</div></div><div className="market-comparison"><div className="comparison-item"><span>Rent Growth Potential</span><span className="value">+{ownerData.market_insights?.rent_growth_potential}%</span></div><div className="comparison-item"><span>Area Appreciation</span><span className="value">+{ownerData.market_insights?.area_appreciation}%</span></div><div className="comparison-item"><span>Nearby Properties</span><span className="value">{ownerData.market_insights?.competition_analysis?.nearby_properties}</span></div></div></div></div></div><div className="ai-recommendations"><h3>AI-Powered Recommendations</h3><div className="recommendations-list"><div className="recommendation-card high-impact"><div className="recommendation-header"><i className="fas fa-lightbulb"></i><div><h4>Rent Optimization Opportunity</h4><span className="impact-badge">High Impact</span></div></div><p>Based on market analysis,you can safely increase rents by 3-5% on lease renewals. This could generate an additional <strong>{formatCurrency(1890)}/month</strong>.</p><div className="recommendation-actions"><button className="btn btn-primary">View Details</button><button className="btn btn-secondary">Schedule Review</button></div></div><div className="recommendation-card medium-impact"><div className="recommendation-header"><i className="fas fa-tools"></i><div><h4>Preventive Maintenance Schedule</h4><span className="impact-badge">Medium Impact</span></div></div><p>AI predicts HVAC maintenance needs for Sunset Apartments within 30 days. Scheduling now could save <strong>{formatCurrency(1200)}</strong> in emergency repairs.</p><div className="recommendation-actions"><button className="btn btn-primary">Schedule Maintenance</button><button className="btn btn-secondary">Learn More</button></div></div></div></div></div>);return(<div className="owner-portal">{}<div className="owner-portal-header"><div className="header-left"><h1>Owner Portal</h1><p>Welcome back,{ownerData.owner?.name}</p></div><div className="header-controls"><select value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}className="property-selector" ><option value="all">All Properties</option>{ownerData.properties?.map(property =>(<option key={property.id}value={property.id}>{property.name}</option>))}</select><select value={timeRange}onChange={(e)=> setTimeRange(e.target.value)}className="time-selector" ><option value="30d">Last 30 Days</option><option value="90d">Last 90 Days</option><option value="1y">Last Year</option><option value="ytd">Year to Date</option></select></div></div>{}<div className="portal-tabs">{['overview','financials','maintenance','market-insights'].map(tab =>(<button key={tab}className={`tab ${activeTab === tab ? 'active':''}`}onClick={()=> setActiveTab(tab)}><i className={`fas fa-${tab === 'overview' ? 'tachometer-alt':tab === 'financials' ? 'chart-line':tab === 'maintenance' ? 'tools':'market'}`}></i>{tab.replace('-',' ').toUpperCase()}</button>))}</div>{}<div className="portal-content">{activeTab === 'overview' && <OverviewTab />}{activeTab === 'financials' && <FinancialsTab />}{activeTab === 'maintenance' && <MaintenanceTab />}{activeTab === 'market-insights' && <MarketInsightsTab />}</div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.OwnerPortal = OwnerPortal;

// TenantMaintenanceChat.jsx
const TenantMaintenanceChat =({property,unit,tenant,onRequestCreated})=>{const [isListening,setIsListening] = React.useState(false);const [isSpeaking,setIsSpeaking] = React.useState(false);const [conversation,setConversation] = React.useState([]);const [currentTranscript,setCurrentTranscript] = React.useState('');const [maintenanceContext,setMaintenanceContext] = React.useState({category:null,severity:null,details:{},photos:[],stage:'greeting'});const [voiceEnabled,setVoiceEnabled] = React.useState(()=>{return window.silenceMode !== true});const recognitionRef = React.useRef(null);const audioContextRef = React.useRef(null);const voiceService = React.useMemo(()=>{return new(window.ElevenLabsVoiceService || window.MockElevenLabsVoiceService)()},[]);const visionService = React.useMemo(()=>{return new(window.GeminiVisionService || window.MockGeminiVisionService)()},[]);React.useEffect(()=>{if('webkitSpeechRecognition' in window || 'SpeechRecognition' in window){const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;const recognition = new SpeechRecognition();recognition.continuous = true;recognition.interimResults = true;recognition.lang = 'en-US';recognitionRef.current = recognition;recognition.onresult = handleSpeechResult;recognition.onerror = handleSpeechError;recognition.onend =()=> setIsListening(false)}audioContextRef.current = new(window.AudioContext || window.webkitAudioContext)();return()=>{if(recognitionRef.current){recognitionRef.current.stop()}}},[]);React.useEffect(()=>{const handleSilenceModeChange =(event)=>{setVoiceEnabled(!event.detail);if(event.detail && isListening){stopListening()}};window.addEventListener('silenceModeChanged',handleSilenceModeChange);return()=> window.removeEventListener('silenceModeChanged',handleSilenceModeChange)},[isListening]);React.useEffect(()=>{startConversation()},[]);const startConversation = async()=>{const greeting = `Hello ${tenant?.first_name || 'there'}! I'm your AI maintenance assistant. How can I help you today? You can tell me about any maintenance issues you're experiencing.`;addMessage('ai',greeting);if(voiceEnabled){await speak(greeting)}};const handleSpeechResult =(event)=>{const current = event.resultIndex;const transcript = event.results[current][0].transcript;if(event.results[current].isFinal){setCurrentTranscript('');processUserInput(transcript)}else{setCurrentTranscript(transcript)}};const handleSpeechError =(event)=>{console.error('Speech recognition error:',event.error);setIsListening(false);if(event.error === 'no-speech'){addMessage('ai',"I didn't hear anything. Please try speaking again.")}};const processUserInput = async(input)=>{addMessage('user',input);setIsListening(false);window.ConversationLogService?.logConversation({type:'voice',participantId:tenant?.id || 'anonymous',participantName:tenant?.name || 'Tenant',participantType:'tenant',propertyName:property?.name || 'Unknown Property',unitNumber:unit?.number || '',content:input,channel:'maintenance_chat',isInbound:true,metadata:{voiceTranscription:true,maintenanceStage:maintenanceContext.stage,category:maintenanceContext.category,severity:maintenanceContext.severity}});const response = await analyzeInput(input);if(response.message){addMessage('ai',response.message);window.ConversationLogService?.logAIConversation({conversationType:'voice',userId:tenant?.id || 'anonymous',userName:tenant?.name || 'Tenant',userType:'tenant',propertyContext:{propertyId:property?.id,propertyName:property?.name,unitNumber:unit?.number},aiModel:'maintenance-assistant',prompt:input,response:response.message,metadata:{intent:'maintenance_request',entities:{category:maintenanceContext.category,severity:maintenanceContext.severity,stage:maintenanceContext.stage},confidence:response.confidence || 0.9},conversationContext:maintenanceContext});if(voiceEnabled){await speak(response.message)}}if(response.updateContext){setMaintenanceContext(prev =>({...prev,...response.updateContext}))}if(response.continueListening && voiceEnabled){setTimeout(()=> startListening(),1000)}};const analyzeInput = async(input)=>{const lowerInput = input.toLowerCase();const{stage}= maintenanceContext;if(stage === 'greeting' || stage === 'category'){if(lowerInput.includes('leak')|| lowerInput.includes('water')|| lowerInput.includes('pipe')){return{message:"I understand you have a plumbing issue. Can you tell me more? Where is the leak located and how severe is it?",updateContext:{category:'plumbing',stage:'details'},continueListening:true}}else if(lowerInput.includes('electric')|| lowerInput.includes('outlet')|| lowerInput.includes('light')){return{message:"I see you're having an electrical issue. For your safety,can you describe what's happening? Are there any sparks,burning smells,or power outages?",updateContext:{category:'electrical',stage:'details'},continueListening:true}}else if(lowerInput.includes('heat')|| lowerInput.includes('cool')|| lowerInput.includes('ac')|| lowerInput.includes('temperature')){return{message:"I understand you're having HVAC issues. Is your unit not cooling,not heating,or making unusual noises?",updateContext:{category:'hvac',stage:'details'},continueListening:true}}else if(lowerInput.includes('appliance')|| lowerInput.includes('dishwasher')|| lowerInput.includes('fridge')){return{message:"I see you have an appliance issue. Which appliance is having problems and what's happening with it?",updateContext:{category:'appliance',stage:'details'},continueListening:true}}}if(stage === 'details'){let severity = 'medium';let urgent = false;if(lowerInput.includes('emergency')|| lowerInput.includes('flooding')|| lowerInput.includes('fire')|| lowerInput.includes('danger')){severity = 'emergency';urgent = true}else if(lowerInput.includes('bad')|| lowerInput.includes('severe')|| lowerInput.includes('major')){severity = 'high'}else if(lowerInput.includes('minor')|| lowerInput.includes('small')){severity = 'low'}if(urgent){return{message:"This sounds like an emergency! I'm immediately alerting our maintenance team. For your safety,please stay away from the affected area. Can you send me a photo of the issue?",updateContext:{severity,details:{description:input},stage:'photos'},continueListening:false}}return{message:"Thank you for the details. Would you be able to take a photo of the issue? This will help our team prepare the right tools and parts.",updateContext:{severity,details:{description:input},stage:'photos'},continueListening:true}}if(stage === 'photos'){if(lowerInput.includes('yes')|| lowerInput.includes('sure')|| lowerInput.includes('okay')){return{message:"Great! Please use the camera button below to take or upload photos. I'll analyze them instantly to better understand the issue.",updateContext:{stage:'awaiting_photos'},continueListening:false}}else if(lowerInput.includes('no')|| lowerInput.includes('can\'t')){return{message:"No problem! I'll create the maintenance request with the information you've provided. Our team will assess the issue when they arrive. Is there anything else you'd like to add?",updateContext:{stage:'additional_info'},continueListening:true}}}if(stage === 'additional_info'){if(lowerInput.includes('no')|| lowerInput.includes('that\'s all')){return await createMaintenanceRequest()}else{return{message:"I've noted that additional information. Let me create your maintenance request now.",updateContext:{details:{...maintenanceContext.details,additionalNotes:input}},continueListening:false}}}return{message:"I'm not sure I understood that. Could you please describe your maintenance issue? For example,you can say 'My kitchen sink is leaking' or 'The AC is not cooling'.",continueListening:true}};const createMaintenanceRequest = async()=>{const request ={property,unit,tenant,category:maintenanceContext.category,severity:maintenanceContext.severity,description:maintenanceContext.details.description,additionalNotes:maintenanceContext.details.additionalNotes,photos:maintenanceContext.photos,conversation:conversation,created:new Date().toISOString(),status:'new',source:'voice_assistant'};if(onRequestCreated){onRequestCreated(request)}const confirmationMessage = `Perfect! I've created maintenance request ${generateTicketNumber()}. ${maintenanceContext.severity === 'emergency' ? 'Our emergency team has been notified and will contact you within 30 minutes.':'Our team will review this and contact you within 2-4 hours.'}You'll receive updates via text and email. Is there anything else I can help you with?`;return{message:confirmationMessage,updateContext:{stage:'complete'},continueListening:false}};const generateTicketNumber =()=>{return `MNT-${new Date().getFullYear()}-${String(Math.floor(Math.random()* 10000)).padStart(4,'0')}`};const startListening =()=>{if(recognitionRef.current && !isListening){setIsListening(true);recognitionRef.current.start()}};const stopListening =()=>{if(recognitionRef.current && isListening){setIsListening(false);recognitionRef.current.stop()}};const speak = async(text)=>{setIsSpeaking(true);try{const result = await voiceService.generateMaintenanceFeedback(text);if(result.success){await voiceService.playAudio(result.audioUrl,{onEnd:()=> setIsSpeaking(false)})}else if(result.fallback && result.speak){const controls = result.speak();setTimeout(()=> setIsSpeaking(false),text.length * 50)}}catch(error){console.error('Error speaking:',error);setIsSpeaking(false)}};const addMessage =(type,content)=>{setConversation(prev => [...prev,{type,content,timestamp:new Date().toISOString()}])};const handlePhotoAnalysis = async(photoData)=>{const{analysis}= photoData;setMaintenanceContext(prev =>({...prev,photos:[...prev.photos,photoData],severity:analysis.severity === 'Emergency' ? 'emergency':analysis.severity === 'High' ? 'high':prev.severity,details:{...prev.details,aiAnalysis:analysis}}));const message = `Thank you for the photo. Based on my analysis,${analysis.issue}. ${analysis.safetyHazard ? 'This appears to be a safety hazard. ':''}I'm assigning this as ${analysis.severity}priority. The estimated repair cost is $${analysis.costRange.min}-$${analysis.costRange.max}. Shall I proceed with creating the maintenance request?`;addMessage('ai',message);if(voiceEnabled){await speak(message)}setMaintenanceContext(prev =>({...prev,stage:'confirmation'}))};const handleTextSubmit =(text)=>{if(text.trim()){processUserInput(text)}};return React.createElement('div',{className:'tenant-maintenance-chat'},[ React.createElement('div',{key:'header',className:'chat-header'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-tools'}),' Maintenance Assistant' ]),React.createElement('div',{key:'controls',className:'voice-controls'},[ React.createElement('label',{key:'toggle',className:'voice-toggle'},[ React.createElement('input',{key:'checkbox',type:'checkbox',checked:voiceEnabled,onChange:(e)=>{setVoiceEnabled(e.target.checked);if(!e.target.checked && isListening){stopListening()}}}),React.createElement('span',{key:'label'},'Voice Mode')])])]),React.createElement('div',{key:'conversation',className:'conversation-area'},conversation.map((msg,idx)=> React.createElement('div',{key:idx,className:`message ${msg.type}`},[ React.createElement('div',{key:'avatar',className:'message-avatar'},React.createElement('i',{className:`fas fa-${msg.type === 'user' ? 'user':'robot'}`})),React.createElement('div',{key:'content',className:'message-content'},[ React.createElement('div',{key:'text',className:'message-text'},msg.content),React.createElement('div',{key:'time',className:'message-time'},new Date(msg.timestamp).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'}))])])),currentTranscript && React.createElement('div',{key:'transcript',className:'message user transcribing'},[ React.createElement('div',{key:'avatar',className:'message-avatar'},React.createElement('i',{className:'fas fa-user'})),React.createElement('div',{key:'content',className:'message-content'},[ React.createElement('div',{key:'text',className:'message-text'},currentTranscript),React.createElement('div',{key:'indicator',className:'typing-indicator'},[ React.createElement('span',{key:'s1'}),React.createElement('span',{key:'s2'}),React.createElement('span',{key:'s3'})])])])),voiceEnabled && React.createElement('div',{key:'voice-input',className:'voice-input-section'},[ React.createElement('button',{key:'mic',className:`voice-button ${isListening ? 'listening':''}${isSpeaking ? 'disabled':''}`,onClick:isListening ? stopListening:startListening,disabled:isSpeaking},[ React.createElement('i',{key:'icon',className:`fas fa-${isListening ? 'stop':'microphone'}`}),React.createElement('span',{key:'text'},isListening ? 'Stop':'Hold to speak')]),isListening && React.createElement('div',{key:'wave',className:'voice-wave'},[ React.createElement('span',{key:'w1'}),React.createElement('span',{key:'w2'}),React.createElement('span',{key:'w3'}),React.createElement('span',{key:'w4'}),React.createElement('span',{key:'w5'})])]),maintenanceContext.stage === 'awaiting_photos' && React.createElement(window.AppModules.MaintenancePhotoAnalyzer,{key:'photo-analyzer',category:maintenanceContext.category,property,unit,onAnalysisComplete:handlePhotoAnalysis}),React.createElement('div',{key:'text-input',className:'text-input-section'},[ React.createElement('input',{key:'input',type:'text',placeholder:voiceEnabled ? 'Or type your message...':'Type your message...',onKeyPress:(e)=>{if(e.key === 'Enter'){handleTextSubmit(e.target.value);e.target.value = ''}}}),React.createElement('button',{key:'send',className:'send-button',onClick:(e)=>{const input = e.target.previousSibling;handleTextSubmit(input.value);input.value = ''}},React.createElement('i',{className:'fas fa-paper-plane'}))]),React.createElement('div',{key:'quick-actions',className:'quick-actions'},['Leak','No Heat','No AC','Electrical Issue'].map(action => React.createElement('button',{key:action,className:'quick-action',onClick:()=> processUserInput(`I have a ${action.toLowerCase()}`)},action)))])};window.AppModules = window.AppModules ||{};window.AppModules.TenantMaintenanceChat = TenantMaintenanceChat;

// Sidebar.jsx
const Sidebar =({menuItems,activePage,onPageChange})=>{const [expandedSections,setExpandedSections] = React.useState({});const toggleSection =(sectionId)=>{setExpandedSections(prev =>({...prev,[sectionId]:!prev[sectionId]}))};const renderMenuItem =(item,parentId = '')=>{const itemId = parentId ? `${parentId}-${item.id}`:item.id;const isActive = activePage === itemId;const hasChildren = item.children && item.children.length > 0;const isExpanded = expandedSections[itemId];return(<div key={itemId}className="sidebar-item"><div className={`sidebar-link ${isActive ? 'active':''}${hasChildren ? 'has-children':''}`}onClick={()=>{if(hasChildren){toggleSection(itemId)}else{onPageChange(itemId)}}}><div className="sidebar-link-content">{item.icon && <span className="sidebar-icon">{item.icon}</span>}<span className="sidebar-label">{item.label}</span></div>{hasChildren &&(<svg className={`sidebar-chevron ${isExpanded ? 'expanded':''}`}width="16" height="16" viewBox="0 0 16 16" fill="none" ><path d="M6 4L10 8L6 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" /></svg>)}</div>{hasChildren && isExpanded &&(<div className="sidebar-submenu">{item.children.map(child => renderMenuItem(child,itemId))}</div>)}</div>)};return(<aside className="sidebar"><div className="sidebar-header"><div className="sidebar-logo"><svg width="32" height="32" viewBox="0 0 48 48" fill="none"><rect width="48" height="48" rx="12" fill="var(--color-brand)" /><path d="M24 12L12 20V36H20V28H28V36H36V20L24 12Z" fill="white" /></svg><span className="sidebar-title">Property Pro</span></div></div><nav className="sidebar-nav">{menuItems.map(item => renderMenuItem(item))}</nav></aside>)};

// UnitsWorldClass.jsx
const UnitsWorldClass =()=>{const [units,setUnits] = React.useState([]);const [properties,setProperties] = React.useState([]);const [loading,setLoading] = React.useState(true);const [selectedProperty,setSelectedProperty] = React.useState('all');const [viewMode,setViewMode] = React.useState('grid');const [statusFilter,setStatusFilter] = React.useState('all');const [showAddUnit,setShowAddUnit] = React.useState(false);React.useEffect(()=>{loadData()},[selectedProperty,statusFilter]);const loadData = async()=>{try{const [propertiesResponse,unitsResponse] = await Promise.all([ window.ApiService.get('/properties'),window.ApiService.get('/units')]);const propertiesData = propertiesResponse?.results || propertiesResponse || [];const unitsData = unitsResponse?.results || unitsResponse || [];setProperties(propertiesData);setUnits(unitsData);if(window.AppState){window.AppState.setState('properties',propertiesData);window.AppState.setState('units',unitsData)}}catch(error){console.error('Failed to load data:',error);if(window.Toast){window.Toast.error('Failed to load data')}}finally{setLoading(false)}};const stats = React.useMemo(()=>{let filteredUnits = units;if(selectedProperty !== 'all'){filteredUnits = filteredUnits.filter(unit => unit.property_id === selectedProperty)}if(statusFilter !== 'all'){filteredUnits = filteredUnits.filter(unit => unit.status === statusFilter)}const total = filteredUnits.length;const available = filteredUnits.filter(u => u.status === 'available').length;const occupied = filteredUnits.filter(u => u.status === 'occupied').length;const maintenance = filteredUnits.filter(u => u.status === 'maintenance').length;const vacant = available;const monthlyRevenue = filteredUnits .filter(u => u.status === 'occupied').reduce((sum,u)=> sum +(u.market_rent || 0),0);const potentialRevenue = filteredUnits .reduce((sum,u)=> sum +(u.market_rent || 0),0);const lostRevenue = potentialRevenue - monthlyRevenue;return{total,vacant,occupied,maintenance,available,occupancyRate:total > 0 ? Math.round((occupied / total)* 100):0,monthlyRevenue,potentialRevenue,lostRevenue,filteredUnits}},[units,selectedProperty,statusFilter]);return(<div className="units-page-world-class"><div className="page-container">{}<div className="insights-bar">{stats.vacant > 0 &&(<div className="insight-card urgent"><div className="insight-icon"><i className="fas fa-door-open"></i></div><div className="insight-content"><h4>{stats.vacant}Vacant Units</h4><p>Lost revenue:${stats.lostRevenue.toLocaleString()}/mo</p></div><button className="insight-action"> List Now <i className="fas fa-arrow-right"></i></button></div>)}{stats.maintenance > 0 &&(<div className="insight-card warning"><div className="insight-icon"><i className="fas fa-tools"></i></div><div className="insight-content"><h4>{stats.maintenance}Under Maintenance</h4><p>Complete repairs to list</p></div><button className="insight-action"> View Status <i className="fas fa-arrow-right"></i></button></div>)}<div className="insight-card success"><div className="insight-icon"><i className="fas fa-chart-line"></i></div><div className="insight-content"><h4>{stats.occupancyRate}% Occupancy</h4><p>Revenue:${stats.monthlyRevenue.toLocaleString()}/mo</p></div><button className="insight-action"> Optimize <i className="fas fa-arrow-right"></i></button></div></div>{}<div className="page-header-clean"><div className="header-left"><h1 className="page-title">Units</h1><p className="page-subtitle"> Manage{stats.total}units across your properties </p><div className="header-stats"><div className="stat-item"><span className="stat-value">{stats.occupied}</span><span className="stat-label">Occupied</span></div><div className="stat-item"><span className="stat-value">{stats.vacant}</span><span className="stat-label">Vacant</span></div><div className="stat-item"><span className="stat-value">${(stats.monthlyRevenue / 1000).toFixed(1)}k</span><span className="stat-label">Monthly</span></div></div></div><div className="header-actions"><button className="btn-secondary"><i className="fas fa-file-export"></i> Export </button><button className="btn-primary" onClick={()=> setShowAddUnit(true)}><i className="fas fa-plus"></i> Add Unit </button></div></div>{}<div className="filters-section"><div className="filter-group"><label>Property</label><select className="filter-select" value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}><option value="all">All Properties</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}({prop.total_units || 0}units)</option>))}</select></div><div className="status-pills"><button className={`status-pill ${statusFilter === 'all' ? 'active':''}`}onClick={()=> setStatusFilter('all')}> All Units <span className="pill-count">{stats.total}</span></button><button className={`status-pill vacant ${statusFilter === 'available' ? 'active':''}`}onClick={()=> setStatusFilter('available')}><span className="status-dot vacant"></span> Available <span className="pill-count">{stats.available}</span></button><button className={`status-pill occupied ${statusFilter === 'occupied' ? 'active':''}`}onClick={()=> setStatusFilter('occupied')}><span className="status-dot occupied"></span> Occupied <span className="pill-count">{stats.occupied}</span></button><button className={`status-pill maintenance ${statusFilter === 'maintenance' ? 'active':''}`}onClick={()=> setStatusFilter('maintenance')}><span className="status-dot maintenance"></span> Maintenance <span className="pill-count">{stats.maintenance}</span></button></div><div className="view-controls"><button className={`view-btn ${viewMode === 'grid' ? 'active':''}`}onClick={()=> setViewMode('grid')}><i className="fas fa-th-large"></i></button><button className={`view-btn ${viewMode === 'list' ? 'active':''}`}onClick={()=> setViewMode('list')}><i className="fas fa-list"></i></button></div></div>{}{loading ?(<div className="loading-container"><div className="loading-spinner"></div><p>Loading units...</p></div>):stats.filteredUnits.length === 0 ?(<div className="empty-state-beautiful"><div className="empty-icon"><i className="fas fa-door-open"></i></div><h3>No units found</h3><p>Add your first unit to get started managing your properties</p><button className="btn-primary" onClick={()=> setShowAddUnit(true)}><i className="fas fa-plus"></i> Add Your First Unit </button></div>):(<div className={`units-container ${viewMode}`}>{viewMode === 'grid' ?(<div className="units-grid">{stats.filteredUnits.map(unit =>(<UnitCardBeautiful key={unit.id}unit={unit}properties={properties}/>))}</div>):(<UnitsListView units={stats.filteredUnits}properties={properties}/>)}</div>)}</div>{}{showAddUnit &&(<AddUnitModal properties={properties}onClose={()=> setShowAddUnit(false)}onSave={()=>{setShowAddUnit(false);loadData()}}/>)}</div>)};const UnitCardBeautiful =({unit,properties})=>{const statusColors ={available:'#10b981',occupied:'#3b82f6',maintenance:'#f59e0b',reserved:'#8b5cf6'};const getPropertyName =()=>{const property = properties.find(p => p.id === unit.property_id);return property ? property.name:'Unknown Property'};const getStatusLabel =(status)=>{switch(status){case 'available':return 'AVAILABLE';case 'occupied':return 'OCCUPIED';case 'maintenance':return 'MAINTENANCE';case 'reserved':return 'RESERVED';default:return status?.toUpperCase()|| 'UNKNOWN'}};return(<div className={`unit-card ${unit.status}`}><div className="unit-status-indicator" style={{backgroundColor:statusColors[unit.status] || '#6b7280'}}>{getStatusLabel(unit.status)}</div><div className="unit-header"><h3>Unit{unit.unit_number}</h3><p className="unit-property">{getPropertyName()}</p></div><div className="unit-specs"><div className="spec"><i className="fas fa-bed"></i><span>{unit.bedrooms || 0}Bed</span></div><div className="spec"><i className="fas fa-bath"></i><span>{unit.bathrooms || 0}Bath</span></div><div className="spec"><i className="fas fa-ruler-combined"></i><span>{unit.square_feet || 0}sqft</span></div></div>{unit.status === 'occupied' && unit.tenant_name &&(<div className="tenant-info"><div className="tenant-avatar">{unit.tenant_name.split(' ').map(n => n[0]).join('')}</div><div><p className="tenant-name">{unit.tenant_name}</p><p className="lease-end">Lease ends{unit.lease_end_date || 'N/A'}</p></div></div>)}{unit.status === 'available' &&(<div className="vacancy-info"><i className="fas fa-clock"></i><span>Ready to rent</span></div>)}<div className="unit-footer"><div className="rent-info"><span className="rent-amount">${unit.market_rent || 0}</span><span className="rent-period">/month</span></div><div className="unit-actions"><button className="action-btn"><i className="fas fa-eye"></i></button><button className="action-btn"><i className="fas fa-edit"></i></button></div></div></div>)};const UnitsListView =({units,properties})=>{const getPropertyName =(propertyId)=>{const property = properties.find(p => p.id === propertyId);return property ? property.name:'Unknown Property'};return(<div className="units-list-view"><div className="list-header"><div className="list-col">Unit</div><div className="list-col">Property</div><div className="list-col">Type</div><div className="list-col">Status</div><div className="list-col">Rent</div><div className="list-col">Actions</div></div>{units.map(unit =>(<div key={unit.id}className="list-row"><div className="list-col"><strong>#{unit.unit_number}</strong><br /><small>{unit.bedrooms}bd •{unit.bathrooms}ba •{unit.square_feet}sqft</small></div><div className="list-col">{getPropertyName(unit.property_id)}</div><div className="list-col">{unit.unit_type?.replace('_',' ')|| 'N/A'}</div><div className="list-col"><span className={`status-badge ${unit.status}`}>{unit.status?.toUpperCase()|| 'UNKNOWN'}</span></div><div className="list-col"><strong>${unit.market_rent || 0}</strong>/mo </div><div className="list-col"><button className="action-btn-small"><i className="fas fa-eye"></i></button><button className="action-btn-small"><i className="fas fa-edit"></i></button></div></div>))}</div>)};const AddUnitModal =({properties,onClose,onSave})=>{const [formData,setFormData] = React.useState({unit_number:'',property_id:'',unit_type:'one_bedroom',bedrooms:1,bathrooms:1,square_feet:'',market_rent:'',status:'available'});const handleSubmit = async(e)=>{e.preventDefault();try{await window.ApiService.post('/units',formData);onSave()}catch(error){console.error('Error adding unit:',error)}};return(<div className="modal-overlay" onClick={onClose}><div className="modal-content" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>Add New Unit</h2><button className="modal-close" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-form"><div className="form-row"><div className="form-group"><label>Unit Number</label><input type="text" value={formData.unit_number}onChange={e => setFormData({...formData,unit_number:e.target.value})}required /></div><div className="form-group"><label>Property</label><select value={formData.property_id}onChange={e => setFormData({...formData,property_id:e.target.value})}required ><option value="">Select Property</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}</option>))}</select></div></div><div className="form-row"><div className="form-group"><label>Bedrooms</label><input type="number" value={formData.bedrooms}onChange={e => setFormData({...formData,bedrooms:parseInt(e.target.value)})}min="0" /></div><div className="form-group"><label>Bathrooms</label><input type="number" step="0.5" value={formData.bathrooms}onChange={e => setFormData({...formData,bathrooms:parseFloat(e.target.value)})}min="0" /></div><div className="form-group"><label>Square Feet</label><input type="number" value={formData.square_feet}onChange={e => setFormData({...formData,square_feet:e.target.value})}/></div></div><div className="form-row"><div className="form-group"><label>Market Rent</label><input type="number" value={formData.market_rent}onChange={e => setFormData({...formData,market_rent:e.target.value})}required /></div><div className="form-group"><label>Status</label><select value={formData.status}onChange={e => setFormData({...formData,status:e.target.value})}><option value="available">Available</option><option value="occupied">Occupied</option><option value="maintenance">Maintenance</option><option value="reserved">Reserved</option></select></div></div><div className="modal-actions"><button type="button" className="btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn-primary"> Add Unit </button></div></form></div></div>)};

// Dashboard.jsx
const Dashboard =({user})=>{const [editMode,setEditMode] = React.useState(false);const [widgets,setWidgets] = React.useState([]);const [loading,setLoading] = React.useState(true);const [showAddWidget,setShowAddWidget] = React.useState(false);const [dashboardId,setDashboardId] = React.useState(null);const [error,setError] = React.useState(null);const GRID_COLS = 4;const ROW_HEIGHT = 80;const GRID_MARGIN = [16,16];React.useEffect(()=>{loadDashboard();return()=>{}},[]);const loadDashboard = async()=>{try{if(!window.apiClient || !window.apiClient.request){throw new Error('API client not available')}const dashboardsRes = await window.apiClient.request('/dashboard/layouts');let dashboard = dashboardsRes.dashboards.find(d => d.is_default);if(!dashboard && dashboardsRes.dashboards.length > 0){dashboard = dashboardsRes.dashboards[0]}if(!dashboard){const newDashboard = await window.apiClient.request('/dashboard/layouts',{method:'POST',body:{name:'My Dashboard',is_default:true}});dashboard = newDashboard}setDashboardId(dashboard.id);const fullDashboard = await window.apiClient.request(`/dashboard/layouts/${dashboard.id}`);setWidgets(fullDashboard.widgets || [])}catch(err){console.error('Failed to load dashboard,using mock:',err);setError(err.message || 'Failed to load dashboard');if(!dashboardId){setDashboardId('mock_dashboard_1')}const mockWidgets = [{id:'widget_1',widget_type:'occupancy',position:{x:0,y:0,w:2,h:1},config:{},refresh_interval:300},{id:'widget_2',widget_type:'revenue',position:{x:2,y:0,w:2,h:1},config:{},refresh_interval:300},{id:'widget_3',widget_type:'maintenance',position:{x:0,y:1,w:1,h:1},config:{},refresh_interval:300},{id:'widget_4',widget_type:'calendar',position:{x:1,y:1,w:2,h:1},config:{},refresh_interval:300},{id:'widget_5',widget_type:'quick_notes',position:{x:3,y:1,w:1,h:1},config:{notes:'Welcome to your dashboard!\n\nClick Edit Layout to customize.'},refresh_interval:0}];setWidgets(mockWidgets)}finally{setTimeout(()=>{setLoading(false)},100)}};const handleAddWidget = async(widgetType)=>{try{const newWidget = await window.apiClient.request(`/dashboard/layouts/${dashboardId}/widgets`,{method:'POST',body:{widget_type:widgetType,position:findEmptyPosition()}});setWidgets([...widgets,newWidget]);setShowAddWidget(false)}catch(error){console.error('Failed to add widget via API,using local mock:',error);const position = findEmptyPosition();const mockWidget ={id:`widget_${Date.now()}`,widget_type:widgetType,position:position,config:{},title:null,refresh_interval:300,is_loading:false,is_minimized:false};setWidgets([...widgets,mockWidget]);setShowAddWidget(false)}};const handleRemoveWidget = async(widgetId)=>{if(!editMode)return;try{await window.apiClient.request(`/dashboard/layouts/${dashboardId}/widgets/${widgetId}`,{method:'DELETE'});setWidgets(widgets.filter(w => w.id !== widgetId))}catch(error){console.error('Failed to remove widget:',error)}};const findEmptyPosition =()=>{const occupiedPositions = new Set();widgets.forEach(w =>{for(let x = w.position.x;x < w.position.x + w.position.w;x++){for(let y = w.position.y;y < w.position.y + w.position.h;y++){occupiedPositions.add(`${x},${y}`)}}});for(let y = 0;y < 10;y++){for(let x = 0;x < GRID_COLS;x++){if(!occupiedPositions.has(`${x},${y}`)){return{x,y,w:1,h:1}}}}return{x:0,y:0,w:1,h:1}};const renderWidget =(widget,index)=>{try{return(<DraggableWidget key={widget.id}widget={widget}index={index}editMode={editMode}onMove={handleWidgetMove}onRemove={handleRemoveWidget}onResize={handleWidgetResize}>{typeof DashboardWidget !== 'undefined' ?(<DashboardWidget widget={widget}onUpdate={(updates)=> handleWidgetUpdate(widget.id,updates)}/>):(<div style={{padding:'20px',color:'white'}}> Widget type:{widget.widget_type}</div>)}</DraggableWidget>)}catch(error){console.error('Error rendering widget:',widget,error);return(<div key={widget.id}style={{padding:'20px',background:'rgba(255,0,0,0.1)',borderRadius:'8px'}}> Error loading widget:{widget.widget_type}</div>)}};const handleWidgetMove = async(widgetId,newPosition)=>{setWidgets(widgets.map(w => w.id === widgetId ?{...w,position:{...w.position,x:newPosition.x,y:newPosition.y}}:w));try{const updates = [{widget_id:widgetId,position:{x:newPosition.x,y:newPosition.y,w:widgets.find(w => w.id === widgetId).position.w,h:widgets.find(w => w.id === widgetId).position.h}}];await window.apiClient.request(`/dashboard/layouts/${dashboardId}`,{method:'PUT',body:updates})}catch(error){console.error('Failed to save widget position:',error)}};const handleWidgetResize = async(widgetId,newSize)=>{setWidgets(widgets.map(w => w.id === widgetId ?{...w,position:{...w.position,w:newSize.w,h:newSize.h}}:w));try{const widget = widgets.find(w => w.id === widgetId);const updates = [{widget_id:widgetId,position:{x:widget.position.x,y:widget.position.y,w:newSize.w,h:newSize.h}}];await window.apiClient.request(`/dashboard/layouts/${dashboardId}`,{method:'PUT',body:updates})}catch(error){console.error('Failed to save widget size:',error)}};const handleWidgetUpdate = async(widgetId,updates)=>{try{await window.apiClient.request(`/dashboard/layouts/${dashboardId}/widgets/${widgetId}`,{method:'PUT',body:updates});setWidgets(widgets.map(w => w.id === widgetId ?{...w,...updates}:w))}catch(error){console.error('Failed to update widget:',error)}};if(loading){return(<div className="dashboard-container" style={{background:'linear-gradient(135deg,#667eea 0%,#764ba2 100%)'}}><div style={{display:'flex',justifyContent:'center',alignItems:'center',height:'100vh',flexDirection:'column',gap:'20px'}}><div className="widget-loading-spinner"></div><div style={{color:'white',fontSize:'16px'}}>Loading Dashboard...</div>{error &&(<div style={{color:'#fca5a5',fontSize:'14px',marginTop:'10px'}}> Error:{error}</div>)}</div></div>)}return(<div className="dashboard-container" style={{minHeight:'100vh',width:'100%',background:'linear-gradient(135deg,#667eea 0%,#764ba2 100%)',position:'relative'}}><div className="dashboard-header"><div className="dashboard-header-content"><h1 className="dashboard-title">Dashboard</h1><div className="dashboard-actions"><button className={`edit-mode-toggle ${editMode ? 'active':''}`}onClick={()=> setEditMode(!editMode)}>{Icons.Settings && <Icons.Settings />}<span>{editMode ? 'Done Editing':'Edit Layout'}</span></button></div></div></div><div className={`dashboard-grid ${editMode ? 'edit-mode':''}`}><div className="grid-layout" style={{position:'relative',minHeight:'600px'}}>{widgets && widgets.length > 0 ?(widgets.map((widget,index)=>{try{return renderWidget(widget,index)}catch(err){console.error('Error rendering widget:',widget,err);return(<div key={widget?.id || index}style={{padding:'20px',background:'rgba(255,0,0,0.1)',borderRadius:'8px',color:'white'}}> Error loading widget </div>)}})):(<div style={{padding:'40px',textAlign:'center',color:'white',opacity:0.7}}> No widgets yet. Click "Edit Layout" to add widgets. </div>)}</div></div>{editMode &&(<button className="add-widget-fab" onClick={()=>{setShowAddWidget(true)}}>{Icons.Plus ? <Icons.Plus />:'+'}</button>)}{showAddWidget &&(<div className="widget-selector-overlay" onClick={()=> setShowAddWidget(false)}><div className="widget-selector-modal" onClick={e => e.stopPropagation()}><div className="widget-selector-header"><h2>Add Widget</h2><button className="close-button" onClick={()=> setShowAddWidget(false)}>×</button></div><div className="widget-selector-content"><div className="widget-grid">{[{type:'occupancy',name:'Occupancy Rate',icon:'🏢',desc:'Track occupancy rates'},{type:'revenue',name:'Revenue',icon:'💰',desc:'Monitor revenue'},{type:'maintenance',name:'Maintenance',icon:'🔧',desc:'Manage tasks'},{type:'leases',name:'Leases',icon:'📄',desc:'Track leases'},{type:'calendar',name:'Calendar',icon:'📅',desc:'View events'},{type:'follow_ups',name:'Follow-ups',icon:'✅',desc:'Track tasks'},{type:'quick_notes',name:'Notes',icon:'📝',desc:'Keep notes'}].map(widget =>(<div key={widget.type}className="widget-card" onClick={()=>{handleAddWidget(widget.type);setShowAddWidget(false)}}><div className="widget-card-icon">{widget.icon}</div><h3>{widget.name}</h3><p>{widget.desc}</p></div>))}</div></div></div></div>)}</div>)};

// AIDashboard.jsx
const AIDashboard =()=>{const [insights,setInsights] = React.useState([]);const [predictions,setPredictions] = React.useState([]);const [aiMetrics,setAiMetrics] = React.useState({});const [selectedTimeframe,setSelectedTimeframe] = React.useState('30d');const [activeTab,setActiveTab] = React.useState('overview');React.useEffect(()=>{loadAIInsights()},[selectedTimeframe]);const loadAIInsights = async()=>{setInsights(getMockInsights());setPredictions(getMockPredictions());setAiMetrics(getMockAIMetrics())};const getMockInsights =()=>{return [{id:1,type:'revenue',title:'Revenue Optimization Opportunity',description:'AI suggests increasing rent by 3-5% for units 101-105 based on market analysis',confidence:92,potential_impact:12500,priority:'high',category:'pricing',action:'Review rental rates for these units',icon:'fa-chart-line'},{id:2,type:'maintenance',title:'Predictive Maintenance Alert',description:'HVAC systems in Building A likely to need service within 30 days',confidence:87,potential_impact:8500,priority:'medium',category:'maintenance',action:'Schedule preventive maintenance',icon:'fa-tools'},{id:3,type:'vacancy',title:'Lease Renewal Risk',description:'3 high-value tenants show behavioral patterns indicating potential non-renewal',confidence:78,potential_impact:15200,priority:'high',category:'retention',action:'Proactive retention outreach',icon:'fa-user-times'},{id:4,type:'energy',title:'Energy Efficiency Gains',description:'Smart thermostat data suggests 18% energy savings possible with schedule optimization',confidence:94,potential_impact:3200,priority:'medium',category:'sustainability',action:'Implement smart scheduling',icon:'fa-leaf'},{id:5,type:'marketing',title:'Marketing Channel Performance',description:'AI analysis shows Zillow listings 40% more effective than Craigslist for your property type',confidence:89,potential_impact:5600,priority:'low',category:'marketing',action:'Reallocate marketing budget',icon:'fa-bullhorn'}]};const getMockPredictions =()=>{return [{metric:'occupancy_rate',current:94.2,predicted_30d:92.8,predicted_90d:95.1,trend:'stable',confidence:85},{metric:'maintenance_costs',current:12500,predicted_30d:14200,predicted_90d:38900,trend:'increasing',confidence:91},{metric:'rental_income',current:145000,predicted_30d:147200,predicted_90d:152800,trend:'increasing',confidence:88},{metric:'vacancy_days',current:23,predicted_30d:19,predicted_90d:15,trend:'improving',confidence:82}]};const getMockAIMetrics =()=>{return{total_savings:47500,automation_hours:156,prediction_accuracy:89.2,ai_recommendations:23,implemented_suggestions:18,roi_improvement:15.7}};const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0}).format(amount)};const getInsightIcon =(category)=>{const icons ={pricing:'fa-dollar-sign',maintenance:'fa-tools',retention:'fa-users',sustainability:'fa-leaf',marketing:'fa-bullhorn'};return icons[category] || 'fa-lightbulb'};const getPriorityColor =(priority)=>{const colors ={high:'#ef4444',medium:'#f59e0b',low:'#10b981'};return colors[priority] || '#6b7280'};return(<div className="ai-dashboard">{}<div className="ai-dashboard-header"><div className="header-content"><div className="header-left"><h1 className="dashboard-title"><i className="fas fa-brain"></i> AI Insights </h1><p className="dashboard-subtitle"> AI-powered analytics and predictive insights for your properties </p></div><div className="header-right"><select value={selectedTimeframe}onChange={(e)=> setSelectedTimeframe(e.target.value)}className="timeframe-select" ><option value="7d">Last 7 Days</option><option value="30d">Last 30 Days</option><option value="90d">Last 90 Days</option><option value="1y">Last Year</option></select></div></div></div>{}<div className="ai-metrics-grid"><div className="ai-metric-card"><div className="metric-icon savings"><i className="fas fa-piggy-bank"></i></div><div className="metric-content"><div className="metric-value">{formatCurrency(aiMetrics.total_savings)}</div><div className="metric-label">AI-Generated Savings</div></div></div><div className="ai-metric-card"><div className="metric-icon automation"><i className="fas fa-robot"></i></div><div className="metric-content"><div className="metric-value">{aiMetrics.automation_hours}h</div><div className="metric-label">Hours Automated</div></div></div><div className="ai-metric-card"><div className="metric-icon accuracy"><i className="fas fa-target"></i></div><div className="metric-content"><div className="metric-value">{aiMetrics.prediction_accuracy}%</div><div className="metric-label">Prediction Accuracy</div></div></div><div className="ai-metric-card"><div className="metric-icon roi"><i className="fas fa-chart-line"></i></div><div className="metric-content"><div className="metric-value">+{aiMetrics.roi_improvement}%</div><div className="metric-label">ROI Improvement</div></div></div></div>{}<div className="ai-tabs"><button className={`ai-tab ${activeTab === 'overview' ? 'active':''}`}onClick={()=> setActiveTab('overview')}><i className="fas fa-eye"></i> Overview </button><button className={`ai-tab ${activeTab === 'insights' ? 'active':''}`}onClick={()=> setActiveTab('insights')}><i className="fas fa-lightbulb"></i> Insights </button><button className={`ai-tab ${activeTab === 'predictions' ? 'active':''}`}onClick={()=> setActiveTab('predictions')}><i className="fas fa-crystal-ball"></i> Predictions </button></div>{}<div className="ai-tab-content">{activeTab === 'overview' &&(<div className="overview-tab"><div className="insights-summary"><h3>Recent AI Activity</h3><div className="activity-stats"><div className="stat"><span className="stat-number">{aiMetrics.ai_recommendations}</span><span className="stat-label">Recommendations Made</span></div><div className="stat"><span className="stat-number">{aiMetrics.implemented_suggestions}</span><span className="stat-label">Suggestions Implemented</span></div><div className="stat"><span className="stat-number">{Math.round((aiMetrics.implemented_suggestions / aiMetrics.ai_recommendations)* 100)}% </span><span className="stat-label">Implementation Rate</span></div></div></div></div>)}{activeTab === 'insights' &&(<div className="insights-tab"><div className="insights-list">{insights.map(insight =>(<div key={insight.id}className="insight-card"><div className="insight-header"><div className="insight-icon" style={{color:getPriorityColor(insight.priority)}}><i className={`fas ${insight.icon}`}></i></div><div className="insight-title-section"><h4 className="insight-title">{insight.title}</h4><div className="insight-meta"><span className={`priority-badge ${insight.priority}`}>{insight.priority.toUpperCase()}</span><span className="confidence-badge">{insight.confidence}% confidence </span></div></div><div className="insight-impact"><div className="impact-value">{formatCurrency(insight.potential_impact)}</div><div className="impact-label">Potential Impact</div></div></div><div className="insight-body"><p className="insight-description">{insight.description}</p><div className="insight-actions"><button className="action-btn primary"><i className="fas fa-play"></i>{insight.action}</button><button className="action-btn secondary"><i className="fas fa-info-circle"></i> Learn More </button></div></div></div>))}</div></div>)}{activeTab === 'predictions' &&(<div className="predictions-tab"><div className="predictions-grid">{predictions.map(prediction =>(<div key={prediction.metric}className="prediction-card"><div className="prediction-header"><h4 className="prediction-title">{prediction.metric.replace('_',' ').toUpperCase()}</h4><div className={`trend-indicator ${prediction.trend}`}><i className={`fas fa-arrow-${prediction.trend === 'increasing' ? 'up':prediction.trend === 'improving' ? 'up':prediction.trend === 'stable' ? 'right':'down'}`}></i>{prediction.trend}</div></div><div className="prediction-values"><div className="value-item current"><span className="value-label">Current</span><span className="value-number">{prediction.metric.includes('rate')|| prediction.metric.includes('occupancy')? `${prediction.current}%`:prediction.metric.includes('cost')|| prediction.metric.includes('income')? formatCurrency(prediction.current):prediction.current}</span></div><div className="value-item predicted"><span className="value-label">30-Day Forecast</span><span className="value-number">{prediction.metric.includes('rate')|| prediction.metric.includes('occupancy')? `${prediction.predicted_30d}%`:prediction.metric.includes('cost')|| prediction.metric.includes('income')? formatCurrency(prediction.predicted_30d):prediction.predicted_30d}</span></div></div><div className="prediction-confidence"><div className="confidence-bar"><div className="confidence-fill" style={{width:`${prediction.confidence}%`}}></div></div><span className="confidence-text">{prediction.confidence}% accurate</span></div></div>))}</div></div>)}</div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.AIDashboard = AIDashboard;

// PropertyCard.jsx
const PropertyCard =({property,onDelete,onEdit})=>{return(<div className="property-card"><div className="property-header"><h3>{property.name}</h3><div className="property-actions"><button onClick={onEdit}><i className="fas fa-edit"></i></button><button onClick={onDelete}><i className="fas fa-trash"></i></button></div></div><div className="property-details"><p><i className="fas fa-map-marker-alt"></i>{property.address?.street},{property.address?.city},{property.address?.state}</p><p><i className="fas fa-home"></i>{property.total_units || 0}units </p><p><i className="fas fa-percentage"></i>{property.occupancy_rate || 0}% occupied </p></div><div className="property-stats"><div className="stat"><span className="stat-value">${property.monthly_revenue || 0}</span><span className="stat-label">Monthly Revenue</span></div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.PropertyCard = PropertyCard;

// SidebarV2.jsx
const SidebarV2 =({menuItems,activePage,onPageChange,collapsed})=>{const [expandedSections,setExpandedSections] = React.useState({});const toggleSection =(sectionId)=>{setExpandedSections(prev =>({...prev,[sectionId]:!prev[sectionId]}))};const renderMenuItem =(item,parentId = '')=>{const itemId = parentId ? `${parentId}-${item.id}`:item.id;const isActive = activePage === itemId;const hasChildren = item.children && item.children.length > 0;const isExpanded = expandedSections[itemId];const Icon = item.icon;return(<div key={itemId}className="nav-item"><button className={`nav-link ${isActive ? 'active':''}${hasChildren ? 'has-children':''}`}onClick={()=>{if(hasChildren){toggleSection(itemId)}else{onPageChange(itemId)}}}title={collapsed ? item.label:''}><div className="nav-link-content">{Icon &&(<span className="nav-icon"><Icon /></span>)}{!collapsed && <span className="nav-label">{item.label}</span>}</div>{hasChildren && !collapsed &&(<Icons.ChevronDown style={{transform:isExpanded ? 'rotate(180deg)':'rotate(0deg)',transition:'transform 200ms ease'}}/>)}</button>{hasChildren && isExpanded && !collapsed &&(<div className="nav-submenu">{item.children.map(child =>(<button key={child.id}className={`nav-sublink ${activePage === `${item.id}-${child.id}` ? 'active':''}`}onClick={()=> onPageChange(`${item.id}-${child.id}`)}>{child.label}</button>))}</div>)}</div>)};return(<div className="nav-menu">{menuItems.map(item => renderMenuItem(item))}</div>)};

// Card.jsx
const Card =({title,children,hoverable = false,className = '',style ={}})=>{const classes = [ 'card',hoverable && 'card-hover',className ].filter(Boolean).join(' ');return(<div className={classes}style={style}>{title && <h3 className="card-title">{title}</h3>}<div className="card-content">{children}</div></div>)};

// AIMessagingSystem.jsx
const AIMessagingSystem =({userType,userId,userName,userProperties = []})=>{const [conversations,setConversations] = React.useState([]);const [selectedConversation,setSelectedConversation] = React.useState(null);const [messages,setMessages] = React.useState([]);const [newMessage,setNewMessage] = React.useState('');const [isListening,setIsListening] = React.useState(false);const [isProcessing,setIsProcessing] = React.useState(false);const [showNewConversation,setShowNewConversation] = React.useState(false);const [aiAssistantOpen,setAiAssistantOpen] = React.useState(false);const [selectedProperty,setSelectedProperty] = React.useState('all');const recognitionRef = React.useRef(null);const logService = window.ConversationLogService;React.useEffect(()=>{if('webkitSpeechRecognition' in window || 'SpeechRecognition' in window){const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;const recognition = new SpeechRecognition();recognition.continuous = false;recognition.interimResults = false;recognition.lang = 'en-US';recognitionRef.current = recognition;recognition.onresult =(event)=>{const transcript = event.results[0][0].transcript;setNewMessage(transcript);processAIMessage(transcript)};recognition.onerror =(event)=>{console.error('Speech recognition error:',event.error);setIsListening(false)};recognition.onend =()=>{setIsListening(false)}}},[]);React.useEffect(()=>{loadConversations()},[selectedProperty,userType,userId]);React.useEffect(()=>{if(selectedConversation){loadMessages(selectedConversation.id)}},[selectedConversation]);const loadConversations = async()=>{try{const userConversations = logService?.searchConversations('',{participantType:userType,propertyId:selectedProperty !== 'all' ? selectedProperty:undefined})|| [];const conversationMap = new Map();userConversations.forEach(log =>{const convKey = `${log.participantId}-${log.propertyId || 'general'}`;if(!conversationMap.has(convKey)){conversationMap.set(convKey,{id:convKey,participantId:log.participantId,participantName:log.participantName,participantType:log.participantType,propertyId:log.propertyId,propertyName:log.propertyName,unitNumber:log.unitNumber,lastMessage:log,unreadCount:0,messageCount:1})}else{const conv = conversationMap.get(convKey);if(new Date(log.timestamp)> new Date(conv.lastMessage.timestamp)){conv.lastMessage = log}conv.messageCount++}});setConversations([...conversationMap.values()].sort((a,b)=> new Date(b.lastMessage.timestamp)- new Date(a.lastMessage.timestamp)))}catch(error){console.error('Error loading conversations:',error)}};const loadMessages = async(conversationId)=>{try{const conversationMessages = logService?.logs?.filter(log => `${log.participantId}-${log.propertyId || 'general'}` === conversationId).sort((a,b)=> new Date(a.timestamp)- new Date(b.timestamp))|| [];setMessages(conversationMessages)}catch(error){console.error('Error loading messages:',error)}};const startListening =()=>{if(recognitionRef.current && !isListening){setIsListening(true);recognitionRef.current.start()}};const stopListening =()=>{if(recognitionRef.current && isListening){recognitionRef.current.stop();setIsListening(false)}};const processAIMessage = async(messageText)=>{if(!messageText.trim())return;setIsProcessing(true);try{const userMessage = logService?.logConversation({type:isListening ? 'voice':'text',participantId:userId,participantName:userName,participantType:userType,propertyId:selectedConversation?.propertyId,propertyName:selectedConversation?.propertyName,unitNumber:selectedConversation?.unitNumber,content:messageText,channel:'ai_messaging_system',isInbound:true,metadata:{voiceInput:isListening,aiProcessed:true}});const aiResponse = await getAIResponse(messageText,{userType,userName,propertyContext:selectedConversation,conversationHistory:messages.slice(-5)});logService?.logAIConversation({conversationType:isListening ? 'voice':'chat',userId,userName,userType,propertyContext:{propertyId:selectedConversation?.propertyId,propertyName:selectedConversation?.propertyName,unitNumber:selectedConversation?.unitNumber},aiModel:'messaging-assistant',prompt:messageText,response:aiResponse.message,metadata:{intent:aiResponse.intent,entities:aiResponse.entities,confidence:aiResponse.confidence,actions:aiResponse.actions}});if(aiResponse.actions){await executeAIActions(aiResponse.actions)}if(isListening && aiResponse.message){await speakResponse(aiResponse.message)}loadConversations();if(selectedConversation){loadMessages(selectedConversation.id)}}catch(error){console.error('Error processing AI message:',error)}finally{setIsProcessing(false);setNewMessage('')}};const getAIResponse = async(message,context)=>{await new Promise(resolve => setTimeout(resolve,1000));const lowerMessage = message.toLowerCase();if(lowerMessage.includes('maintenance')|| lowerMessage.includes('repair')){return{message:"I understand you have a maintenance concern. I can help you create a maintenance request or connect you with the appropriate team. Would you like me to start a maintenance ticket for you?",intent:'maintenance_request',entities:['maintenance','repair'],confidence:0.95,actions:['suggest_maintenance_form']}}if(lowerMessage.includes('rent')|| lowerMessage.includes('payment')){return{message:"I can help you with rent and payment questions. Would you like me to check your payment history,set up automatic payments,or answer questions about payment methods?",intent:'payment_inquiry',entities:['rent','payment'],confidence:0.92,actions:['show_payment_options']}}if(lowerMessage.includes('lease')|| lowerMessage.includes('renewal')){return{message:"I can assist with lease-related questions including renewals,terms,and documentation. What specific information do you need about your lease?",intent:'lease_inquiry',entities:['lease','renewal'],confidence:0.88,actions:['show_lease_info']}}if(lowerMessage.includes('schedule')|| lowerMessage.includes('appointment')){return{message:"I can help you schedule appointments with property management,maintenance teams,or showings. What type of appointment would you like to schedule?",intent:'scheduling',entities:['schedule','appointment'],confidence:0.90,actions:['open_calendar']}}if(lowerMessage.includes('contact')|| lowerMessage.includes('phone')|| lowerMessage.includes('email')){return{message:"I can help you get in touch with the right person. Are you looking to contact property management,maintenance,or someone else? I can also help you send a message through our system.",intent:'contact_request',entities:['contact','communication'],confidence:0.87,actions:['show_contacts']}}return{message:`Hello ${context.userName}! I'm your AI assistant for property management. I can help you with maintenance requests,rent payments,lease questions,scheduling appointments,and connecting you with the right people. What can I assist you with today?`,intent:'general_assistance',entities:[],confidence:0.75,actions:[]}};const executeAIActions = async(actions)=>{actions.forEach(action =>{switch(action){case 'suggest_maintenance_form':break;case 'show_payment_options':break;case 'show_lease_info':break;case 'open_calendar':break;case 'show_contacts':break}})};const speakResponse = async(text)=>{if('speechSynthesis' in window){const utterance = new SpeechSynthesisUtterance(text);utterance.rate = 0.9;utterance.pitch = 1;utterance.volume = 0.8;speechSynthesis.speak(utterance)}};const sendTextMessage =()=>{if(newMessage.trim()){processAIMessage(newMessage)}};const formatTimeAgo =(timestamp)=>{const date = new Date(timestamp);const now = new Date();const diffMs = now - date;const diffMins = Math.floor(diffMs / 60000);const diffHours = Math.floor(diffMs / 3600000);const diffDays = Math.floor(diffMs / 86400000);if(diffMins < 1)return 'just now';if(diffMins < 60)return `${diffMins}m ago`;if(diffHours < 24)return `${diffHours}h ago`;if(diffDays < 7)return `${diffDays}d ago`;return date.toLocaleDateString('en-US',{month:'short',day:'numeric'})};const getParticipantIcon =(type)=>{const icons ={tenant:'fa-user',owner:'fa-building',vendor:'fa-tools',admin:'fa-user-shield','property-manager':'fa-clipboard-user',maintenance:'fa-wrench'};return icons[type] || 'fa-user'};return(<div className="ai-messaging-system">{}<div className="messaging-header"><div className="header-content"><h2><i className="fas fa-robot"></i> AI Assistant </h2><p>Intelligent messaging for{userName}</p></div>{}{userProperties.length > 1 &&(<div className="property-filter"><select value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}className="property-select" ><option value="all">All Properties</option>{userProperties.map(property =>(<option key={property.id}value={property.id}>{property.name}</option>))}</select></div>)}</div><div className="messaging-container">{}<div className="conversations-sidebar"><div className="sidebar-header"><h3>Conversations</h3><button className="new-conversation-btn" onClick={()=> setShowNewConversation(true)}><i className="fas fa-plus"></i></button></div><div className="conversations-list">{conversations.length === 0 ?(<div className="empty-conversations"><i className="fas fa-comments"></i><p>No conversations yet</p><p>Start a new conversation to get help!</p></div>):(conversations.map(conv =>(<div key={conv.id}className={`conversation-item ${selectedConversation?.id === conv.id ? 'selected':''}`}onClick={()=> setSelectedConversation(conv)}><div className={`participant-avatar ${conv.participantType}`}><i className={`fas ${getParticipantIcon(conv.participantType)}`}></i></div><div className="conversation-info"><h4>{conv.participantName}</h4><p className="property-info">{conv.propertyName}{conv.unitNumber && `• Unit ${conv.unitNumber}`}</p><p className="last-message">{conv.lastMessage.content.substring(0,50)}... </p><span className="message-time">{formatTimeAgo(conv.lastMessage.timestamp)}</span></div>{conv.unreadCount > 0 &&(<span className="unread-badge">{conv.unreadCount}</span>)}</div>)))}</div></div>{}<div className="chat-area">{selectedConversation ?(<>{}<div className="chat-header"><div className="chat-participant"><div className={`participant-avatar ${selectedConversation.participantType}`}><i className={`fas ${getParticipantIcon(selectedConversation.participantType)}`}></i></div><div className="participant-info"><h3>{selectedConversation.participantName}</h3><p>{selectedConversation.propertyName}{selectedConversation.unitNumber && `• Unit ${selectedConversation.unitNumber}`}</p></div></div><div className="chat-actions"><button className="ai-assistant-btn" onClick={()=> setAiAssistantOpen(!aiAssistantOpen)}><i className="fas fa-robot"></i> AI Help </button></div></div>{}<div className="messages-container">{messages.length === 0 ?(<div className="empty-messages"><i className="fas fa-robot"></i><h3>AI Assistant Ready</h3><p>Start a conversation! I can help with:</p><ul><li>Maintenance requests</li><li>Rent and payment questions</li><li>Lease information</li><li>Scheduling appointments</li><li>Connecting with property staff</li></ul></div>):(messages.map(message =>(<div key={message.id}className={`message ${message.participantId === userId ? 'sent':'received'}${message.type === 'ai' ? 'ai-message':''}`}><div className="message-content">{message.type === 'ai' &&(<div className="ai-indicator"><i className="fas fa-robot"></i> AI Assistant </div>)}<p>{message.content}</p><div className="message-meta"><span className="message-time">{formatTimeAgo(message.timestamp)}</span>{message.metadata?.voiceInput &&(<i className="fas fa-microphone voice-indicator"></i>)}</div></div></div>)))}{isProcessing &&(<div className="message received ai-message"><div className="message-content"><div className="ai-indicator"><i className="fas fa-robot"></i> AI Assistant </div><div className="typing-indicator"><span></span><span></span><span></span></div></div></div>)}</div>{}<div className="message-input-container"><div className="input-wrapper"><input type="text" value={newMessage}onChange={(e)=> setNewMessage(e.target.value)}onKeyDown={(e)=> e.key === 'Enter' && sendTextMessage()}placeholder="Type your message or speak..." className="message-input" disabled={isProcessing}/><div className="input-actions"><button className={`voice-btn ${isListening ? 'listening':''}`}onClick={isListening ? stopListening:startListening}disabled={isProcessing}><i className={`fas ${isListening ? 'fa-stop':'fa-microphone'}`}></i></button><button className="send-btn" onClick={sendTextMessage}disabled={!newMessage.trim()|| isProcessing}><i className="fas fa-paper-plane"></i></button></div></div>{isListening &&(<div className="listening-indicator"><div className="pulse-animation"></div><span>Listening...</span></div>)}</div></>):(<div className="no-conversation-selected"><i className="fas fa-robot"></i><h3>AI Assistant Ready</h3><p>Select a conversation or start a new one to get AI-powered help with property management tasks.</p><button className="start-conversation-btn" onClick={()=> setShowNewConversation(true)}><i className="fas fa-plus"></i> Start New Conversation </button></div>)}</div>{}{aiAssistantOpen &&(<div className="ai-assistant-panel"><div className="panel-header"><h3><i className="fas fa-robot"></i> AI Assistant </h3><button className="close-panel" onClick={()=> setAiAssistantOpen(false)}><i className="fas fa-times"></i></button></div><div className="panel-content"><div className="ai-suggestions"><h4>Quick Actions</h4><div className="suggestion-buttons"><button className="suggestion-btn" onClick={()=> processAIMessage("I need help with a maintenance issue")}><i className="fas fa-tools"></i> Maintenance Request </button><button className="suggestion-btn" onClick={()=> processAIMessage("I have a question about my rent payment")}><i className="fas fa-dollar-sign"></i> Payment Help </button><button className="suggestion-btn" onClick={()=> processAIMessage("I need to schedule an appointment")}><i className="fas fa-calendar-check"></i> Schedule Meeting </button><button className="suggestion-btn" onClick={()=> processAIMessage("I have a question about my lease")}><i className="fas fa-file-contract"></i> Lease Question </button></div></div><div className="ai-capabilities"><h4>I can help you with:</h4><ul><li>Creating and tracking maintenance requests</li><li>Answering rent and payment questions</li><li>Providing lease information and renewal help</li><li>Scheduling appointments with property staff</li><li>Connecting you with the right people</li><li>Property information and amenities</li><li>Emergency contact information</li></ul></div></div></div>)}</div>{}{showNewConversation &&(<NewConversationModal userType={userType}userProperties={userProperties}onClose={()=> setShowNewConversation(false)}onConversationCreated={(conversation)=>{setSelectedConversation(conversation);setShowNewConversation(false);loadConversations()}}/>)}</div>)};const NewConversationModal =({userType,userProperties,onClose,onConversationCreated})=>{const [selectedRecipientType,setSelectedRecipientType] = React.useState('');const [selectedProperty,setSelectedProperty] = React.useState('');const [subject,setSubject] = React.useState('');const recipientTypes ={tenant:['property-manager','admin','maintenance'],owner:['property-manager','admin','tenant'],'property-manager':['tenant','owner','vendor','maintenance','admin'],admin:['tenant','owner','property-manager','vendor','maintenance'],vendor:['property-manager','admin','maintenance'],maintenance:['tenant','property-manager','admin','vendor']};const startConversation =()=>{if(selectedRecipientType && selectedProperty){const conversation ={id:`new-${Date.now()}`,participantType:selectedRecipientType,participantName:selectedRecipientType.replace('-',' ').toUpperCase(),propertyId:selectedProperty,propertyName:userProperties.find(p => p.id === selectedProperty)?.name || 'Property',subject:subject || 'New Conversation'};onConversationCreated(conversation)}};return(<div className="modal-overlay" onClick={onClose}><div className="new-conversation-modal" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h3>Start New Conversation</h3><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-content"><div className="form-group"><label>Who would you like to message?</label><select value={selectedRecipientType}onChange={(e)=> setSelectedRecipientType(e.target.value)}className="form-select" ><option value="">Select recipient type...</option>{(recipientTypes[userType] || []).map(type =>(<option key={type}value={type}>{type.replace('-',' ').toUpperCase()}</option>))}</select></div><div className="form-group"><label>Select Property</label><select value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}className="form-select" ><option value="">Select property...</option>{userProperties.map(property =>(<option key={property.id}value={property.id}>{property.name}</option>))}</select></div><div className="form-group"><label>Subject(optional)</label><input type="text" value={subject}onChange={(e)=> setSubject(e.target.value)}placeholder="What's this about?" className="form-input" /></div></div><div className="modal-footer"><button className="btn-secondary" onClick={onClose}>Cancel</button><button className="btn-primary" onClick={startConversation}disabled={!selectedRecipientType || !selectedProperty}> Start Conversation </button></div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.AIMessagingSystem = AIMessagingSystem;

// MaintenancePhotoAnalyzer.jsx
const MaintenancePhotoAnalyzer =({onAnalysisComplete,category = 'general',property,unit})=>{const [photos,setPhotos] = React.useState([]);const [analyzing,setAnalyzing] = React.useState(false);const [analysis,setAnalysis] = React.useState(null);const [error,setError] = React.useState(null);const fileInputRef = React.useRef(null);const cameraInputRef = React.useRef(null);const visionService = React.useMemo(()=>{return new(window.GeminiVisionService || window.MockGeminiVisionService)()},[]);const handleFileSelect =(event)=>{const files = Array.from(event.target.files);processFiles(files)};const processFiles = async(files)=>{const validFiles = files.filter(file => file.type.startsWith('image/')&& file.size < 10 * 1024 * 1024);if(validFiles.length === 0){setError('Please select valid image files(max 10MB each)');return}const newPhotos = await Promise.all(validFiles.map(async(file)=>{const base64 = await fileToBase64(file);return{id:Date.now()+ Math.random(),file,url:URL.createObjectURL(file),base64:base64.split(',')[1],mimeType:file.type,name:file.name,size:file.size,timestamp:new Date().toISOString()}}));setPhotos(prev => [...prev,...newPhotos]);setError(null)};const fileToBase64 =(file)=>{return new Promise((resolve,reject)=>{const reader = new FileReader();reader.readAsDataURL(file);reader.onload =()=> resolve(reader.result);reader.onerror = error => reject(error)})};const removePhoto =(photoId)=>{setPhotos(prev =>{const photo = prev.find(p => p.id === photoId);if(photo){URL.revokeObjectURL(photo.url)}return prev.filter(p => p.id !== photoId)})};const analyzePhotos = async()=>{if(photos.length === 0){setError('Please add at least one photo to analyze');return}setAnalyzing(true);setError(null);try{const context ={category,property,unit,description:document.getElementById('issue-description')?.value || ''};let result;if(photos.length === 1){result = await visionService.analyzeMaintenancePhoto(photos[0],context)}else{result = await visionService.analyzeMultiplePhotos(photos,context)}setAnalysis(result.analysis);if(onAnalysisComplete){onAnalysisComplete({photos:photos.map(p =>({id:p.id,name:p.name,size:p.size,url:p.url})),analysis:result.analysis})}}catch(error){console.error('Error analyzing photos:',error);setError('Failed to analyze photos. Please try again.')}finally{setAnalyzing(false)}};React.useEffect(()=>{return()=>{photos.forEach(photo => URL.revokeObjectURL(photo.url))}},[]);return React.createElement('div',{className:'maintenance-photo-analyzer'},[ React.createElement('div',{key:'upload',className:'photo-upload-section'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-camera'}),' Add Photos' ]),React.createElement('p',{key:'desc',className:'upload-description'},'Upload photos to help us better understand the issue. Our AI will analyze them instantly.'),React.createElement('div',{key:'buttons',className:'upload-buttons'},[ React.createElement('button',{key:'upload',className:'btn btn-secondary',onClick:()=> fileInputRef.current?.click()},[ React.createElement('i',{key:'icon',className:'fas fa-upload'}),' Upload Photos' ]),React.createElement('button',{key:'camera',className:'btn btn-secondary',onClick:()=> cameraInputRef.current?.click()},[ React.createElement('i',{key:'icon',className:'fas fa-camera'}),' Take Photo' ])]),React.createElement('input',{key:'file-input',ref:fileInputRef,type:'file',accept:'image/*',multiple:true,style:{display:'none'},onChange:handleFileSelect}),React.createElement('input',{key:'camera-input',ref:cameraInputRef,type:'file',accept:'image/*',capture:'environment',style:{display:'none'},onChange:handleFileSelect})]),photos.length > 0 && React.createElement('div',{key:'grid',className:'photo-grid'},photos.map(photo => React.createElement('div',{key:photo.id,className:'photo-item'},[ React.createElement('img',{key:'img',src:photo.url,alt:photo.name}),React.createElement('button',{key:'remove',className:'remove-photo',onClick:()=> removePhoto(photo.id)},React.createElement('i',{className:'fas fa-times'})),React.createElement('div',{key:'info',className:'photo-info'},`${(photo.size / 1024).toFixed(1)}KB`)]))),photos.length > 0 && !analysis && React.createElement('button',{key:'analyze',className:'btn btn-primary analyze-btn',onClick:analyzePhotos,disabled:analyzing},analyzing ? [ React.createElement('i',{key:'spinner',className:'fas fa-spinner fa-spin'}),' Analyzing...' ]:[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),' Analyze Photos with AI' ]),analysis && React.createElement('div',{key:'results',className:'analysis-results'},[ React.createElement('div',{key:'header',className:'results-header'},[ React.createElement('h4',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-clipboard-check'}),' AI Analysis Complete' ]),React.createElement('button',{key:'close',className:'close-results',onClick:()=>{setAnalysis(null);setPhotos([])}},'Start Over')]),React.createElement('div',{key:'severity',className:'severity-section'},[ React.createElement('span',{key:'label',className:'severity-label'},'Severity:'),React.createElement('span',{key:'badge',className:`severity-badge ${analysis.severity.toLowerCase()}`},analysis.severity),analysis.safetyHazard && React.createElement('span',{key:'safety',className:'safety-warning'},[ React.createElement('i',{key:'icon',className:'fas fa-exclamation-triangle'}),' Safety Hazard Detected' ])]),React.createElement('div',{key:'issue',className:'issue-section'},[ React.createElement('h5',{key:'title'},'Issue Identified'),React.createElement('p',{key:'text'},analysis.issue)]),React.createElement('div',{key:'repair',className:'repair-section'},[ React.createElement('h5',{key:'title'},'Repair Information'),React.createElement('div',{key:'details',className:'repair-details'},[ React.createElement('div',{key:'type',className:'detail-item'},[ React.createElement('span',{key:'label',className:'detail-label'},'Type:'),React.createElement('span',{key:'value'},analysis.repairType)]),React.createElement('div',{key:'time',className:'detail-item'},[ React.createElement('span',{key:'label',className:'detail-label'},'Time:'),React.createElement('span',{key:'value'},analysis.estimatedTime)]),React.createElement('div',{key:'vendor',className:'detail-item'},[ React.createElement('span',{key:'label',className:'detail-label'},'Vendor:'),React.createElement('span',{key:'value'},analysis.vendorType.charAt(0).toUpperCase()+ analysis.vendorType.slice(1))])])]),React.createElement('div',{key:'cost',className:'cost-section'},[ React.createElement('h5',{key:'title'},'Estimated Cost'),React.createElement('div',{key:'range',className:'cost-range'},`$${analysis.costRange.min}- $${analysis.costRange.max}`)]),analysis.preventionTips && React.createElement('div',{key:'tips',className:'prevention-section'},[ React.createElement('h5',{key:'title'},'Prevention Tips'),React.createElement('ul',{key:'list'},analysis.preventionTips.map((tip,index)=> React.createElement('li',{key:index},tip)))])]),error && React.createElement('div',{key:'error',className:'error-message'},[ React.createElement('i',{key:'icon',className:'fas fa-exclamation-circle'}),' ',error ])])};window.AppModules = window.AppModules ||{};window.AppModules.MaintenancePhotoAnalyzer = MaintenancePhotoAnalyzer;

// WorkingDashboard.jsx
const WorkingDashboard =({data})=>{const stats = React.useMemo(()=>{const totalUnits = data.units.length;const occupiedUnits = data.units.filter(u => u.status === 'occupied').length;const monthlyRevenue = data.units .filter(u => u.status === 'occupied').reduce((sum,u)=> sum + u.rent_amount,0);const thisMonthPayments = data.payments .filter(p =>{const paymentDate = new Date(p.payment_date);const now = new Date();return paymentDate.getMonth()=== now.getMonth()&& paymentDate.getFullYear()=== now.getFullYear()}).reduce((sum,p)=> sum + p.amount,0);return{totalProperties:data.properties.length,totalUnits,occupiedUnits,vacantUnits:totalUnits - occupiedUnits,occupancyRate:totalUnits > 0 ? Math.round((occupiedUnits / totalUnits)* 100):0,monthlyRevenue,collectedThisMonth:thisMonthPayments,activeTenants:data.tenants.filter(t => t.is_active).length,expiringLeases:data.leases.filter(l =>{const endDate = new Date(l.end_date);const daysUntil =(endDate - new Date())/(1000 * 60 * 60 * 24);return daysUntil > 0 && daysUntil <= 60}).length}},[data]);return(<div className="dashboard-working"><div className="dashboard-header"><h1>Property Overview</h1><p>Welcome back! Here's what's happening with your properties.</p></div>{}<div className="metrics-grid"><MetricCard icon="fa-building" title="Properties" value={stats.totalProperties}trend="+2 this month" color="blue" /><MetricCard icon="fa-home" title="Total Units" value={stats.totalUnits}subtitle={`${stats.occupiedUnits}occupied`}color="purple" /><MetricCard icon="fa-percentage" title="Occupancy Rate" value={`${stats.occupancyRate}%`}trend={stats.occupancyRate > 90 ? "Excellent":"Needs attention"}color={stats.occupancyRate > 90 ? "green":"orange"}/><MetricCard icon="fa-dollar-sign" title="Monthly Revenue" value={`$${stats.monthlyRevenue.toLocaleString()}`}subtitle={`$${stats.collectedThisMonth.toLocaleString()}collected`}color="green" /></div>{}<div className="action-items-section"><h2>Action Items</h2><div className="action-items-grid">{stats.vacantUnits > 0 &&(<ActionItem icon="fa-door-open" title={`${stats.vacantUnits}Vacant Units`}description="List these units to maximize revenue" action="List Units" urgency="high" />)}{stats.expiringLeases > 0 &&(<ActionItem icon="fa-calendar-alt" title={`${stats.expiringLeases}Expiring Leases`}description="Contact tenants for renewal" action="View Leases" urgency="medium" />)}<ActionItem icon="fa-chart-line" title="Revenue Optimization" description="AI found $3,500/mo in potential increases" action="View Analysis" urgency="low" /></div></div>{}<div className="recent-activity"><h2>Recent Activity</h2><div className="activity-list">{data.payments.slice(0,5).map((payment,idx)=>(<div key={idx}className="activity-item"><i className="fas fa-dollar-sign"></i><div className="activity-content"><p>Payment received:${payment.amount}</p><span>{new Date(payment.payment_date).toLocaleDateString()}</span></div></div>))}</div></div></div>)};const MetricCard =({icon,title,value,subtitle,trend,color})=>(<div className={`metric-card metric-${color}`}><div className="metric-icon"><i className={`fas ${icon}`}></i></div><div className="metric-content"><h3>{title}</h3><div className="metric-value">{value}</div>{subtitle && <div className="metric-subtitle">{subtitle}</div>}{trend && <div className="metric-trend">{trend}</div>}</div></div>);const ActionItem =({icon,title,description,action,urgency})=>(<div className={`action-item urgency-${urgency}`}><div className="action-icon"><i className={`fas ${icon}`}></i></div><div className="action-content"><h4>{title}</h4><p>{description}</p><button className="action-button">{action}</button></div><div className={`urgency-indicator urgency-${urgency}`}></div></div>);window.AppModules = window.AppModules ||{};window.AppModules.WorkingDashboard = WorkingDashboard;

// AIEmailSystem.jsx
const AIEmailSystem =({userType,userId,userName,userProperties = []})=>{const [activeView,setActiveView] = React.useState('inbox');const [emails,setEmails] = React.useState([]);const [selectedEmail,setSelectedEmail] = React.useState(null);const [showCompose,setShowCompose] = React.useState(false);const [searchQuery,setSearchQuery] = React.useState('');const [selectedFolder,setSelectedFolder] = React.useState('inbox');const [loading,setLoading] = React.useState(true);const [aiAssistantOpen,setAiAssistantOpen] = React.useState(false);const [composeData,setComposeData] = React.useState({to:'',cc:'',bcc:'',subject:'',body:'',priority:'normal',isHtml:true,attachments:[],template:'',propertyContext:'',aiSuggestions:[]});React.useEffect(()=>{loadEmails()},[selectedFolder,userType]);const loadEmails = async()=>{setLoading(true);try{const mockEmails = [{id:'1',from:{email:'tenant@example.com',name:'Sarah Johnson'},to:[{email:`${userName.toLowerCase()}@property.com`,name:userName}],subject:'Maintenance Request Follow-up',body:'Hi,I wanted to follow up on my maintenance request from last week. The AC is still making noise.',date:new Date(Date.now()- 1000 * 60 * 60 * 2).toISOString(),isRead:false,isStarred:false,priority:'high',labels:['maintenance','tenant'],propertyId:userProperties[0]?.id,propertyName:userProperties[0]?.name,hasAttachments:false,threadId:'thread-1'},{id:'2',from:{email:'owner@example.com',name:'Mark Thompson'},to:[{email:`${userName.toLowerCase()}@property.com`,name:userName}],subject:'Monthly Property Report Request',body:'Could you please send me the monthly report for Oak Grove Residences? I need it for my tax preparation.',date:new Date(Date.now()- 1000 * 60 * 60 * 6).toISOString(),isRead:true,isStarred:true,priority:'normal',labels:['owner','reports'],propertyId:userProperties[1]?.id,propertyName:userProperties[1]?.name,hasAttachments:false,threadId:'thread-2'},{id:'3',from:{email:'vendor@example.com',name:'HVAC Solutions Inc'},to:[{email:`${userName.toLowerCase()}@property.com`,name:userName}],subject:'Quote for HVAC Maintenance Contract',body:'Please find attached our quote for annual HVAC maintenance across your properties.',date:new Date(Date.now()- 1000 * 60 * 60 * 24).toISOString(),isRead:false,isStarred:false,priority:'normal',labels:['vendor','contracts'],propertyId:'all',propertyName:'All Properties',hasAttachments:true,threadId:'thread-3'}];let filteredEmails = mockEmails;switch(selectedFolder){case 'inbox':filteredEmails = mockEmails.filter(email => !email.isArchived && !email.isDeleted);break;case 'starred':filteredEmails = mockEmails.filter(email => email.isStarred);break;case 'sent':filteredEmails = [];break;case 'drafts':filteredEmails = [];break}setEmails(filteredEmails)}catch(error){console.error('Error loading emails:',error)}finally{setLoading(false)}};const composeEmail =()=>{setComposeData({to:'',cc:'',bcc:'',subject:'',body:'',priority:'normal',isHtml:true,attachments:[],template:'',propertyContext:'',aiSuggestions:[]});setShowCompose(true)};const replyToEmail =(email)=>{setComposeData({to:email.from.email,cc:'',bcc:'',subject:`Re:${email.subject}`,body:`\n\n---\nOn ${new Date(email.date).toLocaleString()},${email.from.name}wrote:\n${email.body}`,priority:email.priority,isHtml:true,attachments:[],template:'',propertyContext:email.propertyId,aiSuggestions:[]});setShowCompose(true)};const getAIEmailSuggestions = async(context)=>{await new Promise(resolve => setTimeout(resolve,1000));if(context.includes('maintenance')){return [ "Thank you for your maintenance request. I've forwarded this to our maintenance team and you can expect a response within 24 hours.","I understand your concern about the AC. I'll schedule a technician to inspect the unit this week. You'll receive a confirmation call.","We appreciate your patience with this maintenance issue. I'm personally ensuring this gets priority attention." ]}if(context.includes('report')){return [ "I'll have your monthly property report prepared and sent to you by end of business today.","Your property report is ready. I'm attaching the detailed financial summary for your review.","Thank you for your request. The monthly report shows strong performance across all metrics." ]}if(context.includes('vendor')|| context.includes('quote')){return [ "Thank you for your quote. I'll review the proposal and get back to you within 2 business days.","I appreciate the detailed quote. I'd like to schedule a meeting to discuss the terms and timeline.","Your proposal looks comprehensive. I'll need to review this with our team and will respond shortly." ]}return [ "Thank you for your email. I'll review your request and respond as soon as possible.","I've received your message and will address your concerns promptly.","Thank you for reaching out. I'll look into this matter and get back to you soon." ]};const generateAIResponse = async(originalEmail)=>{const suggestions = await getAIEmailSuggestions(originalEmail.body + ' ' + originalEmail.subject);setComposeData(prev =>({...prev,aiSuggestions:suggestions}))};const useAISuggestion =(suggestion)=>{setComposeData(prev =>({...prev,body:suggestion + prev.body}))};const smartCompose = async(prompt)=>{await new Promise(resolve => setTimeout(resolve,1000));const templates ={'maintenance update':{subject:'Maintenance Update - Unit [UNIT_NUMBER]',body:`Dear [TENANT_NAME],I wanted to update you on the maintenance request you submitted. Our team has completed the necessary repairs and everything should be working properly now. If you notice any further issues,please don't hesitate to reach out to us immediately. Thank you for your patience and for being a valued resident. Best regards,${userName}Property Management`},'rent reminder':{subject:'Friendly Rent Payment Reminder',body:`Dear [TENANT_NAME],This is a friendly reminder that your rent payment for [PROPERTY_NAME],Unit [UNIT_NUMBER] is due on [DUE_DATE]. If you have already submitted your payment,please disregard this message. If you need assistance setting up automatic payments or have any questions,please contact our office. Thank you for being a responsible tenant. Best regards,${userName}Property Management`},'owner report':{subject:'Monthly Property Report - [PROPERTY_NAME]',body:`Dear [OWNER_NAME],Please find attached your monthly property report for [PROPERTY_NAME]. The report includes:• Rental income and expenses • Maintenance activities • Occupancy status • Financial summary If you have any questions about the report or would like to discuss your property's performance,please feel free to contact me. Best regards,${userName}Property Management`}};const template = templates[prompt.toLowerCase()] ||{subject:'Property Management Communication',body:`Dear [RECIPIENT_NAME],Thank you for your message. I'll address your inquiry promptly and ensure you receive the assistance you need. Best regards,${userName}Property Management`};setComposeData(prev =>({...prev,subject:template.subject,body:template.body}))};const sendEmail = async()=>{try{window.ConversationLogService?.logConversation({type:'email',participantId:composeData.to,participantName:composeData.to.split('@')[0],participantType:'external',propertyId:composeData.propertyContext,content:`Subject:${composeData.subject}\n\n${composeData.body}`,channel:'email_system',isInbound:false,metadata:{emailPriority:composeData.priority,hasAttachments:composeData.attachments.length > 0,isHtml:composeData.isHtml}});await new Promise(resolve => setTimeout(resolve,1000));window.showNotification?.('success','Email sent successfully');setShowCompose(false);loadEmails()}catch(error){console.error('Error sending email:',error);window.showNotification?.('error','Failed to send email')}};const markAsRead =(emailId,isRead = true)=>{setEmails(prev => prev.map(email => email.id === emailId ?{...email,isRead}:email))};const toggleStar =(emailId)=>{setEmails(prev => prev.map(email => email.id === emailId ?{...email,isStarred:!email.isStarred}:email))};const formatTimeAgo =(timestamp)=>{const date = new Date(timestamp);const now = new Date();const diffMs = now - date;const diffHours = Math.floor(diffMs / 3600000);const diffDays = Math.floor(diffMs / 86400000);if(diffHours < 1)return 'just now';if(diffHours < 24)return `${diffHours}h ago`;if(diffDays < 7)return `${diffDays}d ago`;return date.toLocaleDateString('en-US',{month:'short',day:'numeric'})};const getPriorityColor =(priority)=>{switch(priority){case 'high':return '#ef4444';case 'medium':return '#f59e0b';default:return '#6b7280'}};return(<div className="ai-email-system">{}<div className="email-header"><div className="header-content"><h2><i className="fas fa-envelope"></i> Smart Email </h2><p>AI-powered email management for{userName}</p></div><div className="header-actions"><button className="compose-btn" onClick={composeEmail}><i className="fas fa-pen"></i> Compose </button><button className="ai-assistant-btn" onClick={()=> setAiAssistantOpen(!aiAssistantOpen)}><i className="fas fa-robot"></i> AI Help </button></div></div><div className="email-container">{}<div className="email-sidebar"><div className="folders-section"><h3>Folders</h3><div className="folder-list">{[{id:'inbox',name:'Inbox',icon:'fa-inbox',count:emails.filter(e => !e.isRead).length},{id:'starred',name:'Starred',icon:'fa-star',count:emails.filter(e => e.isStarred).length},{id:'sent',name:'Sent',icon:'fa-paper-plane',count:0},{id:'drafts',name:'Drafts',icon:'fa-file-alt',count:0},{id:'archive',name:'Archive',icon:'fa-archive',count:0}].map(folder =>(<button key={folder.id}className={`folder-item ${selectedFolder === folder.id ? 'active':''}`}onClick={()=> setSelectedFolder(folder.id)}><i className={`fas ${folder.icon}`}></i><span>{folder.name}</span>{folder.count > 0 && <span className="folder-count">{folder.count}</span>}</button>))}</div></div><div className="labels-section"><h3>Labels</h3><div className="label-list">{['maintenance','tenant','owner','vendor','reports','contracts'].map(label =>(<button key={label}className="label-item"><span className={`label-color ${label}`}></span><span>{label}</span></button>))}</div></div></div>{}<div className="email-list"><div className="list-header"><div className="search-container"><i className="fas fa-search"></i><input type="text" placeholder="Search emails..." value={searchQuery}onChange={(e)=> setSearchQuery(e.target.value)}className="search-input" /></div><div className="list-actions"><button className="action-btn"><i className="fas fa-sync"></i></button><button className="action-btn"><i className="fas fa-cog"></i></button></div></div><div className="emails-container">{loading ?(<div className="loading-state"><i className="fas fa-spinner fa-spin"></i><p>Loading emails...</p></div>):emails.length === 0 ?(<div className="empty-state"><i className="fas fa-envelope-open"></i><h3>No emails in{selectedFolder}</h3><p>Your{selectedFolder}is empty</p></div>):(emails .filter(email => email.subject.toLowerCase().includes(searchQuery.toLowerCase())|| email.from.name.toLowerCase().includes(searchQuery.toLowerCase())|| email.body.toLowerCase().includes(searchQuery.toLowerCase())).map(email =>(<EmailItem key={email.id}email={email}selected={selectedEmail?.id === email.id}onClick={()=>{setSelectedEmail(email);markAsRead(email.id)}}onStar={()=> toggleStar(email.id)}onReply={()=> replyToEmail(email)}formatTimeAgo={formatTimeAgo}getPriorityColor={getPriorityColor}/>)))}</div></div>{}<div className="email-detail">{selectedEmail ?(<EmailDetail email={selectedEmail}onReply={()=> replyToEmail(selectedEmail)}onGenerateAI={()=> generateAIResponse(selectedEmail)}formatTimeAgo={formatTimeAgo}getPriorityColor={getPriorityColor}/>):(<div className="no-email-selected"><i className="fas fa-envelope-open-text"></i><h3>Select an email</h3><p>Choose an email from the list to read</p></div>)}</div>{}{aiAssistantOpen &&(<div className="ai-email-panel"><AIEmailAssistant onClose={()=> setAiAssistantOpen(false)}onSmartCompose={smartCompose}userProperties={userProperties}/></div>)}</div>{}{showCompose &&(<EmailComposeModal composeData={composeData}setComposeData={setComposeData}onSend={sendEmail}onClose={()=> setShowCompose(false)}onGenerateAI={generateAIResponse}userProperties={userProperties}/>)}</div>)};const EmailItem =({email,selected,onClick,onStar,onReply,formatTimeAgo,getPriorityColor})=>{return(<div className={`email-item ${selected ? 'selected':''}${!email.isRead ? 'unread':''}`}onClick={onClick}><div className="email-checkbox"><input type="checkbox" /></div><div className="email-star" onClick={(e)=>{e.stopPropagation();onStar()}}><i className={`${email.isStarred ? 'fas':'far'}fa-star`}></i></div><div className="email-from"><span className="from-name">{email.from.name}</span><span className="from-email">{email.from.email}</span></div><div className="email-content"><div className="email-subject-line"><span className="email-subject">{email.subject}</span>{email.priority !== 'normal' &&(<span className="priority-indicator" style={{color:getPriorityColor(email.priority)}}><i className="fas fa-exclamation"></i></span>)}</div><div className="email-preview">{email.body.substring(0,100)}...</div><div className="email-labels">{email.labels.map(label =>(<span key={label}className={`email-label ${label}`}>{label}</span>))}</div></div><div className="email-meta"><span className="email-time">{formatTimeAgo(email.date)}</span>{email.hasAttachments && <i className="fas fa-paperclip"></i>}<div className="email-actions"><button className="action-btn" onClick={(e)=>{e.stopPropagation();onReply()}}><i className="fas fa-reply"></i></button></div></div></div>)};const EmailDetail =({email,onReply,onGenerateAI,formatTimeAgo,getPriorityColor})=>{return(<div className="email-detail-view"><div className="detail-header"><div className="email-subject-header"><h2>{email.subject}</h2>{email.priority !== 'normal' &&(<span className="priority-badge" style={{backgroundColor:getPriorityColor(email.priority)}}>{email.priority}</span>)}</div><div className="detail-actions"><button className="detail-action-btn" onClick={onReply}><i className="fas fa-reply"></i> Reply </button><button className="detail-action-btn" onClick={onGenerateAI}><i className="fas fa-robot"></i> AI Suggest </button></div></div><div className="email-participants"><div className="participant"><strong>From:</strong>{email.from.name}&lt;{email.from.email}&gt;</div><div className="participant"><strong>To:</strong>{email.to.map(t => `${t.name}<${t.email}>`).join(',')}</div><div className="participant"><strong>Date:</strong>{new Date(email.date).toLocaleString()}</div>{email.propertyName &&(<div className="participant"><strong>Property:</strong>{email.propertyName}</div>)}</div><div className="email-body"><div dangerouslySetInnerHTML={{__html:email.body.replace(/\n/g,'<br>')}}/></div>{email.hasAttachments &&(<div className="email-attachments"><h4>Attachments</h4><div className="attachment-list"><div className="attachment-item"><i className="fas fa-file-pdf"></i><span>quote_hvac_maintenance.pdf</span><button className="download-btn"><i className="fas fa-download"></i></button></div></div></div>)}</div>)};const AIEmailAssistant =({onClose,onSmartCompose,userProperties})=>{const [prompt,setPrompt] = React.useState('');const quickTemplates = [ 'maintenance update','rent reminder','owner report','lease renewal','vendor response','tenant welcome' ];return(<div className="ai-email-assistant"><div className="assistant-header"><h3><i className="fas fa-robot"></i> AI Email Assistant </h3><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="assistant-content"><div className="quick-templates"><h4>Quick Templates</h4><div className="template-grid">{quickTemplates.map(template =>(<button key={template}className="template-btn" onClick={()=> onSmartCompose(template)}>{template.replace('-',' ').toUpperCase()}</button>))}</div></div><div className="custom-prompt"><h4>Custom Email</h4><textarea value={prompt}onChange={(e)=> setPrompt(e.target.value)}placeholder="Describe the email you want to compose..." rows="3" /><button className="generate-btn" onClick={()=> onSmartCompose(prompt)}disabled={!prompt.trim()}><i className="fas fa-magic"></i> Generate Email </button></div><div className="ai-tips"><h4>AI Tips</h4><ul><li>I can help draft professional responses</li><li>Generate templates for common scenarios</li><li>Suggest tone and language improvements</li><li>Auto-fill property and tenant information</li></ul></div></div></div>)};const EmailComposeModal =({composeData,setComposeData,onSend,onClose,onGenerateAI,userProperties})=>{const [isProcessing,setIsProcessing] = React.useState(false);const handleSend = async()=>{setIsProcessing(true);await onSend();setIsProcessing(false)};return(<div className="modal-overlay" onClick={onClose}><div className="email-compose-modal" onClick={(e)=> e.stopPropagation()}><div className="compose-header"><h3>Compose Email</h3><div className="compose-actions"><button className="ai-help-btn" onClick={()=> onGenerateAI({subject:composeData.subject,body:composeData.body})}><i className="fas fa-robot"></i> AI Help </button><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div></div><div className="compose-form"><div className="form-row"><label>To:</label><input type="email" value={composeData.to}onChange={(e)=> setComposeData(prev =>({...prev,to:e.target.value}))}placeholder="recipient@example.com" className="form-input" /></div><div className="form-row"><label>Subject:</label><input type="text" value={composeData.subject}onChange={(e)=> setComposeData(prev =>({...prev,subject:e.target.value}))}placeholder="Email subject" className="form-input" /></div><div className="form-row"><label>Property Context:</label><select value={composeData.propertyContext}onChange={(e)=> setComposeData(prev =>({...prev,propertyContext:e.target.value}))}className="form-select" ><option value="">Select property...</option>{userProperties.map(property =>(<option key={property.id}value={property.id}>{property.name}</option>))}</select></div><div className="form-row"><label>Message:</label><textarea value={composeData.body}onChange={(e)=> setComposeData(prev =>({...prev,body:e.target.value}))}placeholder="Type your message..." rows="12" className="form-textarea" /></div>{composeData.aiSuggestions.length > 0 &&(<div className="ai-suggestions"><h4>AI Suggestions:</h4>{composeData.aiSuggestions.map((suggestion,index)=>(<button key={index}className="suggestion-btn" onClick={()=>{setComposeData(prev =>({...prev,body:suggestion}))}}>{suggestion.substring(0,80)}... </button>))}</div>)}</div><div className="compose-footer"><div className="footer-left"><button className="attach-btn"><i className="fas fa-paperclip"></i> Attach </button><select value={composeData.priority}onChange={(e)=> setComposeData(prev =>({...prev,priority:e.target.value}))}className="priority-select" ><option value="low">Low Priority</option><option value="normal">Normal</option><option value="high">High Priority</option></select></div><div className="footer-right"><button className="btn-secondary" onClick={onClose}>Cancel</button><button className="btn-primary" onClick={handleSend}disabled={!composeData.to || !composeData.subject || isProcessing}>{isProcessing ?(<><i className="fas fa-spinner fa-spin"></i> Sending... </>):(<><i className="fas fa-paper-plane"></i> Send </>)}</button></div></div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.AIEmailSystem = AIEmailSystem;

// LeaseCard.jsx
const LeaseCard =({lease,unit,tenant,onTerminate})=>{const [showDocument,setShowDocument] = React.useState(false);const daysUntilExpiry = Math.floor((new Date(lease.end_date)- new Date())/(1000 * 60 * 60 * 24));return(<><div className={`lease-card ${lease.is_expiring_soon ? 'expiring':''}`}><div className="lease-header"><div className="lease-info"><h3>Unit{unit?.unit_number}-{tenant?.first_name}{tenant?.last_name}</h3><p className="lease-property">{unit?.property_name}</p></div><div className={`lease-status ${lease.status}`}>{lease.status.toUpperCase()}</div></div><div className="lease-details"><div className="detail-row"><span className="label">Term:</span><span>{new Date(lease.start_date).toLocaleDateString()}-{new Date(lease.end_date).toLocaleDateString()}</span></div><div className="detail-row"><span className="label">Monthly Rent:</span><span className="rent">${lease.monthly_rent}</span></div><div className="detail-row"><span className="label">Security Deposit:</span><span>${lease.deposit_amount}</span></div>{lease.is_expiring_soon &&(<div className="expiry-warning"><i className="fas fa-exclamation-triangle"></i> Expires in{daysUntilExpiry}days </div>)}</div><div className="lease-actions"><button className="btn-icon" onClick={()=> setShowDocument(true)}title="View Lease Document" ><i className="fas fa-file-contract"></i></button><button className="btn-icon" onClick={()=>{}}title="Renew Lease" ><i className="fas fa-sync"></i></button><button className="btn-icon danger" onClick={onTerminate}title="Terminate Lease" ><i className="fas fa-times-circle"></i></button></div></div>{showDocument &&(<div className="modal-overlay" onClick={()=> setShowDocument(false)}><div className="modal large" onClick={e => e.stopPropagation()}><div className="modal-header"><h2>Lease Agreement</h2><button className="close-btn" onClick={()=> setShowDocument(false)}><i className="fas fa-times"></i></button></div><LeaseDocument lease={lease}unit={unit}tenant={tenant}property={unit?.property}/></div></div>)}</>)};window.AppModules = window.AppModules ||{};window.AppModules.LeaseCard = LeaseCard;

// AIShowingScheduler.jsx
const AIShowingScheduler =({unitId = null,embedded = false})=>{const [showings,setShowings] = React.useState([]);const [chatMode,setChatMode] = React.useState(true);const [message,setMessage] = React.useState('');const [conversation,setConversation] = React.useState([]);const [loading,setLoading] = React.useState(false);const getAvailableTimes =()=>{const times = [];const now = new Date();for(let i = 0;i < 7;i++){const date = new Date(now);date.setDate(date.getDate()+ i);if(i === 0 && date.getHours()>= 17)continue;['10:00 AM','2:00 PM','4:00 PM'].forEach(time =>{times.push({date:date.toISOString().split('T')[0],time:time,available:true})})}return times};const getAgentCalendars =()=>{return [{agent_id:'agent1',name:'Sarah Miller',available:true},{agent_id:'agent2',name:'John Smith',available:true}]};const handleScheduleRequest = async(request)=>{setLoading(true);try{const response = await window.ApiService.post('/api/ai/schedule-showing',{request:request,unit_id:unitId,available_times:getAvailableTimes(),agent_calendars:getAgentCalendars()});if(response.clarification_needed){setConversation(prev => [...prev,{role:'user',content:request},{role:'assistant',content:response.clarification_message,options:response.time_options}]);return}const showing = await window.ApiService.post('/api/showings',response.showing_details);await window.ApiService.post('/api/ai/send-confirmation',{showing:showing,method:'sms_and_email'});await window.ApiService.post('/api/ai/schedule-followup',{showing_id:showing.id,delay_hours:1});setConversation(prev => [...prev,{role:'user',content:request},{role:'assistant',content:`Perfect! I've scheduled your tour for ${showing.formatted_time}. You'll receive a confirmation shortly.`,showing:showing}]);window.Toast.success('Tour scheduled successfully!')}catch(error){setConversation(prev => [...prev,{role:'user',content:request},{role:'assistant',content:"I'm sorry,I couldn't schedule that tour. Please try a different time or contact our office directly."}]);window.Toast.error('Failed to schedule tour')}finally{setLoading(false);setMessage('')}};const handleTimeOptionClick = async(option)=>{await handleScheduleRequest(`Schedule tour for ${option.date}at ${option.time}`)};return(<div className={`ai-showing-scheduler ${embedded ? 'embedded':''}`}><div className="scheduler-header"><h3><i className="fas fa-calendar-alt"></i> Schedule a Tour </h3><button className="mode-toggle" onClick={()=> setChatMode(!chatMode)}><i className={`fas fa-${chatMode ? 'calendar':'comments'}`}></i>{chatMode ? 'Calendar View':'Chat Mode'}</button></div>{chatMode ?(<div className="chat-scheduler"><div className="chat-intro"><p>Just tell me when you'd like to visit! Try something like:</p><div className="example-messages"><button onClick={()=> setMessage("I'd like to see the unit tomorrow at 2pm")}> "Tomorrow at 2pm" </button><button onClick={()=> setMessage("Can I schedule a tour for next Tuesday?")}> "Next Tuesday" </button><button onClick={()=> setMessage("What times are available this weekend?")}> "This weekend" </button></div></div><div className="chat-messages">{conversation.map((msg,idx)=>(<div key={idx}className={`chat-message ${msg.role}`}><div className="message-content">{msg.content}{msg.options &&(<div className="time-options">{msg.options.map((option,oidx)=>(<button key={oidx}onClick={()=> handleTimeOptionClick(option)}className="time-option" >{option.date}at{option.time}</button>))}</div>)}{msg.showing &&(<div className="showing-confirmation"><i className="fas fa-check-circle"></i> Tour confirmed for{msg.showing.formatted_time}</div>)}</div></div>))}{loading &&(<div className="chat-message assistant"><div className="typing-indicator"><span></span><span></span><span></span></div></div>)}</div><div className="chat-input"><input type="text" placeholder="e.g.,'I'd like to see unit 205 tomorrow at 3pm'" value={message}onChange={(e)=> setMessage(e.target.value)}onKeyPress={(e)=>{if(e.key === 'Enter' && message.trim()){handleScheduleRequest(message)}}}disabled={loading}/><button onClick={()=> message.trim()&& handleScheduleRequest(message)}disabled={loading || !message.trim()}><i className="fas fa-paper-plane"></i></button></div></div>):(<div className="calendar-scheduler"><h4>Select a time slot:</h4><div className="time-slots-grid">{getAvailableTimes().slice(0,12).map((slot,idx)=>(<button key={idx}className="time-slot" onClick={()=> handleScheduleRequest(`Schedule tour for ${slot.date}at ${slot.time}`)}><div className="slot-date">{new Date(slot.date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric'})}</div><div className="slot-time">{slot.time}</div></button>))}</div></div>)}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.AIShowingScheduler = AIShowingScheduler;

// SimpleDashboard.jsx
const SimpleDashboard =({user})=>{const [editMode,setEditMode] = React.useState(false);const [draggingWidget,setDraggingWidget] = React.useState(null);const [dragOffset,setDragOffset] = React.useState({x:0,y:0});const [resizingWidget,setResizingWidget] = React.useState(null);const [showAddWidget,setShowAddWidget] = React.useState(false);const [widgets,setWidgets] = React.useState([{id:'widget_1',widget_type:'occupancy',position:{x:0,y:0,w:2,h:1},data:{rate:92,occupied:184,total:200,change:3.5}},{id:'widget_2',widget_type:'revenue',position:{x:2,y:0,w:2,h:1},data:{current:2500000,target:3000000,change:12.5}},{id:'widget_3',widget_type:'maintenance',position:{x:0,y:1,w:1,h:1},data:{open:18,urgent:3,completed:45}},{id:'widget_4',widget_type:'calendar',position:{x:1,y:1,w:2,h:1},data:{today:5,nextEvent:'2:00 PM - Vendor Meeting'}},{id:'widget_5',widget_type:'leases',position:{x:3,y:1,w:1,h:1},data:{expiring:8,thisMonth:3}},{id:'widget_6',widget_type:'delinquency',position:{x:0,y:2,w:3,h:1},data:{total:188,overdue_0_30:73,overdue_31_60:64,overdue_60_plus:51,total_amount:10417}},{id:'widget_7',widget_type:'insurance',position:{x:3,y:2,w:1,h:1},data:{total_policies:1457,expiring_30d:20,coverage_rate:89.4,missing_insurance:108}}]);const handleMouseDown =(e,widgetId)=>{if(!editMode)return;const widget = widgets.find(w => w.id === widgetId);setDraggingWidget(widgetId);setDragOffset({x:e.clientX -(widget.position.x * window.innerWidth * 0.25),y:e.clientY -(widget.position.y * 96)})};const handleMouseMove = React.useCallback((e)=>{if(draggingWidget){const newX = Math.round((e.clientX - dragOffset.x)/(window.innerWidth * 0.25));const newY = Math.round((e.clientY - dragOffset.y)/ 96);setWidgets(widgets => widgets.map(w => w.id === draggingWidget ?{...w,position:{...w.position,x:Math.max(0,Math.min(3,newX)),y:Math.max(0,newY)}}:w))}if(resizingWidget){const widget = widgets.find(w => w.id === resizingWidget);const gridWidth = window.innerWidth * 0.25;const newW = Math.round((e.clientX -(widget.position.x * gridWidth))/ gridWidth);const newH = Math.round((e.clientY -(widget.position.y * 96))/ 96);setWidgets(widgets => widgets.map(w => w.id === resizingWidget ?{...w,position:{...w.position,w:Math.max(1,Math.min(4 - w.position.x,newW)),h:Math.max(1,newH)}}:w))}},[draggingWidget,resizingWidget,dragOffset]);const handleMouseUp = React.useCallback(()=>{setDraggingWidget(null);setResizingWidget(null)},[]);React.useEffect(()=>{if(draggingWidget || resizingWidget){document.addEventListener('mousemove',handleMouseMove);document.addEventListener('mouseup',handleMouseUp);return()=>{document.removeEventListener('mousemove',handleMouseMove);document.removeEventListener('mouseup',handleMouseUp)}}},[draggingWidget,resizingWidget,handleMouseMove,handleMouseUp]);const findEmptyPosition =()=>{const occupiedPositions = new Set();widgets.forEach(w =>{for(let x = w.position.x;x < w.position.x + w.position.w;x++){for(let y = w.position.y;y < w.position.y + w.position.h;y++){occupiedPositions.add(`${x},${y}`)}}});for(let y = 0;y < 10;y++){for(let x = 0;x < 4;x++){if(!occupiedPositions.has(`${x},${y}`)){return{x,y,w:1,h:1}}}}return{x:0,y:0,w:1,h:1}};const handleAddWidget =(widgetType)=>{const newWidget ={id:`widget_${Date.now()}`,widget_type:widgetType,position:findEmptyPosition(),data:getDefaultWidgetData(widgetType)};setWidgets([...widgets,newWidget]);setShowAddWidget(false)};const getDefaultWidgetData =(type)=>{switch(type){case 'occupancy':return{rate:85,occupied:170,total:200,change:2.5};case 'revenue':return{current:1800000,target:2000000,change:8.3};case 'maintenance':return{open:12,urgent:2,completed:35};case 'calendar':return{today:3,nextEvent:'10:00 AM - Staff Meeting'};case 'leases':return{expiring:5,thisMonth:2};case 'delinquency':return{total:145,overdue_0_30:58,overdue_31_60:47,overdue_60_plus:40,total_amount:8750};case 'insurance':return{total_policies:1200,expiring_30d:15,coverage_rate:87.2,missing_insurance:85};default:return{}}};const renderWidget =(widget)=>{const baseStyle ={position:'absolute',left:`${widget.position.x * 25}%`,top:`${widget.position.y * 96}px`,width:`${widget.position.w * 25 - 2}%`,height:`${widget.position.h * 96 - 16}px`,minHeight:'80px',padding:widget.position.h === 1 ? '8px':'12px',background:'linear-gradient(135deg,rgba(255,255,255,0.1)0%,rgba(255,255,255,0.05)100%)',backdropFilter:'blur(20px)',border:'1px solid rgba(255,255,255,0.2)',borderRadius:'12px',color:'white',transition:'all 300ms ease',overflow:'hidden',display:'flex',flexDirection:'column',boxShadow:'0 8px 32px rgba(0,0,0,0.12)',cursor:editMode ? 'move':'default',userSelect:editMode ? 'none':'auto'};return(<div key={widget.id}style={baseStyle}onMouseDown={(e)=> handleMouseDown(e,widget.id)}>{}<div style={{fontSize:'10px',fontWeight:'600',opacity:0.7,marginBottom:'8px',textTransform:'uppercase',letterSpacing:'0.8px',flexShrink:0,display:'flex',justifyContent:'space-between',alignItems:'center'}}><span>{widget.widget_type.replace(/_/g,' ')}</span>{editMode &&(<span style={{width:'8px',height:'8px',background:'rgba(255,255,255,0.3)',borderRadius:'50%',display:'inline-block'}}/>)}</div>{}<div style={{flex:1,display:'flex',flexDirection:'column',justifyContent:'center',minHeight:0,overflow:'hidden'}}>{widget.widget_type === 'occupancy' &&(<div style={{textAlign:'center'}}><div style={{fontSize:widget.position.h === 1 ? '20px':'28px',fontWeight:'700',lineHeight:1,color:'#10b981',marginBottom:widget.position.h === 1 ? '1px':'2px'}}>{widget.data.rate}% </div>{widget.position.h > 1 &&(<div style={{fontSize:'10px',opacity:0.6,whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'}}>{widget.data.occupied}/{widget.data.total}units </div>)}</div>)}{widget.widget_type === 'revenue' &&(<div style={{textAlign:'center'}}><div style={{fontSize:widget.position.h === 1 ? '20px':'28px',fontWeight:'700',lineHeight:1,color:'#3b82f6',marginBottom:widget.position.h === 1 ? '1px':'2px'}}> ${(widget.data.current / 1000000).toFixed(1)}M </div>{widget.position.h > 1 &&(<><div style={{fontSize:'10px',opacity:0.6}}> Monthly Revenue </div><div style={{fontSize:'9px',opacity:0.5,color:'#10b981',marginTop:'2px'}}> +{widget.data.change}% </div></>)}</div>)}{widget.widget_type === 'maintenance' &&(<div style={{textAlign:'center'}}><div style={{fontSize:widget.position.h === 1 ? '20px':'28px',fontWeight:'700',lineHeight:1,color:'#f59e0b',marginBottom:widget.position.h === 1 ? '1px':'2px'}}>{widget.data.open}</div>{widget.position.h > 1 &&(<><div style={{fontSize:'10px',opacity:0.6}}> Open </div>{widget.data.urgent > 0 &&(<div style={{fontSize:'9px',opacity:0.8,color:'#ef4444',marginTop:'2px',fontWeight:'600'}}>{widget.data.urgent}urgent </div>)}</>)}</div>)}{widget.widget_type === 'calendar' &&(<div><div style={{fontSize:widget.position.h === 1 ? '20px':'24px',fontWeight:'700',lineHeight:1,marginBottom:'4px'}}>{widget.data.today}Events </div><div style={{fontSize:'10px',opacity:0.6,whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis',paddingRight:'4px'}}>{widget.data.nextEvent}</div></div>)}{widget.widget_type === 'leases' &&(<div style={{textAlign:'center'}}><div style={{fontSize:widget.position.h === 1 ? '20px':'28px',fontWeight:'700',lineHeight:1,color:'#8b5cf6',marginBottom:widget.position.h === 1 ? '1px':'2px'}}>{widget.data.expiring}</div>{widget.position.h > 1 &&(<><div style={{fontSize:'10px',opacity:0.6}}> Expiring </div><div style={{fontSize:'9px',opacity:0.5,marginTop:'2px'}}>{widget.data.thisMonth}this month </div></>)}</div>)}{widget.widget_type === 'delinquency' &&(<div style={{padding:'8px'}}><div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:'8px'}}><div style={{fontSize:'16px',fontWeight:'600',color:'#1f2937'}}> Delinquencies </div><div style={{fontSize:'18px',fontWeight:'700',color:'#ef4444'}}> ${widget.data.total_amount.toLocaleString()}</div></div><div style={{display:'grid',gridTemplateColumns:'1fr 1fr 1fr',gap:'8px',fontSize:'12px'}}><div style={{textAlign:'center'}}><div style={{fontWeight:'600',color:'#f59e0b'}}>{widget.data.overdue_0_30}</div><div style={{opacity:0.6}}>0-30 Days</div></div><div style={{textAlign:'center'}}><div style={{fontWeight:'600',color:'#ef4444'}}>{widget.data.overdue_31_60}</div><div style={{opacity:0.6}}>31-60 Days</div></div><div style={{textAlign:'center'}}><div style={{fontWeight:'600',color:'#991b1b'}}>{widget.data.overdue_60_plus}</div><div style={{opacity:0.6}}>60+ Days</div></div></div></div>)}{widget.widget_type === 'insurance' &&(<div style={{textAlign:'center'}}><div style={{fontSize:widget.position.h === 1 ? '20px':'28px',fontWeight:'700',lineHeight:1,color:'#3b82f6',marginBottom:widget.position.h === 1 ? '1px':'2px'}}>{widget.data.coverage_rate}% </div><div style={{fontSize:'10px',opacity:0.6}}> Coverage Rate </div>{widget.position.h > 1 &&(<><div style={{fontSize:'9px',opacity:0.5,marginTop:'2px'}}>{widget.data.expiring_30d}expiring in 30d </div></>)}</div>)}</div>{}{editMode &&(<div style={{position:'absolute',bottom:0,right:0,width:'20px',height:'20px',cursor:'se-resize',zIndex:10}}onMouseDown={(e)=>{e.stopPropagation();setResizingWidget(widget.id)}}><div style={{position:'absolute',bottom:'4px',right:'4px',width:'8px',height:'8px',borderRight:'2px solid rgba(255,255,255,0.5)',borderBottom:'2px solid rgba(255,255,255,0.5)'}}/></div>)}</div>)};return(<div style={{minHeight:'100vh',background:'linear-gradient(135deg,#667eea 0%,#764ba2 100%)',position:'relative',width:'100%'}}>{}<div style={{padding:'20px 24px',background:'rgba(255,255,255,0.1)',backdropFilter:'blur(20px)',borderBottom:'1px solid rgba(255,255,255,0.2)',display:'flex',justifyContent:'space-between',alignItems:'center'}}><h1 style={{color:'white',fontSize:'24px',margin:0}}>Dashboard</h1><button onClick={()=> setEditMode(!editMode)}style={{padding:'8px 16px',background:editMode ? 'rgba(255,255,255,0.9)':'rgba(255,255,255,0.2)',border:'1px solid rgba(255,255,255,0.3)',borderRadius:'8px',color:editMode ? '#667eea':'white',fontSize:'14px',cursor:'pointer',transition:'all 200ms ease'}}>{editMode ? 'Done Editing':'Edit Layout'}</button></div>{}<div style={{position:'relative',padding:'24px',minHeight:'calc(100vh - 84px)'}}><div style={{position:'relative',minHeight:'400px'}}>{widgets.map(renderWidget)}</div></div>{}{editMode &&(<button onClick={()=> setShowAddWidget(true)}style={{position:'fixed',bottom:'24px',right:'24px',width:'56px',height:'56px',borderRadius:'50%',background:'rgba(255,255,255,0.9)',border:'none',boxShadow:'0 4px 12px rgba(0,0,0,0.15)',cursor:'pointer',display:'flex',alignItems:'center',justifyContent:'center',fontSize:'24px',color:'#667eea',transition:'all 200ms ease',zIndex:100}}onMouseEnter={(e)=>{e.currentTarget.style.transform = 'scale(1.1)';e.currentTarget.style.boxShadow = '0 6px 20px rgba(0,0,0,0.2)'}}onMouseLeave={(e)=>{e.currentTarget.style.transform = 'scale(1)';e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)'}}> + </button>)}{}{showAddWidget &&(<div style={{position:'fixed',inset:0,background:'rgba(0,0,0,0.6)',backdropFilter:'blur(4px)',display:'flex',alignItems:'center',justifyContent:'center',zIndex:1000}}onClick={()=> setShowAddWidget(false)}><div style={{background:'rgba(255,255,255,0.95)',backdropFilter:'blur(20px)',borderRadius:'16px',padding:'24px',maxWidth:'600px',width:'90%',maxHeight:'80vh',overflow:'auto'}}onClick={(e)=> e.stopPropagation()}><div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:'20px'}}><h2 style={{margin:0,color:'#1f2937'}}>Add Widget</h2><button onClick={()=> setShowAddWidget(false)}style={{background:'transparent',border:'none',fontSize:'24px',cursor:'pointer',color:'#6b7280',width:'32px',height:'32px',borderRadius:'8px',display:'flex',alignItems:'center',justifyContent:'center'}}> × </button></div><div style={{display:'grid',gridTemplateColumns:'repeat(auto-fill,minmax(160px,1fr))',gap:'12px'}}>{[{type:'occupancy',name:'Occupancy',icon:'🏢',color:'#10b981'},{type:'revenue',name:'Revenue',icon:'💰',color:'#3b82f6'},{type:'maintenance',name:'Maintenance',icon:'🔧',color:'#f59e0b'},{type:'calendar',name:'Calendar',icon:'📅',color:'#667eea'},{type:'leases',name:'Leases',icon:'📄',color:'#8b5cf6'},{type:'delinquency',name:'Delinquencies',icon:'⚠️',color:'#ef4444'},{type:'insurance',name:'Insurance',icon:'🛡️',color:'#3b82f6'}].map(widget =>(<button key={widget.type}onClick={()=> handleAddWidget(widget.type)}style={{background:'white',border:'1px solid #e5e7eb',borderRadius:'12px',padding:'16px',cursor:'pointer',transition:'all 200ms ease',textAlign:'center'}}onMouseEnter={(e)=>{e.currentTarget.style.borderColor = widget.color;e.currentTarget.style.transform = 'translateY(-2px)';e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)'}}onMouseLeave={(e)=>{e.currentTarget.style.borderColor = '#e5e7eb';e.currentTarget.style.transform = 'translateY(0)';e.currentTarget.style.boxShadow = 'none'}}><div style={{fontSize:'32px',marginBottom:'8px'}}>{widget.icon}</div><div style={{fontSize:'14px',fontWeight:'600',color:'#1f2937'}}>{widget.name}</div></button>))}</div></div></div>)}</div>)};

// MaintenanceRequestModal.jsx
const MaintenanceRequestModal =({isOpen,onClose,tenantInfo})=>{const maintenanceStore = window.useMaintenanceStore ? window.useMaintenanceStore():null;const [currentStep,setCurrentStep] = React.useState('category');const [formData,setFormData] = React.useState({category:'',title:'',description:'',priority:'medium',photos:[],unit:tenantInfo?.unit || '',property:tenantInfo?.property || '',tenant:tenantInfo ||{}});const [aiChat,setAiChat] = React.useState([]);const [isSubmitting,setIsSubmitting] = React.useState(false);const [troubleshootingResults,setTroubleshootingResults] = React.useState(null);const categories = [{id:'plumbing',name:'Plumbing',icon:'fa-tint',description:'Leaks,clogs,water issues'},{id:'electrical',name:'Electrical',icon:'fa-bolt',description:'Outlets,lighting,power issues'},{id:'hvac',name:'HVAC',icon:'fa-snowflake',description:'Heating,cooling,ventilation'},{id:'appliance',name:'Appliances',icon:'fa-blender',description:'Washer,dryer,dishwasher'},{id:'general',name:'General',icon:'fa-hammer',description:'Other maintenance issues'},{id:'emergency',name:'Emergency',icon:'fa-exclamation-triangle',description:'Urgent safety issues'}];React.useEffect(()=>{if(isOpen){setCurrentStep('category');setFormData({category:'',title:'',description:'',priority:'medium',photos:[],unit:tenantInfo?.unit || '',property:tenantInfo?.property || '',tenant:tenantInfo ||{}});setAiChat([]);setTroubleshootingResults(null)}},[isOpen,tenantInfo]);const runAITroubleshooting = React.useCallback(async()=>{if(!formData.description || formData.description.length < 10)return;const aiMessage ={id:Date.now(),type:'ai',content:'Let me analyze your issue and suggest some troubleshooting steps...',timestamp:new Date().toISOString()};setAiChat(prev => [...prev,aiMessage]);setTimeout(()=>{const troubleshooting = generateTroubleshootingSteps(formData.category,formData.description);setTroubleshootingResults(troubleshooting);const responseMessage ={id:Date.now()+ 1,type:'ai',content:`Based on your description,here are some steps you can try first. If these don't solve the issue,I'll help you submit a work order.`,troubleshooting,timestamp:new Date().toISOString()};setAiChat(prev => [...prev,responseMessage])},2000)},[formData.category,formData.description]);const generateTroubleshootingSteps =(category,description)=>{const desc = description.toLowerCase();const troubleshootingGuides ={plumbing:{'clog':[ 'Try using a plunger for 30 seconds','Pour hot water down the drain','Check if other drains are affected' ],'leak':[ 'Turn off water supply to the area','Place a bucket to catch water','Check if the leak is from a connection' ],'default':[ 'Check if water shut-off valves are accessible','Try running water in other fixtures','Look for visible water damage' ]},electrical:{'outlet':[ 'Check if circuit breaker has tripped','Look for GFCI outlets and reset if needed','Test the outlet with a different device' ],'light':[ 'Try replacing the light bulb','Check the light switch','Test other lights in the room' ],'default':[ 'Check circuit breaker panel','Try resetting any GFCI outlets','Unplug devices and try again' ]},hvac:{'cooling':[ 'Check if air filter needs replacement','Verify thermostat settings and battery','Make sure all vents are open and unobstructed' ],'heating':[ 'Check thermostat settings and battery','Verify air filter is clean','Check if all vents are open' ],'default':[ 'Check and replace air filter if dirty','Verify thermostat settings','Check that vents aren\'t blocked' ]}};const categoryGuide = troubleshootingGuides[category] || troubleshootingGuides.general;for(const [keyword,steps] of Object.entries(categoryGuide)){if(keyword !== 'default' && desc.includes(keyword)){return{category,specificIssue:keyword,steps,estimatedTime:'5-10 minutes',safetyNote:getSafetyNote(category,keyword)}}}return{category,specificIssue:'general',steps:categoryGuide.default,estimatedTime:'5-10 minutes',safetyNote:getSafetyNote(category,'general')}};const getSafetyNote =(category,issue)=>{const safetyNotes ={electrical:'Safety First:Turn off power at the circuit breaker before any electrical work.',plumbing:'Important:Turn off water supply if there\'s active leaking.',emergency:'Emergency:If this is a safety hazard,call emergency services immediately.'};return safetyNotes[category] || 'Please be careful and stop if you feel unsafe.'};const handleCategorySelect =(category)=>{setFormData(prev =>({...prev,category}));setCurrentStep('description')};const handleDescriptionSubmit =()=>{if(formData.description.length < 10){alert('Please provide more details about the issue.');return}setCurrentStep('troubleshooting');runAITroubleshooting()};const handleTroubleshootingComplete =(resolved)=>{if(resolved){onClose()}else{setCurrentStep('photos')}};const handlePhotoUpload =(event)=>{const files = Array.from(event.target.files);const photoUrls = files.map(file => URL.createObjectURL(file));setFormData(prev =>({...prev,photos:[...prev.photos,...photoUrls]}))};const removePhoto =(index)=>{setFormData(prev =>({...prev,photos:prev.photos.filter((_,i)=> i !== index)}))};const handleSubmit = async()=>{if(!maintenanceStore?.actions?.addRequest){alert('Maintenance system not available. Please try again later.');return}setIsSubmitting(true);try{const requestData ={...formData,submittedBy:'Tenant',aiTroubleshooting:troubleshootingResults,chatHistory:aiChat};const requestId = maintenanceStore.actions.addRequest(requestData);alert('Maintenance request submitted successfully! You\'ll receive updates via email and in your portal.');onClose()}catch(error){console.error('Error submitting maintenance request:',error);alert('There was an error submitting your request. Please try again.')}finally{setIsSubmitting(false)}};if(!isOpen)return null;return(<div className="modal-overlay" onClick={onClose}><div className="maintenance-modal" onClick={e => e.stopPropagation()}><div className="modal-header"><h2><i className="fas fa-tools"></i> Maintenance Request </h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-body">{}<div className="progress-indicator"><div className={`step ${currentStep === 'category' ? 'active':currentStep === 'description' || currentStep === 'troubleshooting' || currentStep === 'photos' || currentStep === 'review' ? 'completed':''}`}>1</div><div className="step-line"></div><div className={`step ${currentStep === 'description' ? 'active':currentStep === 'troubleshooting' || currentStep === 'photos' || currentStep === 'review' ? 'completed':''}`}>2</div><div className="step-line"></div><div className={`step ${currentStep === 'troubleshooting' ? 'active':currentStep === 'photos' || currentStep === 'review' ? 'completed':''}`}>3</div><div className="step-line"></div><div className={`step ${currentStep === 'photos' ? 'active':currentStep === 'review' ? 'completed':''}`}>4</div><div className="step-line"></div><div className={`step ${currentStep === 'review' ? 'active':''}`}>5</div></div>{}{currentStep === 'category' &&(<div className="step-content"><h3>What type of issue are you experiencing?</h3><div className="category-grid">{categories.map(category =>(<button key={category.id}className={`category-btn ${formData.category === category.id ? 'selected':''}`}onClick={()=> handleCategorySelect(category.id)}><i className={`fas ${category.icon}`}></i><span className="category-name">{category.name}</span><span className="category-description">{category.description}</span></button>))}</div></div>)}{}{currentStep === 'description' &&(<div className="step-content"><h3>Tell us about the issue</h3><div className="form-group"><label>Issue Title</label><input type="text" value={formData.title}onChange={(e)=> setFormData(prev =>({...prev,title:e.target.value}))}placeholder="Brief summary of the issue" /></div><div className="form-group"><label>Detailed Description</label><textarea value={formData.description}onChange={(e)=> setFormData(prev =>({...prev,description:e.target.value}))}placeholder="Please describe the issue in detail. When did it start? Is it affecting other areas?" rows="4" /></div><div className="form-group"><label>Priority Level</label><select value={formData.priority}onChange={(e)=> setFormData(prev =>({...prev,priority:e.target.value}))}><option value="low">Low - Can wait a few days</option><option value="medium">Medium - Should be fixed this week</option><option value="high">High - Needs attention soon</option><option value="urgent">Urgent - Needs immediate attention</option><option value="emergency">Emergency - Safety hazard</option></select></div><div className="step-actions"><button className="btn btn-secondary" onClick={()=> setCurrentStep('category')}> Back </button><button className="btn btn-primary" onClick={handleDescriptionSubmit}> Continue </button></div></div>)}{}{currentStep === 'troubleshooting' &&(<div className="step-content"><h3>AI Troubleshooting Assistant</h3><div className="ai-chat"><div className="chat-messages">{aiChat.map(message =>(<div key={message.id}className={`message ${message.type}`}><div className="message-content">{message.content}{message.troubleshooting &&(<div className="troubleshooting-steps"><div className="safety-note"><i className="fas fa-exclamation-triangle"></i>{message.troubleshooting.safetyNote}</div><h4>Try these steps:</h4><ol>{message.troubleshooting.steps.map((step,index)=>(<li key={index}>{step}</li>))}</ol><p className="estimated-time"> Estimated time:{message.troubleshooting.estimatedTime}</p></div>)}</div></div>))}</div></div>{troubleshootingResults &&(<div className="troubleshooting-actions"><h4>Did these steps resolve your issue?</h4><div className="action-buttons"><button className="btn btn-success" onClick={()=> handleTroubleshootingComplete(true)}><i className="fas fa-check"></i> Yes,issue resolved! </button><button className="btn btn-primary" onClick={()=> handleTroubleshootingComplete(false)}><i className="fas fa-arrow-right"></i> No,submit work order </button></div></div>)}</div>)}{}{currentStep === 'photos' &&(<div className="step-content"><h3>Add Photos(Optional)</h3><p>Photos help our maintenance team understand the issue better and bring the right tools.</p><div className="photo-upload"><input type="file" id="photo-upload" multiple accept="image}{currentStep === 'review' &&(<div className="step-content"><h3>Review Your Request</h3><div className="request-summary"><div className="summary-section"><h4>Issue Details</h4><p><strong>Category:</strong>{categories.find(c => c.id === formData.category)?.name}</p><p><strong>Title:</strong>{formData.title}</p><p><strong>Priority:</strong>{formData.priority}</p><p><strong>Description:</strong>{formData.description}</p></div><div className="summary-section"><h4>Location</h4><p><strong>Property:</strong>{formData.property}</p><p><strong>Unit:</strong>{formData.unit}</p></div>{formData.photos.length > 0 &&(<div className="summary-section"><h4>Photos</h4><p>{formData.photos.length}photo(s)attached</p></div>)}</div><div className="step-actions"><button className="btn btn-secondary" onClick={()=> setCurrentStep('photos')}> Back </button><button className="btn btn-primary" onClick={handleSubmit}disabled={isSubmitting}>{isSubmitting ? 'Submitting...':'Submit Request'}</button></div></div>)}</div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceRequestModal = MaintenanceRequestModal;

// AutomationHub.jsx
const AutomationHub =()=>{const [automations,setAutomations] = React.useState([{id:1,name:"Smart Rent Collection",description:"AI follows up with late payments,sends reminders,and escalates intelligently",enabled:true,stats:{saved_hours:12,money_collected:45000,success_rate:94},icon:"fa-dollar-sign",color:"gradient-success"},{id:2,name:"Maintenance Triage AI",description:"Automatically categorizes,prioritizes,and assigns maintenance requests",enabled:true,stats:{requests_handled:234,avg_response_time:"2 mins",tenant_satisfaction:98},icon:"fa-tools",color:"gradient-warning"},{id:3,name:"Intelligent Tenant Screening",description:"AI analyzes applications,runs background checks,and ranks candidates",enabled:false,stats:{applications_processed:89,bad_tenants_avoided:12,time_saved:"8 hrs/week"},icon:"fa-user-check",color:"gradient-primary"},{id:4,name:"Dynamic Pricing Engine",description:"AI continuously adjusts rent prices based on market data and demand",enabled:true,stats:{revenue_increase:"18%",units_optimized:47,market_analysis:"Daily"},icon:"fa-chart-line",color:"gradient-purple"},{id:5,name:"Vacancy Prevention AI",description:"Predicts tenant churn and automatically triggers retention campaigns",enabled:true,stats:{churn_reduced:"31%",tenants_retained:23,campaigns_sent:156},icon:"fa-home",color:"gradient-blue"},{id:6,name:"Energy Optimization",description:"Smart building controls that learn patterns and reduce utility costs",enabled:false,stats:{energy_saved:"24%",cost_reduction:"$3,200",carbon_offset:"2.1 tons"},icon:"fa-leaf",color:"gradient-green"}]);const [showBuilder,setShowBuilder] = React.useState(false);const [selectedAutomation,setSelectedAutomation] = React.useState(null);const toggleAutomation =(id)=>{setAutomations(prev => prev.map(auto => auto.id === id ?{...auto,enabled:!auto.enabled}:auto));const automation = automations.find(a => a.id === id);if(automation && window.speechSynthesis){const message = automation.enabled ? `${automation.name}has been disabled`:`${automation.name}is now active and monitoring your properties`;const utterance = new SpeechSynthesisUtterance(message);utterance.rate = 1.1;window.speechSynthesis.speak(utterance)}};const totalStats = React.useMemo(()=>{const activeAutomations = automations.filter(a => a.enabled);return{savedHours:activeAutomations.reduce((sum,auto)=>{if(auto.stats.saved_hours)return sum + auto.stats.saved_hours;if(auto.stats.time_saved?.includes('hrs')){return sum + parseInt(auto.stats.time_saved)}return sum + Math.floor(Math.random()* 10 + 5)},0),extraRevenue:activeAutomations.reduce((sum,auto)=>{if(auto.stats.money_collected)return sum + auto.stats.money_collected;if(auto.stats.revenue_increase)return sum + 15000;return sum + Math.floor(Math.random()* 10000 + 5000)},0),successRate:Math.round(activeAutomations.reduce((sum,auto)=>{if(auto.stats.success_rate)return sum + auto.stats.success_rate;if(auto.stats.tenant_satisfaction)return sum + auto.stats.tenant_satisfaction;return sum + Math.floor(Math.random()* 10 + 85)},0)/ activeAutomations.length)}},[automations]);return(<div className="automation-hub">{}<div className="automation-header-premium"><div className="header-background"><div className="animated-grid"></div><div className="floating-particles"></div></div><div className="header-content"><h1 className="header-title-glow"><i className="fas fa-robot"></i> Automation Center </h1><p className="header-subtitle"> Your AI employees work 24/7,never take breaks,and get smarter every day </p><div className="automation-stats-row"><div className="stat-card-glow"><div className="stat-value">{totalStats.savedHours}hrs</div><div className="stat-label">Saved This Month</div></div><div className="stat-card-glow"><div className="stat-value">${(totalStats.extraRevenue / 1000).toFixed(1)}k</div><div className="stat-label">Extra Revenue</div></div><div className="stat-card-glow"><div className="stat-value">{totalStats.successRate}%</div><div className="stat-label">Automation Success</div></div></div>{}<div className="quick-actions"><button className="quick-action-btn primary"><i className="fas fa-play"></i> Run All Automations </button><button className="quick-action-btn secondary"><i className="fas fa-chart-bar"></i> View Analytics </button><button className="quick-action-btn tertiary" onClick={()=> setShowBuilder(true)}><i className="fas fa-plus"></i> Create Automation </button></div></div></div>{}<div className="automations-container"><div className="automations-grid">{automations.map(automation =>(<AutomationCard key={automation.id}automation={automation}onToggle={()=> toggleAutomation(automation.id)}onConfigure={()=> setSelectedAutomation(automation)}/>))}{}<div className="automation-card add-new" onClick={()=> setShowBuilder(true)}><div className="add-new-content"><div className="add-new-icon"><i className="fas fa-plus-circle"></i></div><h3>Create Custom Automation</h3><p>Build your own AI workflow with drag & drop</p><div className="add-new-features"><span>• Triggers & Actions</span><span>• AI Decision Trees</span><span>• Custom Logic</span></div></div></div></div></div>{}{showBuilder &&(<AutomationBuilder onClose={()=> setShowBuilder(false)}onSave={(newAutomation)=>{setAutomations(prev => [...prev,{...newAutomation,id:Date.now()}]);setShowBuilder(false)}}/>)}{}{selectedAutomation &&(<AutomationConfig automation={selectedAutomation}onClose={()=> setSelectedAutomation(null)}onSave={(updatedAutomation)=>{setAutomations(prev => prev.map(auto => auto.id === updatedAutomation.id ? updatedAutomation:auto));setSelectedAutomation(null)}}/>)}</div>)};const AutomationCard =({automation,onToggle,onConfigure})=>{const [isProcessing,setIsProcessing] = React.useState(false);const handleToggle = async()=>{setIsProcessing(true);setTimeout(()=>{onToggle();setIsProcessing(false)},1500)};const formatStatValue =(value)=>{if(typeof value === 'number'){if(value > 1000)return `${(value / 1000).toFixed(1)}k`;return value.toString()}return value};const formatStatKey =(key)=>{return key.replace(/_/g,' ').replace(/\b\w/g,l => l.toUpperCase())};return(<div className={`automation-card ${automation.color}${automation.enabled ? 'active':'inactive'}${isProcessing ? 'processing':''}`}>{}{isProcessing &&(<div className="processing-overlay"><div className="processing-spinner"></div><span>{automation.enabled ? 'Stopping...':'Starting...'}</span></div>)}{}<div className="automation-header"><div className="automation-icon"><i className={`fas ${automation.icon}`}></i></div><div className="automation-status"><span className={`status-indicator ${automation.enabled ? 'active':'inactive'}`}>{automation.enabled ? 'ACTIVE':'INACTIVE'}</span></div><div className="automation-toggle"><label className="toggle-switch"><input type="checkbox" checked={automation.enabled}onChange={handleToggle}disabled={isProcessing}/><span className="toggle-slider"></span></label></div></div>{}<div className="automation-content"><h3 className="automation-name">{automation.name}</h3><p className="automation-description">{automation.description}</p>{}<div className="automation-stats">{Object.entries(automation.stats).map(([key,value])=>(<div key={key}className="stat-item"><div className="stat-value">{formatStatValue(value)}</div><div className="stat-key">{formatStatKey(key)}</div></div>))}</div>{}<div className="automation-actions"><button className="automation-btn primary" onClick={onConfigure}><i className="fas fa-cog"></i> Configure </button><button className="automation-btn secondary"><i className="fas fa-chart-bar"></i> Analytics </button></div></div>{}{automation.enabled &&(<div className="live-activity"><div className="activity-pulse"></div><span>Live Activity</span></div>)}</div>)};const AutomationBuilder =({onClose,onSave})=>{const [automationName,setAutomationName] = React.useState('');const [automationDescription,setAutomationDescription] = React.useState('');const [selectedTrigger,setSelectedTrigger] = React.useState('');const [selectedAction,setSelectedAction] = React.useState('');const [selectedIcon,setSelectedIcon] = React.useState('fa-robot');const triggers = [{id:'payment_late',name:'Payment is Late',icon:'fa-clock'},{id:'maintenance_request',name:'Maintenance Request Submitted',icon:'fa-tools'},{id:'lease_expiring',name:'Lease Expiring Soon',icon:'fa-calendar'},{id:'tenant_application',name:'New Tenant Application',icon:'fa-user-plus'},{id:'vacancy_detected',name:'Unit Becomes Vacant',icon:'fa-home'}];const actions = [{id:'send_sms',name:'Send SMS Message',icon:'fa-sms'},{id:'send_email',name:'Send Email',icon:'fa-envelope'},{id:'create_task',name:'Create Task',icon:'fa-tasks'},{id:'schedule_showing',name:'Schedule Showing',icon:'fa-calendar-plus'},{id:'run_background_check',name:'Run Background Check',icon:'fa-shield-alt'}];const iconOptions = [ 'fa-robot','fa-dollar-sign','fa-tools','fa-user-check','fa-chart-line','fa-home','fa-leaf','fa-bell','fa-cog','fa-magic' ];const handleSave =()=>{if(!automationName || !selectedTrigger || !selectedAction)return;const newAutomation ={name:automationName,description:automationDescription || `Automatically ${selectedAction.replace('_',' ')}when ${selectedTrigger.replace('_',' ')}`,enabled:false,stats:{executions:0,success_rate:100,time_saved:"0 hrs"},icon:selectedIcon,color:'gradient-primary',trigger:selectedTrigger,action:selectedAction};onSave(newAutomation)};return(<div className="automation-builder-modal"><div className="builder-container"><div className="builder-header"><h2><i className="fas fa-magic"></i> Create Custom Automation </h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="builder-content">{}<div className="builder-section"><h3>Basic Information</h3><div className="form-row"><div className="form-group"><label>Automation Name</label><input type="text" placeholder="e.g.,Smart Late Fee Collection" value={automationName}onChange={(e)=> setAutomationName(e.target.value)}/></div><div className="form-group"><label>Icon</label><div className="icon-selector">{iconOptions.map(icon =>(<button key={icon}className={`icon-option ${selectedIcon === icon ? 'selected':''}`}onClick={()=> setSelectedIcon(icon)}><i className={`fas ${icon}`}></i></button>))}</div></div></div><div className="form-group"><label>Description</label><textarea placeholder="Describe what this automation does..." value={automationDescription}onChange={(e)=> setAutomationDescription(e.target.value)}/></div></div>{}<div className="builder-section"><h3>When should this run?</h3><div className="trigger-grid">{triggers.map(trigger =>(<div key={trigger.id}className={`trigger-card ${selectedTrigger === trigger.id ? 'selected':''}`}onClick={()=> setSelectedTrigger(trigger.id)}><i className={`fas ${trigger.icon}`}></i><span>{trigger.name}</span></div>))}</div></div>{}<div className="builder-section"><h3>What should happen?</h3><div className="action-grid">{actions.map(action =>(<div key={action.id}className={`action-card ${selectedAction === action.id ? 'selected':''}`}onClick={()=> setSelectedAction(action.id)}><i className={`fas ${action.icon}`}></i><span>{action.name}</span></div>))}</div></div></div><div className="builder-footer"><button className="btn-secondary" onClick={onClose}> Cancel </button><button className="btn-primary" onClick={handleSave}disabled={!automationName || !selectedTrigger || !selectedAction}><i className="fas fa-save"></i> Create Automation </button></div></div></div>)};const AutomationConfig =({automation,onClose,onSave})=>{const [settings,setSettings] = React.useState({frequency:'immediate',conditions:[],notifications:true,escalation:false});return(<div className="automation-config-modal"><div className="config-container"><div className="config-header"><h2><i className={`fas ${automation.icon}`}></i> Configure{automation.name}</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="config-content"><div className="config-section"><h3>Execution Settings</h3><div className="setting-group"><label>Frequency</label><select value={settings.frequency}onChange={(e)=> setSettings({...settings,frequency:e.target.value})}><option value="immediate">Immediate</option><option value="hourly">Every Hour</option><option value="daily">Daily</option><option value="weekly">Weekly</option></select></div><div className="setting-group"><label className="checkbox-label"><input type="checkbox" checked={settings.notifications}onChange={(e)=> setSettings({...settings,notifications:e.target.checked})}/> Send notifications when automation runs </label></div><div className="setting-group"><label className="checkbox-label"><input type="checkbox" checked={settings.escalation}onChange={(e)=> setSettings({...settings,escalation:e.target.checked})}/> Enable automatic escalation </label></div></div></div><div className="config-footer"><button className="btn-secondary" onClick={onClose}> Cancel </button><button className="btn-primary" onClick={()=> onSave({...automation,settings})}><i className="fas fa-save"></i> Save Configuration </button></div></div></div>)};

// AIListingGenerator.jsx
const AIListingGenerator =({unit,property})=>{const [listing,setListing] = React.useState(null);const [loading,setLoading] = React.useState(false);const [editMode,setEditMode] = React.useState(false);const [customDetails,setCustomDetails] = React.useState({highlights:[],nearby:[],special_features:[]});const generateListing = async()=>{setLoading(true);try{const response = await window.ApiService.post('/api/ai/generate-listing',{unit:unit,property:property,custom_details:customDetails,style:'engaging_seo_optimized'});setListing(response.listing);await window.ApiService.post('/api/ai/track-listing',{unit_id:unit.id,ai_generated:true,edited:false})}catch(error){window.Toast.error('Failed to generate listing')}finally{setLoading(false)}};return(<div className="ai-listing-generator"><div className="generator-header"><h2>AI Listing Generator</h2><p className="ai-badge"><i className="fas fa-magic"></i> 91% of our listings need zero edits </p></div>{!listing ?(<div className="listing-setup"><div className="quick-details"><h3>Quick Details for AI</h3><div className="detail-chips"><h4>Highlights(click to add)</h4><div className="chip-options">{['Newly Renovated','Pet Friendly','Parking Included','Balcony','In-Unit Laundry','Hardwood Floors','Natural Light'].map(feature =>(<button key={feature}className={`chip ${customDetails.highlights.includes(feature)? 'selected':''}`}onClick={()=>{setCustomDetails(prev =>({...prev,highlights:prev.highlights.includes(feature)? prev.highlights.filter(h => h !== feature):[...prev.highlights,feature]}))}}>{feature}</button>))}</div></div><div className="detail-chips"><h4>Nearby Attractions</h4><input type="text" placeholder="e.g.,5 min to subway,near Central Park..." onKeyPress={(e)=>{if(e.key === 'Enter' && e.target.value){setCustomDetails(prev =>({...prev,nearby:[...prev.nearby,e.target.value]}));e.target.value = ''}}}/><div className="added-items">{customDetails.nearby.map((item,idx)=>(<span key={idx}className="chip">{item}</span>))}</div></div></div><button className="generate-btn" onClick={generateListing}disabled={loading}>{loading ?(<><div className="spinner"></div> AI is writing your listing... </>):(<><i className="fas fa-magic"></i> Generate SEO-Optimized Listing </>)}</button></div>):(<div className="listing-preview"><div className="preview-header"><h3>AI-Generated Listing</h3><div className="preview-actions"><button className="edit-btn" onClick={()=> setEditMode(!editMode)}><i className="fas fa-edit"></i>{editMode ? 'Preview':'Edit'}</button><button className="publish-btn" onClick={async()=>{await window.ApiService.post('/api/listings/publish',{unit_id:unit.id,content:listing});window.Toast.success('Listing published!')}}><i className="fas fa-rocket"></i> Publish Listing </button></div></div><div className="listing-content">{editMode ?(<textarea value={listing.description}onChange={(e)=> setListing({...listing,description:e.target.value})}rows={15}/>):(<><h1>{listing.title}</h1><div className="listing-highlights">{listing.highlights?.map((highlight,idx)=>(<span key={idx}className="highlight-badge"><i className="fas fa-check"></i>{highlight}</span>))}</div><div className="listing-description">{listing.description}</div><div className="seo-keywords"><h4>SEO Keywords Included:</h4><div className="keyword-tags">{listing.seo_keywords?.map((keyword,idx)=>(<span key={idx}className="keyword-tag">{keyword}</span>))}</div></div></>)}</div></div>)}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.AIListingGenerator = AIListingGenerator;

// UnifiedMessagingHub.jsx
const UnifiedMessagingHub =()=>{const [activeView,setActiveView] = React.useState('all');const [selectedConversation,setSelectedConversation] = React.useState(null);const [conversations,setConversations] = React.useState([]);const [showCompose,setShowCompose] = React.useState(false);const [showBroadcast,setShowBroadcast] = React.useState(false);const [loading,setLoading] = React.useState(true);React.useEffect(()=>{loadConversations()},[activeView]);const loadConversations = async()=>{try{setLoading(true);const params = activeView !== 'all' ? `?type=${activeView}`:'';const response = await window.ApiService.get(`/messaging/conversations${params}`);const mockConversations = [{id:'1',participant_name:'Sarah Johnson',participant_type:'tenant',participant_avatar:null,property_name:'Sunset Apartments',unit_number:'205',last_message:{content:'Hi,I noticed the AC is making a strange noise. Can someone take a look?',created_at:new Date(Date.now()- 1000 * 60 * 30).toISOString(),is_from_me:false},unread_count:2,urgent:true,linked_ticket:{type:'maintenance'}},{id:'2',participant_name:'Mark Thompson',participant_type:'owner',participant_avatar:null,property_name:'Oak Grove Residences',unit_number:null,last_message:{content:'Thanks for the monthly report. Everything looks great!',created_at:new Date(Date.now()- 1000 * 60 * 60 * 2).toISOString(),is_from_me:true},unread_count:0,urgent:false},{id:'3',participant_name:'Mike Wilson',participant_type:'vendor',participant_avatar:null,property_name:'Multiple Properties',unit_number:null,last_message:{content:'All repairs at Sunset Apartments have been completed',created_at:new Date(Date.now()- 1000 * 60 * 60 * 5).toISOString(),is_from_me:false},unread_count:1,urgent:false}];setConversations(response.conversations || mockConversations)}catch(error){console.error('Failed to load conversations:',error);setConversations([])}finally{setLoading(false)}};return(<div className="messaging-hub-premium">{}<div className="messaging-hero"><div className="hero-gradient-bg"><div className="floating-orbs"><div className="orb orb-1"></div><div className="orb orb-2"></div><div className="orb orb-3"></div></div></div><div className="hero-content"><h1 className="hero-title">Unified Communications</h1><p className="hero-subtitle">Every conversation,beautifully organized</p>{}<div className="live-stats"><div className="stat-bubble"><div className="stat-icon"><i className="fas fa-comments"></i></div><div className="stat-info"><span className="stat-value">127</span><span className="stat-label">Active Chats</span></div></div><div className="stat-bubble urgent"><div className="stat-icon"><i className="fas fa-bell"></i></div><div className="stat-info"><span className="stat-value">12</span><span className="stat-label">Need Response</span></div></div><div className="stat-bubble success"><div className="stat-icon"><i className="fas fa-check-circle"></i></div><div className="stat-info"><span className="stat-value">98%</span><span className="stat-label">Response Rate</span></div></div></div></div></div>{}<div className="messaging-container">{}<div className="messaging-sidebar-premium"><button className="compose-btn-premium" onClick={()=> setShowCompose(true)}><div className="btn-gradient"><i className="fas fa-feather-alt"></i><span>Compose</span></div><div className="btn-glow"></div></button><button className="broadcast-btn-premium" onClick={()=> setShowBroadcast(true)}><div className="btn-gradient broadcast"><i className="fas fa-bullhorn"></i><span>Broadcast</span></div><div className="btn-glow broadcast"></div></button>{}<div className="filter-pills">{[{id:'all',label:'All Messages',icon:'fa-inbox',count:342},{id:'tenants',label:'Tenants',icon:'fa-users',count:156},{id:'owners',label:'Owners',icon:'fa-home',count:89},{id:'vendors',label:'Vendors',icon:'fa-tools',count:67},{id:'unread',label:'Unread',icon:'fa-circle',count:23}].map(filter =>(<button key={filter.id}className={`filter-pill ${activeView === filter.id ? 'active':''}`}onClick={()=> setActiveView(filter.id)}><i className={`fas ${filter.icon}`}></i><span>{filter.label}</span><span className="pill-count">{filter.count}</span></button>))}</div>{}<div className="ai-assistant-card"><div className="ai-gradient"><i className="fas fa-robot"></i></div><div className="ai-content"><h4>AI Assistant</h4><p>I can help draft responses,summarize conversations,or find important messages</p><button className="ai-activate"><span>Ask AI</span><i className="fas fa-sparkles"></i></button></div></div></div>{}<div className="conversations-list-premium"><div className="list-header-premium"><div className="search-container"><i className="fas fa-search"></i><input type="text" placeholder="Search conversations..." className="search-input-premium" /><div className="search-glow"></div></div></div><div className="conversations-scroll">{loading ?(<div className="loading-state"><div className="spinner"></div><p>Loading conversations...</p></div>):(conversations.map(conv =>(<ConversationCardPremium key={conv.id}conversation={conv}selected={selectedConversation?.id === conv.id}onClick={()=> setSelectedConversation(conv)}/>)))}</div></div>{}<div className="conversation-view-premium">{selectedConversation ?(<ConversationDetailPremium conversation={selectedConversation}onClose={()=> setSelectedConversation(null)}/>):(<div className="empty-state-premium"><div className="empty-illustration"><div className="chat-bubbles"><div className="bubble bubble-1"></div><div className="bubble bubble-2"></div><div className="bubble bubble-3"></div></div></div><h3>Select a conversation</h3><p>Choose a message from the list to start chatting</p></div>)}</div></div>{}{showCompose &&(<ComposeModalPremium onClose={()=> setShowCompose(false)}/>)}{}{showBroadcast &&(<BroadcastModalPremium onClose={()=> setShowBroadcast(false)}/>)}</div>)};const formatTimeAgo =(dateString)=>{const date = new Date(dateString);const now = new Date();const diffMs = now - date;const diffMins = Math.floor(diffMs / 60000);const diffHours = Math.floor(diffMs / 3600000);const diffDays = Math.floor(diffMs / 86400000);if(diffMins < 1)return 'just now';if(diffMins < 60)return `${diffMins}m ago`;if(diffHours < 24)return `${diffHours}h ago`;if(diffDays < 7)return `${diffDays}d ago`;return date.toLocaleDateString('en-US',{month:'short',day:'numeric'})};const getParticipantIcon =(type)=>{const icons ={tenant:'fa-user',owner:'fa-home',vendor:'fa-tools',prospect:'fa-user-plus'};return icons[type] || 'fa-user'};const ConversationCardPremium =({conversation,selected,onClick})=>{const getStatusColor =()=>{if(conversation.urgent)return '#ef4444';if(conversation.unread_count > 0)return '#3b82f6';return '#10b981'};const getParticipantAvatar =()=>{if(conversation.participant_avatar){return <img src={conversation.participant_avatar}alt="" />}const initials = conversation.participant_name .split(' ').map(n => n[0]).join('').toUpperCase();return <span className="avatar-initials">{initials}</span>};return(<div className={`conversation-card-premium ${selected ? 'selected':''}`}onClick={onClick}><div className="card-glow" style={{'--glow-color':getStatusColor()}}></div><div className="card-content"><div className="participant-row"><div className={`participant-avatar ${conversation.participant_type}`}>{getParticipantAvatar()}<div className="status-dot" style={{backgroundColor:getStatusColor()}}></div></div><div className="participant-info"><h4>{conversation.participant_name}</h4><p className="participant-meta"><i className={`fas ${getParticipantIcon(conversation.participant_type)}`}></i>{conversation.property_name}{conversation.unit_number && ` • Unit ${conversation.unit_number}`}</p></div><div className="conversation-meta"><span className="timestamp">{formatTimeAgo(conversation.last_message.created_at)}</span>{conversation.unread_count > 0 &&(<span className="unread-badge">{conversation.unread_count}</span>)}</div></div><div className="message-preview"><p className={conversation.last_message.is_from_me ? 'from-me':''}>{conversation.last_message.is_from_me && <span className="you-prefix">You:</span>}{conversation.last_message.content}</p></div>{conversation.linked_ticket &&(<div className="linked-indicators">{conversation.linked_ticket.type === 'maintenance' &&(<span className="indicator maintenance"><i className="fas fa-tools"></i> Maintenance Request </span>)}{conversation.urgent &&(<span className="indicator urgent"><i className="fas fa-exclamation-circle"></i> Urgent </span>)}</div>)}</div></div>)};const ConversationDetailPremium =({conversation,onClose})=>{const [messages,setMessages] = React.useState([]);const [newMessage,setNewMessage] = React.useState('');const [loading,setLoading] = React.useState(true);const messagesEndRef = React.useRef(null);React.useEffect(()=>{loadMessages()},[conversation.id]);React.useEffect(()=>{scrollToBottom()},[messages]);const loadMessages = async()=>{try{setLoading(true);const response = await window.ApiService.get(`/messaging/conversations/${conversation.id}/messages`);const mockMessages = [{id:'1',content:conversation.last_message.content,is_from_me:conversation.last_message.is_from_me,created_at:conversation.last_message.created_at,sender_name:conversation.last_message.is_from_me ? 'You':conversation.participant_name},{id:'2',content:'I understand your concern. Let me look into this right away.',is_from_me:true,created_at:new Date(Date.now()- 1000 * 60 * 25).toISOString(),sender_name:'You'},{id:'3',content:'I\'ve scheduled a technician to visit tomorrow at 2 PM. They\'ll call 30 minutes before arrival.',is_from_me:true,created_at:new Date(Date.now()- 1000 * 60 * 20).toISOString(),sender_name:'You'},{id:'4',content:'That works perfectly! Thank you for the quick response.',is_from_me:false,created_at:new Date(Date.now()- 1000 * 60 * 15).toISOString(),sender_name:conversation.participant_name}];setMessages(response.messages || mockMessages)}catch(error){console.error('Failed to load messages:',error);setMessages([])}finally{setLoading(false)}};const scrollToBottom =()=>{messagesEndRef.current?.scrollIntoView({behavior:'smooth'})};const sendMessage = async()=>{if(!newMessage.trim())return;const message ={id:Date.now().toString(),content:newMessage,is_from_me:true,created_at:new Date().toISOString(),sender_name:'You'};setMessages([...messages,message]);window.ConversationLogService?.logConversation({type:'text',participantId:conversation.id,participantName:conversation.participant_name,participantType:conversation.participant_type,propertyName:conversation.property_name,unitNumber:conversation.unit_number,content:newMessage,channel:'messaging_hub',isInbound:false,metadata:{originalConversationId:conversation.id,messageId:message.id}});setNewMessage('');try{await window.ApiService.post(`/messaging/conversations/${conversation.id}/messages`,{content:newMessage})}catch(error){console.error('Failed to send message:',error)}};return(<div className="conversation-detail-premium"><div className="detail-header"><div className="header-left"><button className="back-btn" onClick={onClose}><i className="fas fa-arrow-left"></i></button><div className={`header-avatar ${conversation.participant_type}`}>{conversation.participant_avatar ?(<img src={conversation.participant_avatar}alt="" />):(<span>{conversation.participant_name.split(' ').map(n => n[0]).join('').toUpperCase()}</span>)}</div><div className="header-info"><h3>{conversation.participant_name}</h3><p>{conversation.property_name}{conversation.unit_number && ` • Unit ${conversation.unit_number}`}</p></div></div><div className="header-actions"><button className="action-btn"><i className="fas fa-phone"></i></button><button className="action-btn"><i className="fas fa-video"></i></button><button className="action-btn"><i className="fas fa-ellipsis-v"></i></button></div></div><div className="messages-container">{loading ?(<div className="loading-messages"><div className="spinner"></div><p>Loading conversation...</p></div>):(<>{messages.map(message =>(<MessageBubblePremium key={message.id}message={message}/>))}<div ref={messagesEndRef}/></>)}</div><div className="message-input-container"><div className="input-actions"><button className="attach-btn"><i className="fas fa-paperclip"></i></button></div><input type="text" value={newMessage}onChange={(e)=> setNewMessage(e.target.value)}onKeyDown={(e)=> e.key === 'Enter' && sendMessage()}placeholder="Type your message..." className="message-input" /><button className="send-btn" onClick={sendMessage}disabled={!newMessage.trim()}><i className="fas fa-paper-plane"></i></button></div></div>)};const MessageBubblePremium =({message})=>{return(<div className={`message-bubble-premium ${message.is_from_me ? 'from-me':'from-them'}`}><div className="bubble-content"><p>{message.content}</p><span className="message-time">{formatTimeAgo(message.created_at)}</span></div></div>)};const ComposeModalPremium =({onClose})=>{const [recipient,setRecipient] = React.useState('');const [recipientType,setRecipientType] = React.useState('tenant');const [subject,setSubject] = React.useState('');const [message,setMessage] = React.useState('');const [searchResults,setSearchResults] = React.useState([]);const [showResults,setShowResults] = React.useState(false);const searchRecipients = async(query)=>{if(query.length < 2){setSearchResults([]);return}const mockResults = [{id:'1',name:'Sarah Johnson',type:'tenant',property:'Sunset Apartments',unit:'205'},{id:'2',name:'Sarah Williams',type:'tenant',property:'Oak Grove',unit:'102'},{id:'3',name:'Mark Thompson',type:'owner',property:'Oak Grove Residences'}].filter(r => r.name.toLowerCase().includes(query.toLowerCase()));setSearchResults(mockResults);setShowResults(true)};const selectRecipient =(result)=>{setRecipient(result.name);setRecipientType(result.type);setShowResults(false)};const sendMessage = async()=>{if(!recipient || !message)return;try{await window.ApiService.post('/messaging/conversations',{recipient,recipient_type:recipientType,subject,message});onClose()}catch(error){console.error('Failed to send message:',error)}};return(<div className="modal-overlay" onClick={onClose}><div className="compose-modal-premium" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>New Message</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-body"><div className="form-group"><label>To:</label><div className="recipient-search"><input type="text" value={recipient}onChange={(e)=>{setRecipient(e.target.value);searchRecipients(e.target.value)}}placeholder="Search by name..." className="form-input" />{showResults && searchResults.length > 0 &&(<div className="search-results">{searchResults.map(result =>(<div key={result.id}className="search-result" onClick={()=> selectRecipient(result)}><i className={`fas ${getParticipantIcon(result.type)}`}></i><div><p className="result-name">{result.name}</p><p className="result-meta">{result.property}{result.unit && ` • Unit ${result.unit}`}</p></div></div>))}</div>)}</div></div><div className="form-group"><label>Subject(optional):</label><input type="text" value={subject}onChange={(e)=> setSubject(e.target.value)}placeholder="What's this about?" className="form-input" /></div><div className="form-group"><label>Message:</label><textarea value={message}onChange={(e)=> setMessage(e.target.value)}placeholder="Type your message..." className="form-textarea" rows="6" /></div><div className="quick-templates"><p>Quick Templates:</p><div className="template-chips"><button className="template-chip" onClick={()=> setMessage('Hi! Just wanted to follow up on your maintenance request. Our team will be there tomorrow.')}> Maintenance Update </button><button className="template-chip" onClick={()=> setMessage('Thank you for your payment. Your account is now current.')}> Payment Confirmation </button><button className="template-chip" onClick={()=> setMessage('Hi! I wanted to check in and see how everything is going with your unit.')}> Check-in </button></div></div></div><div className="modal-footer"><button className="btn-secondary" onClick={onClose}>Cancel</button><button className="btn-primary" onClick={sendMessage}disabled={!recipient || !message}><i className="fas fa-paper-plane"></i> Send Message </button></div></div></div>)};const BroadcastModalPremium =({onClose})=>{const [step,setStep] = React.useState('recipients');const [selectedGroups,setSelectedGroups] = React.useState([]);const [selectedIndividuals] = React.useState([]);const [broadcastType,setBroadcastType] = React.useState('announcement');const [subject,setSubject] = React.useState('');const [message,setMessage] = React.useState('');const [scheduleType,setScheduleType] = React.useState('now');const [scheduleDate,setScheduleDate] = React.useState('');const [scheduleTime,setScheduleTime] = React.useState('');const recipientGroups = [{id:'all-tenants',name:'All Tenants',count:156,icon:'fa-users',color:'#3b82f6'},{id:'all-owners',name:'All Owners',count:42,icon:'fa-building',color:'#8b5cf6'},{id:'active-leases',name:'Active Leases',count:134,icon:'fa-file-contract',color:'#10b981'},{id:'upcoming-renewals',name:'Upcoming Renewals',count:23,icon:'fa-calendar-check',color:'#f59e0b'},{id:'delinquent-accounts',name:'Delinquent Accounts',count:8,icon:'fa-exclamation-circle',color:'#ef4444'},{id:'maintenance-updates',name:'Maintenance Updates',count:45,icon:'fa-tools',color:'#6366f1'},{id:'new-residents',name:'New Residents(30 days)',count:12,icon:'fa-user-plus',color:'#14b8a6'}];const broadcastTemplates = [{id:'rent-reminder',type:'announcement',icon:'fa-dollar-sign',title:'Rent Reminder',subject:'Friendly Rent Reminder',message:'Dear Resident,\n\nThis is a friendly reminder that your rent payment is due on{dueDate}. Please ensure your payment is submitted on time to avoid any late fees.\n\nIf you have already made your payment,please disregard this message.\n\nThank you!'},{id:'maintenance-notice',type:'maintenance',icon:'fa-tools',title:'Maintenance Notice',subject:'Scheduled Maintenance Notice',message:'Dear Resident,\n\nWe will be performing scheduled maintenance on{maintenanceDate}from{startTime}to{endTime}.\n\nDuring this time,{serviceType}may be temporarily unavailable.\n\nWe apologize for any inconvenience and appreciate your patience.'},{id:'community-update',type:'announcement',icon:'fa-info-circle',title:'Community Update',subject:'Important Community Update',message:'Dear Residents,\n\n{updateContent}\n\nIf you have any questions or concerns,please don\'t hesitate to contact the management office.\n\nBest regards,\nProperty Management'},{id:'emergency-alert',type:'emergency',icon:'fa-exclamation-triangle',title:'Emergency Alert',subject:'URGENT:Emergency Notification',message:'ATTENTION ALL RESIDENTS:\n\n{emergencyDetails}\n\nPlease follow all safety instructions and contact emergency services if needed.\n\nFor updates,monitor your email and text messages.'}];const toggleGroup =(groupId)=>{if(selectedGroups.includes(groupId)){setSelectedGroups(selectedGroups.filter(id => id !== groupId))}else{setSelectedGroups([...selectedGroups,groupId])}};const getTotalRecipients =()=>{const groupCount = selectedGroups.reduce((total,groupId)=>{const group = recipientGroups.find(g => g.id === groupId);return total +(group?.count || 0)},0);return groupCount + selectedIndividuals.length};const applyTemplate =(template)=>{setBroadcastType(template.type);setSubject(template.subject);setMessage(template.message);setStep('compose')};const sendBroadcast = async()=>{setStep('sending');try{await new Promise(resolve => setTimeout(resolve,2000));window.showNotification?.('success',`Broadcast sent to ${getTotalRecipients()}recipients`);onClose()}catch(error){console.error('Failed to send broadcast:',error);window.showNotification?.('error','Failed to send broadcast');setStep('preview')}};const renderRecipientStep =()=>(<><div className="modal-section"><h3>Select Recipients</h3><p>Choose groups or individuals to receive this broadcast</p><div className="recipient-groups-grid">{recipientGroups.map(group =>(<div key={group.id}className={`recipient-group-card ${selectedGroups.includes(group.id)? 'selected':''}`}onClick={()=> toggleGroup(group.id)}><div className="group-icon" style={{backgroundColor:group.color + '20',color:group.color}}><i className={`fas ${group.icon}`}></i></div><div className="group-info"><h4>{group.name}</h4><span className="group-count">{group.count}recipients</span></div><div className="group-checkbox"><i className={`fas fa-${selectedGroups.includes(group.id)? 'check-circle':'circle'}`}></i></div></div>))}</div><div className="individual-recipients"><button className="add-individuals-btn"><i className="fas fa-user-plus"></i> Add Individual Recipients </button></div></div><div className="modal-section"><h3>Or Use a Template</h3><div className="template-grid">{broadcastTemplates.map(template =>(<div key={template.id}className="template-card" onClick={()=> applyTemplate(template)}><i className={`fas ${template.icon}template-icon`}></i><span>{template.title}</span></div>))}</div></div></>);const renderComposeStep =()=>(<div className="modal-section"><div className="broadcast-type-selector"><label>Broadcast Type:</label><div className="type-options"><button className={`type-option ${broadcastType === 'announcement' ? 'active':''}`}onClick={()=> setBroadcastType('announcement')}><i className="fas fa-bullhorn"></i> Announcement </button><button className={`type-option ${broadcastType === 'maintenance' ? 'active':''}`}onClick={()=> setBroadcastType('maintenance')}><i className="fas fa-tools"></i> Maintenance </button><button className={`type-option ${broadcastType === 'emergency' ? 'active':''}`}onClick={()=> setBroadcastType('emergency')}><i className="fas fa-exclamation-triangle"></i> Emergency </button></div></div><div className="form-group"><label>Subject:</label><input type="text" value={subject}onChange={(e)=> setSubject(e.target.value)}placeholder="Enter broadcast subject..." className="form-input" /></div><div className="form-group"><label>Message:</label><textarea value={message}onChange={(e)=> setMessage(e.target.value)}placeholder="Type your broadcast message..." className="form-textarea" rows="8" /><div className="message-toolbar"><button className="toolbar-btn"><i className="fas fa-bold"></i></button><button className="toolbar-btn"><i className="fas fa-italic"></i></button><button className="toolbar-btn"><i className="fas fa-link"></i></button><button className="toolbar-btn"><i className="fas fa-paperclip"></i></button></div></div><div className="form-group"><label>Schedule:</label><div className="schedule-options"><label className="radio-option"><input type="radio" name="schedule" value="now" checked={scheduleType === 'now'}onChange={(e)=> setScheduleType(e.target.value)}/><span>Send immediately</span></label><label className="radio-option"><input type="radio" name="schedule" value="scheduled" checked={scheduleType === 'scheduled'}onChange={(e)=> setScheduleType(e.target.value)}/><span>Schedule for later</span></label></div>{scheduleType === 'scheduled' &&(<div className="schedule-inputs"><input type="date" value={scheduleDate}onChange={(e)=> setScheduleDate(e.target.value)}className="form-input" /><input type="time" value={scheduleTime}onChange={(e)=> setScheduleTime(e.target.value)}className="form-input" /></div>)}</div></div>);const renderPreviewStep =()=>(<div className="modal-section broadcast-preview"><h3>Broadcast Preview</h3><div className="preview-card"><div className="preview-header"><div className="preview-type" style={{backgroundColor:broadcastType === 'emergency' ? '#fee2e2':broadcastType === 'maintenance' ? '#fef3c7':'#dbeafe',color:broadcastType === 'emergency' ? '#991b1b':broadcastType === 'maintenance' ? '#92400e':'#1e40af'}}><i className={`fas fa-${broadcastType === 'emergency' ? 'exclamation-triangle':broadcastType === 'maintenance' ? 'tools':'bullhorn'}`}></i>{broadcastType.charAt(0).toUpperCase()+ broadcastType.slice(1)}</div><span className="preview-time">{scheduleType === 'now' ? 'Sending immediately':`Scheduled:${scheduleDate}at ${scheduleTime}`}</span></div><div className="preview-subject"><strong>Subject:</strong>{subject}</div><div className="preview-message">{message.split('\n').map((line,i)=>(<p key={i}>{line || <br />}</p>))}</div><div className="preview-footer"><div className="recipient-summary"><i className="fas fa-users"></i><span>{getTotalRecipients()}recipients</span></div><div className="selected-groups">{selectedGroups.map(groupId =>{const group = recipientGroups.find(g => g.id === groupId);return(<span key={groupId}className="group-tag">{group?.name}</span>)})}</div></div></div></div>);const renderSendingStep =()=>(<div className="modal-section sending-broadcast"><div className="sending-animation"><i className="fas fa-paper-plane fa-spin"></i></div><h3>Sending Broadcast...</h3><p>Delivering to{getTotalRecipients()}recipients</p><div className="progress-bar"><div className="progress-fill"></div></div></div>);return(<div className="modal-overlay" onClick={onClose}><div className="broadcast-modal-premium" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2><i className="fas fa-bullhorn"></i> Broadcast Message </h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div>{}<div className="broadcast-steps"><div className={`step ${step === 'recipients' ? 'active':''}${['compose','preview','sending'].includes(step)? 'completed':''}`}><div className="step-number">1</div><span>Recipients</span></div><div className="step-line"></div><div className={`step ${step === 'compose' ? 'active':''}${['preview','sending'].includes(step)? 'completed':''}`}><div className="step-number">2</div><span>Compose</span></div><div className="step-line"></div><div className={`step ${step === 'preview' ? 'active':''}${step === 'sending' ? 'completed':''}`}><div className="step-number">3</div><span>Review</span></div></div><div className="modal-body">{step === 'recipients' && renderRecipientStep()}{step === 'compose' && renderComposeStep()}{step === 'preview' && renderPreviewStep()}{step === 'sending' && renderSendingStep()}</div><div className="modal-footer">{step !== 'sending' &&(<><button className="btn-secondary" onClick={onClose}>Cancel</button>{step === 'recipients' &&(<button className="btn-primary" onClick={()=> setStep('compose')}disabled={selectedGroups.length === 0 && selectedIndividuals.length === 0}><i className="fas fa-arrow-right"></i> Continue </button>)}{step === 'compose' &&(<><button className="btn-secondary" onClick={()=> setStep('recipients')}><i className="fas fa-arrow-left"></i> Back </button><button className="btn-primary" onClick={()=> setStep('preview')}disabled={!subject || !message}><i className="fas fa-eye"></i> Preview </button></>)}{step === 'preview' &&(<><button className="btn-secondary" onClick={()=> setStep('compose')}><i className="fas fa-arrow-left"></i> Back </button><button className="btn-primary send-broadcast" onClick={sendBroadcast}><i className="fas fa-paper-plane"></i> Send Broadcast </button></>)}</>)}</div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.UnifiedMessagingHub = UnifiedMessagingHub;

// MaintenanceVoiceAssistant.jsx
const MaintenanceVoiceAssistant =({analysis,onComplete})=>{const [isPlaying,setIsPlaying] = React.useState(false);const [currentAudio,setCurrentAudio] = React.useState(null);const [voiceEnabled,setVoiceEnabled] = React.useState(()=>{return window.silenceMode !== true});const [volume,setVolume] = React.useState(0.8);const [status,setStatus] = React.useState('ready');const [transcript,setTranscript] = React.useState('');const voiceService = React.useMemo(()=>{return new(window.ElevenLabsVoiceService || window.MockElevenLabsVoiceService)()},[]);React.useEffect(()=>{const handleSilenceModeChange =(event)=>{setVoiceEnabled(!event.detail);if(event.detail && isPlaying){stopPlayback()}};window.addEventListener('silenceModeChanged',handleSilenceModeChange);return()=> window.removeEventListener('silenceModeChanged',handleSilenceModeChange)},[isPlaying]);const playFeedback = React.useCallback(async()=>{if(!voiceEnabled || !analysis)return;setStatus('generating');setIsPlaying(true);try{const script = voiceService.generateMaintenanceScript(analysis);setTranscript(script);const audioResult = await voiceService.generateMaintenanceFeedback(script,{voiceId:'rachel'});if(audioResult.success){setStatus('playing');const playback = await voiceService.playAudio(audioResult.audioUrl,{volume,onEnd:()=>{setIsPlaying(false);setStatus('complete');if(onComplete)onComplete()},onError:(error)=>{console.error('Playback error:',error);setIsPlaying(false);setStatus('error')}});setCurrentAudio(playback)}else if(audioResult.fallback && audioResult.speak){setStatus('playing');const controls = audioResult.speak();setCurrentAudio({...controls,success:true});setTimeout(()=>{setIsPlaying(false);setStatus('complete');if(onComplete)onComplete()},script.length * 60)}}catch(error){console.error('Error playing feedback:',error);setStatus('error');setIsPlaying(false)}},[analysis,voiceEnabled,volume,voiceService,onComplete]);const stopPlayback =()=>{if(currentAudio && currentAudio.stop){currentAudio.stop()}setIsPlaying(false);setCurrentAudio(null);setStatus('ready')};React.useEffect(()=>{if(analysis && voiceEnabled && status === 'ready'){playFeedback()}},[analysis]);React.useEffect(()=>{return()=>{if(currentAudio && currentAudio.stop){currentAudio.stop()}}},[currentAudio]);return React.createElement('div',{className:'maintenance-voice-assistant'},[ React.createElement('div',{key:'controls',className:'voice-controls'},[ React.createElement('div',{key:'header',className:'controls-header'},[ React.createElement('h4',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-microphone-alt'}),' Voice Assistant' ]),React.createElement('label',{key:'toggle',className:'voice-toggle'},[ React.createElement('input',{key:'checkbox',type:'checkbox',checked:voiceEnabled,onChange:(e)=> setVoiceEnabled(e.target.checked)}),React.createElement('span',{key:'slider',className:'toggle-slider'})])]),voiceEnabled && React.createElement('div',{key:'playback',className:'playback-controls'},[ React.createElement('button',{key:'play',className:`play-button ${isPlaying ? 'playing':''}`,onClick:isPlaying ? stopPlayback:playFeedback,disabled:status === 'generating'},[ React.createElement('i',{key:'icon',className:`fas fa-${isPlaying ? 'stop':'play'}`}),React.createElement('span',{key:'text'},status === 'generating' ? 'Generating...':isPlaying ? 'Stop':'Play Feedback')]),React.createElement('div',{key:'volume',className:'volume-control'},[ React.createElement('i',{key:'icon',className:'fas fa-volume-up'}),React.createElement('input',{key:'slider',type:'range',min:'0',max:'1',step:'0.1',value:volume,onChange:(e)=> setVolume(parseFloat(e.target.value))})])])]),isPlaying && React.createElement('div',{key:'visualization',className:'voice-visualization'},[ React.createElement('div',{key:'wave1',className:'sound-wave'}),React.createElement('div',{key:'wave2',className:'sound-wave'}),React.createElement('div',{key:'wave3',className:'sound-wave'}),React.createElement('div',{key:'wave4',className:'sound-wave'}),React.createElement('div',{key:'wave5',className:'sound-wave'})]),transcript && React.createElement('div',{key:'transcript',className:'voice-transcript'},[ React.createElement('div',{key:'header',className:'transcript-header'},[ React.createElement('i',{key:'icon',className:'fas fa-align-left'}),' Transcript' ]),React.createElement('p',{key:'text'},transcript)]),analysis && React.createElement('div',{key:'actions',className:'voice-actions'},[ React.createElement('h5',{key:'title'},'Voice Commands Available:'),React.createElement('div',{key:'commands',className:'command-list'},[ React.createElement('div',{key:'cmd1',className:'command-item'},[ React.createElement('span',{key:'trigger',className:'command-trigger'},'"Repeat"'),React.createElement('span',{key:'desc',className:'command-desc'},'Replay the feedback')]),React.createElement('div',{key:'cmd2',className:'command-item'},[ React.createElement('span',{key:'trigger',className:'command-trigger'},'"Send to email"'),React.createElement('span',{key:'desc',className:'command-desc'},'Email the analysis')]),React.createElement('div',{key:'cmd3',className:'command-item'},[ React.createElement('span',{key:'trigger',className:'command-trigger'},'"Call vendor"'),React.createElement('span',{key:'desc',className:'command-desc'},'Contact assigned vendor')])])])])};const VoiceMaintenanceRequest =()=>{const [isListening,setIsListening] = React.useState(false);const [transcript,setTranscript] = React.useState('');const [category,setCategory] = React.useState(null);const [stage,setStage] = React.useState('welcome');const recognition = React.useMemo(()=>{if('webkitSpeechRecognition' in window || 'SpeechRecognition' in window){const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;const recognition = new SpeechRecognition();recognition.continuous = false;recognition.interimResults = true;recognition.lang = 'en-US';return recognition}return null},[]);const voiceService = React.useMemo(()=>{return new(window.ElevenLabsVoiceService || window.MockElevenLabsVoiceService)()},[]);const startListening =()=>{if(!recognition){alert('Speech recognition is not supported in your browser');return}setIsListening(true);recognition.start();recognition.onresult =(event)=>{const current = event.resultIndex;const transcript = event.results[current][0].transcript;setTranscript(transcript);if(event.results[current].isFinal){processVoiceCommand(transcript.toLowerCase())}};recognition.onerror =(event)=>{console.error('Speech recognition error:',event.error);setIsListening(false)};recognition.onend =()=>{setIsListening(false)}};const processVoiceCommand = async(command)=>{if(stage === 'category'){if(command.includes('plumb')){setCategory('plumbing');setStage('description');await speakPrompt('Got it. Please describe the plumbing issue.')}else if(command.includes('electric')){setCategory('electrical');setStage('description');await speakPrompt('I understand. Please describe the electrical issue.')}else if(command.includes('heat')|| command.includes('cool')|| command.includes('air')){setCategory('hvac');setStage('description');await speakPrompt('HVAC issue noted. Please describe what\'s happening.')}}};const speakPrompt = async(text)=>{const result = await voiceService.generateMaintenanceFeedback(text);if(result.success){await voiceService.playAudio(result.audioUrl)}else if(result.fallback && result.speak){result.speak()}};React.useEffect(()=>{if(stage === 'welcome'){const prompts = voiceService.generateMaintenancePrompts();speakPrompt(prompts.welcome);setStage('category')}},[]);return React.createElement('div',{className:'voice-maintenance-request'},[ React.createElement('div',{key:'header',className:'voice-header'},[ React.createElement('h3',{key:'title'},'Voice-Activated Maintenance Request'),React.createElement('p',{key:'desc'},'Speak to report your maintenance issue')]),React.createElement('button',{key:'mic',className:`voice-button ${isListening ? 'listening':''}`,onClick:isListening ?()=> recognition.stop():startListening},[ React.createElement('i',{key:'icon',className:`fas fa-microphone${isListening ? '':'-slash'}`}),React.createElement('span',{key:'text'},isListening ? 'Listening...':'Click to speak')]),transcript && React.createElement('div',{key:'transcript',className:'live-transcript'},[ React.createElement('i',{key:'icon',className:'fas fa-quote-left'}),' ',transcript ]),React.createElement('div',{key:'stage',className:'request-stage'},[ React.createElement('span',{key:'label'},'Current Step:'),React.createElement('span',{key:'value'},stage.charAt(0).toUpperCase()+ stage.slice(1))])])};window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceVoiceAssistant = MaintenanceVoiceAssistant;window.AppModules.VoiceMaintenanceRequest = VoiceMaintenanceRequest;

// SilenceModeIndicator.jsx
const SilenceModeIndicator =()=>{const [silenceMode,setSilenceMode] = React.useState(window.silenceMode === true);const [showTooltip,setShowTooltip] = React.useState(false);React.useEffect(()=>{const handleSilenceModeChange =(event)=>{setSilenceMode(event.detail);setShowTooltip(true);setTimeout(()=> setShowTooltip(false),3000)};window.addEventListener('silenceModeChanged',handleSilenceModeChange);return()=> window.removeEventListener('silenceModeChanged',handleSilenceModeChange)},[]);if(!silenceMode)return null;return React.createElement('div',{className:'silence-mode-indicator',onMouseEnter:()=> setShowTooltip(true),onMouseLeave:()=> setShowTooltip(false)},[ React.createElement('i',{key:'icon',className:'fas fa-volume-mute'}),showTooltip && React.createElement('div',{key:'tooltip',className:'silence-mode-tooltip'},'Silence Mode Active - Voice features disabled')])};window.AppModules = window.AppModules ||{};window.AppModules.SilenceModeIndicator = SilenceModeIndicator;

// SearchBar.jsx
const SearchBar =({onSearch,placeholder = "Search anything..."})=>{const [query,setQuery] = React.useState('');const [isFocused,setIsFocused] = React.useState(false);const [showCommand,setShowCommand] = React.useState(false);React.useEffect(()=>{const handleKeyDown =(e)=>{if((e.metaKey || e.ctrlKey)&& e.key === 'k'){e.preventDefault();setShowCommand(true)}if(e.key === 'Escape'){setShowCommand(false)}};window.addEventListener('keydown',handleKeyDown);return()=> window.removeEventListener('keydown',handleKeyDown)},[]);const handleSearch =(e)=>{setQuery(e.target.value);if(onSearch)onSearch(e.target.value)};return(<><div className={`search-bar ${isFocused ? 'focused':''}`}><Icons.Search /><input type="text" value={query}onChange={handleSearch}onFocus={()=> setIsFocused(true)}onBlur={()=> setIsFocused(false)}placeholder={placeholder}className="search-input" /><kbd className="search-shortcut"><Icons.Command /> K </kbd></div>{showCommand &&(<div className="command-palette-overlay" onClick={()=> setShowCommand(false)}><div className="command-palette" onClick={e => e.stopPropagation()}><div className="command-header"><Icons.Search /><input type="text" placeholder="Type a command or search..." className="command-input" autoFocus /></div><div className="command-sections"><div className="command-section"><div className="command-section-title">Quick Actions</div><div className="command-item"><Icons.Plus /><span>New Property</span><kbd>P</kbd></div><div className="command-item"><Icons.Users /><span>Add Tenant</span><kbd>T</kbd></div><div className="command-item"><Icons.Document /><span>Create Lease</span><kbd>L</kbd></div></div><div className="command-section"><div className="command-section-title">Navigate</div><div className="command-item"><Icons.Dashboard /><span>Dashboard</span></div><div className="command-item"><Icons.Building /><span>Properties</span></div><div className="command-item"><Icons.Dollar /><span>Payments</span></div></div></div></div></div>)}</>)};

// DraggableWidget.jsx
const DraggableWidget =({widget,index,editMode,onMove,onRemove,onResize,children})=>{const [isDragging,setIsDragging] = React.useState(false);const [isResizing,setIsResizing] = React.useState(false);const [dragStart,setDragStart] = React.useState({x:0,y:0});const [resizeStart,setResizeStart] = React.useState({x:0,y:0,w:0,h:0});const [currentPosition,setCurrentPosition] = React.useState({x:widget.position.x,y:widget.position.y});const [currentSize,setCurrentSize] = React.useState({w:widget.position.w,h:widget.position.h});const widgetRef = React.useRef(null);const handleMouseDown =(e)=>{if(!editMode)return;if(!e.target.closest('.widget-drag-handle')&& e.target.tagName !== 'DIV'){return}setDragStart({x:e.clientX,y:e.clientY});setIsDragging(true);e.preventDefault()};React.useEffect(()=>{setCurrentPosition({x:widget.position.x,y:widget.position.y});setCurrentSize({w:widget.position.w,h:widget.position.h})},[widget.position]);React.useEffect(()=>{if(!isDragging)return;const handleMouseMove =(e)=>{const container = document.querySelector('.grid-layout');if(!container)return;const rect = container.getBoundingClientRect();const deltaX = e.clientX - dragStart.x;const deltaY = e.clientY - dragStart.y;const gridCellWidth = rect.width / 4;const gridCellHeight = 96;const gridDeltaX = Math.round(deltaX / gridCellWidth);const gridDeltaY = Math.round(deltaY / gridCellHeight);const newX = widget.position.x + gridDeltaX;const newY = widget.position.y + gridDeltaY;const maxX = 4 - widget.position.w;const constrainedX = Math.max(0,Math.min(newX,maxX));const constrainedY = Math.max(0,newY);setCurrentPosition({x:constrainedX,y:constrainedY})};const handleMouseUp =(e)=>{setIsDragging(false);if(currentPosition.x !== widget.position.x || currentPosition.y !== widget.position.y){onMove(widget.id,currentPosition)}};document.addEventListener('mousemove',handleMouseMove);document.addEventListener('mouseup',handleMouseUp);document.body.style.cursor = 'grabbing';return()=>{document.removeEventListener('mousemove',handleMouseMove);document.removeEventListener('mouseup',handleMouseUp);document.body.style.cursor = ''}},[isDragging,dragStart,widget,onMove,currentPosition]);const handleResizeStart =(e)=>{if(!editMode)return;e.stopPropagation();e.preventDefault();setResizeStart({x:e.clientX,y:e.clientY,w:widget.position.w,h:widget.position.h});setIsResizing(true)};React.useEffect(()=>{if(!isResizing)return;const handleMouseMove =(e)=>{const container = document.querySelector('.grid-layout');if(!container)return;const rect = container.getBoundingClientRect();const gridCellWidth = rect.width / 4;const gridCellHeight = 96;const deltaX = e.clientX - resizeStart.x;const deltaY = e.clientY - resizeStart.y;const gridDeltaW = Math.round(deltaX / gridCellWidth);const gridDeltaH = Math.round(deltaY / gridCellHeight);const newW = Math.max(1,Math.min(4 - widget.position.x,resizeStart.w + gridDeltaW));const newH = Math.max(1,resizeStart.h + gridDeltaH);setCurrentSize({w:newW,h:newH})};const handleMouseUp =()=>{setIsResizing(false);if(currentSize.w !== widget.position.w || currentSize.h !== widget.position.h){if(onResize){onResize(widget.id,currentSize)}}};document.addEventListener('mousemove',handleMouseMove);document.addEventListener('mouseup',handleMouseUp);document.body.style.cursor = 'se-resize';return()=>{document.removeEventListener('mousemove',handleMouseMove);document.removeEventListener('mouseup',handleMouseUp);document.body.style.cursor = ''}},[isResizing,resizeStart,widget,onResize,currentSize]);const widgetStyle ={position:'absolute',left:`${currentPosition.x * 25}%`,top:`${currentPosition.y * 96}px`,width:`${currentSize.w * 25 - 2}%`,height:`${currentSize.h * 96 - 16}px`,transition:(isDragging || isResizing)? 'none':'all 300ms ease',cursor:editMode ? 'grab':'default',zIndex:(isDragging || isResizing)? 100:1};return(<div ref={widgetRef}className={`glass-widget widget-${currentSize.w}x${currentSize.h}${isDragging ? 'dragging':''}${isResizing ? 'resizing':''}`}style={widgetStyle}onMouseDown={handleMouseDown}>{editMode &&(<><div className="widget-drag-handle" style={{cursor:'grab'}}><svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor"><circle cx="4" cy="4" r="1.5" opacity="0.6"/><circle cx="8" cy="4" r="1.5" opacity="0.6"/><circle cx="12" cy="4" r="1.5" opacity="0.6"/><circle cx="4" cy="8" r="1.5" opacity="0.6"/><circle cx="8" cy="8" r="1.5" opacity="0.6"/><circle cx="12" cy="8" r="1.5" opacity="0.6"/><circle cx="4" cy="12" r="1.5" opacity="0.6"/><circle cx="8" cy="12" r="1.5" opacity="0.6"/><circle cx="12" cy="12" r="1.5" opacity="0.6"/></svg></div><button className="widget-remove-btn" onClick={(e)=>{e.stopPropagation();onRemove(widget.id)}}> × </button><div className="widget-resize-handle" onMouseDown={handleResizeStart}/></>)}{children}</div>)};

// PropertyList.jsx
const PropertyList = ComponentFactory.createComponent('PropertyList',{privateHelpers:{getPropertyTypeIcon:(type)=>{const icons ={residential:'🏠',commercial:'🏢',mixed:'🏗️',industrial:'🏭'};return icons[type] || '🏢'},getStatusColor:(status)=>{const colors ={active:'var(--color-success)',maintenance:'var(--color-warning)',vacant:'var(--color-danger)',inactive:'var(--color-muted)'};return colors[status] || 'var(--color-muted)'},formatLastUpdated:(dateString)=>{try{const date = new Date(dateString);const now = new Date();const diffMs = now - date;const diffDays = Math.floor(diffMs /(1000 * 60 * 60 * 24));if(diffDays === 0)return 'Today';if(diffDays === 1)return 'Yesterday';if(diffDays < 7)return `${diffDays}days ago`;if(diffDays < 30)return `${Math.floor(diffDays / 7)}weeks ago`;return date.toLocaleDateString()}catch(error){return 'Unknown'}}},defaultProps:{properties:[],onEdit:()=>{},onDelete:()=>{},onView:()=>{},compact:false,itemsPerPage:12}})((props,helpers)=>{const{properties = [],onEdit,onDelete,onView,compact = false,itemsPerPage = 12}= props;const{useLocalState,formatCurrency,formatPercentage,classNames,getPropertyTypeIcon,getStatusColor,formatLastUpdated}= helpers;const [state,updateState] = useLocalState({currentPage:1,sortBy:'name',sortOrder:'asc'});const totalPages = Math.ceil(properties.length / itemsPerPage);const startIndex =(state.currentPage - 1)* itemsPerPage;const endIndex = startIndex + itemsPerPage;const currentProperties = properties.slice(startIndex,endIndex);const handleSort =(field)=>{const newOrder = state.sortBy === field && state.sortOrder === 'asc' ? 'desc':'asc';updateState({sortBy:field,sortOrder:newOrder})};const handlePageChange =(page)=>{updateState({currentPage:page})};const handleEdit =(property)=>{onEdit(property)};const handleDelete = async(property)=>{const confirmed = confirm(`Are you sure you want to delete "${property.name}"?`);if(confirmed){try{await onDelete(property.id)}catch(error){alert(`Failed to delete property:${error.message}`)}}};const handleView =(property)=>{onView(property)};const renderPropertyCard =(property)=>{const typeIcon = getPropertyTypeIcon(property.property_type);const statusColor = getStatusColor(property.status);return React.createElement('div',{key:property.id,className:classNames('property-card',compact && 'compact')},[ React.createElement('div',{key:'header',className:'property-header'},[ React.createElement('div',{key:'icon',className:'property-icon'},typeIcon),React.createElement('div',{key:'status',className:'property-status',style:{color:statusColor}},property.status)]),React.createElement('div',{key:'info',className:'property-info'},[ React.createElement('h3',{key:'name',className:'property-name'},property.name),React.createElement('p',{key:'address',className:'property-address'},property.address),property.description && React.createElement('p',{key:'description',className:'property-description'},property.description)]),React.createElement('div',{key:'metrics',className:'property-metrics'},[ React.createElement('div',{key:'units',className:'metric'},[ React.createElement('span',{key:'label',className:'metric-label'},'Units'),React.createElement('span',{key:'value',className:'metric-value'},`${property.occupied_units}/${property.total_units}`)]),React.createElement('div',{key:'occupancy',className:'metric'},[ React.createElement('span',{key:'label',className:'metric-label'},'Occupancy'),React.createElement('span',{key:'value',className:'metric-value'},formatPercentage(property.occupancy?.rate || 0))]),React.createElement('div',{key:'revenue',className:'metric'},[ React.createElement('span',{key:'label',className:'metric-label'},'Revenue'),React.createElement('span',{key:'value',className:'metric-value'},formatCurrency(property.monthly_revenue || 0))])]),React.createElement('div',{key:'footer',className:'property-footer'},[ React.createElement('span',{key:'updated',className:'last-updated'},`Updated ${formatLastUpdated(property.last_updated)}`)]),React.createElement('div',{key:'actions',className:'property-actions'},[ React.createElement('button',{key:'view',className:'btn btn-sm btn-outline-primary',onClick:()=> handleView(property),title:'View Details'},'👁️'),React.createElement('button',{key:'edit',className:'btn btn-sm btn-outline-secondary',onClick:()=> handleEdit(property),title:'Edit Property'},'✏️'),React.createElement('button',{key:'delete',className:'btn btn-sm btn-outline-danger',onClick:()=> handleDelete(property),title:'Delete Property'},'🗑️')])])};const renderPagination =()=>{if(totalPages <= 1)return null;const pages = [];const maxVisiblePages = 5;let startPage = Math.max(1,state.currentPage - Math.floor(maxVisiblePages / 2));let endPage = Math.min(totalPages,startPage + maxVisiblePages - 1);if(endPage - startPage < maxVisiblePages - 1){startPage = Math.max(1,endPage - maxVisiblePages + 1)}if(state.currentPage > 1){pages.push(React.createElement('button',{key:'prev',className:'btn btn-sm btn-outline-primary',onClick:()=> handlePageChange(state.currentPage - 1)},'‹'))}for(let i = startPage;i <= endPage;i++){pages.push(React.createElement('button',{key:i,className:classNames('btn btn-sm',i === state.currentPage ? 'btn-primary':'btn-outline-primary'),onClick:()=> handlePageChange(i)},i.toString()))}if(state.currentPage < totalPages){pages.push(React.createElement('button',{key:'next',className:'btn btn-sm btn-outline-primary',onClick:()=> handlePageChange(state.currentPage + 1)},'›'))}return React.createElement('div',{className:'pagination'},[ React.createElement('div',{key:'info',className:'pagination-info'},`Showing ${startIndex + 1}-${Math.min(endIndex,properties.length)}of ${properties.length}properties`),React.createElement('div',{key:'controls',className:'pagination-controls'},pages)])};if(properties.length === 0){return React.createElement('div',{className:'empty-state'},[ React.createElement('div',{key:'icon',className:'empty-icon'},'🏢'),React.createElement('h3',{key:'title'},'No Properties Found'),React.createElement('p',{key:'message'},'No properties match your current filters.')])}return React.createElement('div',{className:'property-list'},[ React.createElement('div',{key:'grid',className:classNames('properties-grid',compact && 'compact-grid')},currentProperties.map(renderPropertyCard)),renderPagination()])});window.AppModules = window.AppModules ||{};window.AppModules.PropertyList = PropertyList;

// AddPropertyModal.jsx
const AddPropertyModal = ComponentFactory.createComponent('AddPropertyModal',{privateHelpers:{validateForm:(formData)=>{const errors ={};if(!formData.name?.trim()){errors.name = 'Property name is required'}if(!formData.address?.street?.trim()){errors['address.street'] = 'Street address is required'}if(!formData.address?.city?.trim()){errors['address.city'] = 'City is required'}if(!formData.address?.state?.trim()){errors['address.state'] = 'State is required'}else if(formData.address.state.length !== 2){errors['address.state'] = 'State must be 2 characters'}if(!formData.address?.zip?.trim()){errors['address.zip'] = 'ZIP code is required'}else if(!/^\d{5}(-\d{4})?$/.test(formData.address.zip)){errors['address.zip'] = 'Invalid ZIP code format'}if(!formData.total_units || formData.total_units < 1){errors.total_units = 'Total units must be at least 1'}if(formData.total_units > 1000){errors.total_units = 'Total units cannot exceed 1000'}return errors},sanitizeFormData:(formData)=>{return{...formData,name:formData.name?.trim(),address:{street:formData.address?.street?.trim(),city:formData.address?.city?.trim(),state:formData.address?.state?.trim()?.toUpperCase(),zip:formData.address?.zip?.trim()},total_units:parseInt(formData.total_units)|| 1,valor_merchant_id:formData.valor_merchant_id?.trim()|| null}},getInitialFormData:()=>({name:'',property_type:'residential',address_line1:'',address_line2:'',city:'',state:'',postal_code:'',country:'United States',total_units:1,features:[],amenities:{},description:''}),handleKeyboardNavigation:(e,onClose)=>{if(e.key === 'Escape'){onClose()}},formatZipCode:(value)=>{const cleaned = value.replace(/\D/g,'');if(cleaned.length <= 5){return cleaned}return `${cleaned.slice(0,5)}-${cleaned.slice(5,9)}`},getStateOptions:()=> [ 'AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY' ]},defaultProps:{title:'Add New Property',submitText:'Create Property',cancelText:'Cancel'},propTypes:{onClose:'function',onSave:'function',title:'string',submitText:'string',cancelText:'string',initialData:'object'},withPerformanceTracking:true,withErrorBoundary:true})((props,helpers,ref)=>{const{onClose,onSave,title,submitText,cancelText,initialData}= props;const{useLocalState,useAsyncState,classNames,debounce,validateForm,sanitizeFormData,getInitialFormData,handleKeyboardNavigation,formatZipCode,getStateOptions}= helpers;const [state,updateState] = useLocalState({formData:initialData || getInitialFormData(),errors:{},touched:{},isSubmitting:false,isDirty:false});const saveDraft = React.useMemo(()=> debounce((formData)=>{localStorage.setItem('propertyFormDraft',JSON.stringify(formData))},1000),[]);React.useEffect(()=>{if(!initialData){const draft = localStorage.getItem('propertyFormDraft');if(draft){try{const draftData = JSON.parse(draft);updateState({formData:draftData,isDirty:true})}catch(error){console.warn('Failed to load form draft:',error)}}}},[]);React.useEffect(()=>{if(state.isDirty){saveDraft(state.formData)}},[state.formData,state.isDirty]);React.useEffect(()=>{const handleKeyDown =(e)=> handleKeyboardNavigation(e,onClose);document.addEventListener('keydown',handleKeyDown);return()=> document.removeEventListener('keydown',handleKeyDown)},[onClose]);React.useEffect(()=>{const firstInput = document.querySelector('.modal input[type="text"]');if(firstInput){setTimeout(()=> firstInput.focus(),100)}},[]);const updateField =(field,value)=>{const updatedFormData ={...state.formData};if(field.includes('.')){const [parent,child] = field.split('.');updatedFormData[parent] ={...updatedFormData[parent],[child]:value}}else{updatedFormData[field] = value}const newErrors ={...state.errors};delete newErrors[field];updateState({formData:updatedFormData,errors:newErrors,touched:{...state.touched,[field]:true},isDirty:true})};const handleSubmit = async(e)=>{e.preventDefault();if(state.isSubmitting)return;updateState({isSubmitting:true});try{const sanitizedData = sanitizeFormData(state.formData);const validationErrors = validateForm(sanitizedData);if(Object.keys(validationErrors).length > 0){updateState({errors:validationErrors,isSubmitting:false,touched:Object.keys(validationErrors).reduce((acc,key)=>({...acc,[key]:true}),{})});const firstErrorField = document.querySelector(`[data-field="${Object.keys(validationErrors)[0]}"]`);if(firstErrorField){firstErrorField.focus()}return}await onSave(sanitizedData);localStorage.removeItem('propertyFormDraft');onClose()}catch(error){updateState({isSubmitting:false,errors:{submit:error.message || 'Failed to save property'}})}};const handleCancel =()=>{if(state.isDirty){const confirmLeave = confirm('You have unsaved changes. Are you sure you want to cancel?');if(!confirmLeave)return}localStorage.removeItem('propertyFormDraft');onClose()};const handleZipChange =(value)=>{const formatted = formatZipCode(value);updateField('address.zip',formatted)};const renderFormGroup =(label,field,type = 'text',options ={})=>{const{required = false,placeholder = '',maxLength,min,max,children,helpText}= options;const error = state.errors[field];const touched = state.touched[field];const hasError = error && touched;return React.createElement('div',{className:classNames('form-group',hasError && 'has-error')},[ React.createElement('label',{key:'label',htmlFor:field.replace('.','_')},[ label,required && React.createElement('span',{key:'required',className:'required'},' *')]),children || React.createElement('input',{key:'input',type,id:field.replace('.','_'),'data-field':field,className:classNames('form-control',hasError && 'is-invalid'),value:field.includes('.')? state.formData[field.split('.')[0]]?.[field.split('.')[1]] || '':state.formData[field] || '',onChange:(e)=> updateField(field,e.target.value),placeholder,maxLength,min,max,required,disabled:state.isSubmitting,'aria-describedby':hasError ? `${field.replace('.','_')}_error`:undefined}),helpText && React.createElement('small',{key:'help',className:'form-text text-muted'},helpText),hasError && React.createElement('div',{key:'error',id:`${field.replace('.','_')}_error`,className:'invalid-feedback',role:'alert'},error)])};const renderStateSelect =()=>{const stateOptions = getStateOptions();return React.createElement('select',{id:'address_state','data-field':'address.state',className:classNames('form-control',state.errors['address.state'] && state.touched['address.state'] && 'is-invalid'),value:state.formData.address?.state || '',onChange:(e)=> updateField('address.state',e.target.value),required:true,disabled:state.isSubmitting},[ React.createElement('option',{key:'empty',value:''},'Select State'),...stateOptions.map(state => React.createElement('option',{key:state,value:state},state))])};const renderPropertyTypeSelect =()=>{const propertyTypes = [{value:'residential',label:'Residential'},{value:'commercial',label:'Commercial'},{value:'mixed',label:'Mixed Use'},{value:'industrial',label:'Industrial'}];return React.createElement('select',{id:'property_type','data-field':'property_type',className:'form-control',value:state.formData.property_type || 'residential',onChange:(e)=> updateField('property_type',e.target.value),disabled:state.isSubmitting},propertyTypes.map(type => React.createElement('option',{key:type.value,value:type.value},type.label)))};return React.createElement('div',{className:'modal-overlay',onClick:handleCancel,role:'dialog','aria-modal':true,'aria-labelledby':'modal-title'},[ React.createElement('div',{key:'modal',className:'modal modal-lg',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title',id:'modal-title',className:'modal-title'},title),React.createElement('button',{key:'close',type:'button',className:'close-btn',onClick:handleCancel,'aria-label':'Close modal'},'×')]),React.createElement('form',{key:'form',onSubmit:handleSubmit,className:'modal-body',noValidate:true},[ React.createElement('div',{key:'basic-info',className:'form-section'},[ React.createElement('h3',{key:'title'},'Basic Information'),renderFormGroup('Property Name','name','text',{required:true,placeholder:'Enter property name'}),renderFormGroup('Property Type','property_type','select',{children:renderPropertyTypeSelect()}),renderFormGroup('Description','description','textarea',{placeholder:'Optional description of the property',children:React.createElement('textarea',{id:'description','data-field':'description',className:'form-control',value:state.formData.description || '',onChange:(e)=> updateField('description',e.target.value),placeholder:'Optional description of the property',rows:3,disabled:state.isSubmitting})})]),React.createElement('div',{key:'address-info',className:'form-section'},[ React.createElement('h3',{key:'title'},'Address Information'),renderFormGroup('Street Address','address.street','text',{required:true,placeholder:'123 Main Street'}),React.createElement('div',{key:'address-row',className:'form-row'},[ React.createElement('div',{key:'city',className:'col-md-6'},renderFormGroup('City','address.city','text',{required:true,placeholder:'City name'})),React.createElement('div',{key:'state',className:'col-md-3'},renderFormGroup('State','address.state','select',{required:true,children:renderStateSelect()})),React.createElement('div',{key:'zip',className:'col-md-3'},renderFormGroup('ZIP Code','address.zip','text',{required:true,placeholder:'12345',maxLength:10,helpText:'Format:12345 or 12345-6789'}))])]),React.createElement('div',{key:'details-info',className:'form-section'},[ React.createElement('h3',{key:'title'},'Property Details'),React.createElement('div',{key:'details-row',className:'form-row'},[ React.createElement('div',{key:'units',className:'col-md-6'},renderFormGroup('Total Units','total_units','number',{required:true,min:1,max:1000,helpText:'Number of rental units'})),React.createElement('div',{key:'merchant',className:'col-md-6'},renderFormGroup('Valor Merchant ID','valor_merchant_id','text',{placeholder:'Optional - uses default if empty',helpText:'For payment processing integration'}))])]),state.errors.submit && React.createElement('div',{key:'submit-error',className:'alert alert-danger',role:'alert'},state.errors.submit)]),React.createElement('div',{key:'footer',className:'modal-footer'},[ React.createElement('button',{key:'cancel',type:'button',className:'btn btn-secondary',onClick:handleCancel,disabled:state.isSubmitting},cancelText),React.createElement('button',{key:'submit',type:'submit',className:'btn btn-primary',disabled:state.isSubmitting,onClick:handleSubmit},[ state.isSubmitting && React.createElement('span',{key:'spinner',className:'spinner-border spinner-border-sm','aria-hidden':true}),state.isSubmitting ? ' Creating...':submitText ])])])])});window.AppModules = window.AppModules ||{};window.AppModules.AddPropertyModal = AddPropertyModal;

// CommunicationsHub.jsx
const CommunicationsHub =()=>{const [activeView,setActiveView] = React.useState('overview');const [searchQuery,setSearchQuery] = React.useState('');const [filters,setFilters] = React.useState({participantType:'',propertyId:'',type:'',priority:'',resolved:null,dateRange:{start:'',end:''}});const [conversations,setConversations] = React.useState([]);const [analytics,setAnalytics] = React.useState(null);const [loading,setLoading] = React.useState(true);const [selectedConversation,setSelectedConversation] = React.useState(null);const [exportFormat,setExportFormat] = React.useState('csv');const logService = window.ConversationLogService;React.useEffect(()=>{loadData()},[activeView,searchQuery,filters]);const loadData = async()=>{setLoading(true);try{const searchResults = logService.searchConversations(searchQuery,filters);setConversations(searchResults);const analyticsData = logService.getAnalytics('30d');setAnalytics(analyticsData)}catch(error){console.error('Error loading communications data:',error)}finally{setLoading(false)}};const handleExport =()=>{try{const exportData = logService.exportConversations(exportFormat,filters);const blob = new Blob([exportData],{type:exportFormat === 'csv' ? 'text/csv':'application/json'});const url = URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `conversations_${new Date().toISOString().split('T')[0]}.${exportFormat}`;a.click();URL.revokeObjectURL(url);window.showNotification?.('success',`Conversations exported as ${exportFormat.toUpperCase()}`)}catch(error){console.error('Export error:',error);window.showNotification?.('error','Failed to export conversations')}};const handleArchive =()=>{try{const result = logService.archiveOldConversations(365);window.showNotification?.('success',`Archived ${result.archived}old conversations`);loadData()}catch(error){console.error('Archive error:',error);window.showNotification?.('error','Failed to archive conversations')}};const toggleResolved =(conversationId)=>{const conversation = conversations.find(c => c.id === conversationId);if(conversation){logService.markResolved(conversationId,!conversation.metadata.resolved);loadData()}};const formatTimeAgo =(timestamp)=>{const date = new Date(timestamp);const now = new Date();const diffMs = now - date;const diffMins = Math.floor(diffMs / 60000);const diffHours = Math.floor(diffMs / 3600000);const diffDays = Math.floor(diffMs / 86400000);if(diffMins < 1)return 'just now';if(diffMins < 60)return `${diffMins}m ago`;if(diffHours < 24)return `${diffHours}h ago`;if(diffDays < 7)return `${diffDays}d ago`;return date.toLocaleDateString('en-US',{month:'short',day:'numeric'})};const getTypeIcon =(type)=>{const icons ={text:'fa-comment',voice:'fa-microphone',ai:'fa-robot',broadcast:'fa-bullhorn',email:'fa-envelope'};return icons[type] || 'fa-comment'};const getParticipantIcon =(type)=>{const icons ={tenant:'fa-user',owner:'fa-building',vendor:'fa-tools',admin:'fa-user-shield',prospect:'fa-user-plus'};return icons[type] || 'fa-user'};return(<div className="communications-hub">{}<div className="hub-header"><div className="header-gradient"><div className="floating-particles"><div className="particle particle-1"></div><div className="particle particle-2"></div><div className="particle particle-3"></div></div></div><div className="header-content"><h1>Communications Hub</h1><p>Complete conversation history and analytics</p>{analytics &&(<div className="header-stats"><div className="stat-card"><div className="stat-icon"><i className="fas fa-comments"></i></div><div className="stat-info"><span className="stat-value">{analytics.totalConversations}</span><span className="stat-label">Total Conversations</span></div></div><div className="stat-card"><div className="stat-icon"><i className="fas fa-clock"></i></div><div className="stat-info"><span className="stat-value">{analytics.averageResponseTime}m</span><span className="stat-label">Avg Response Time</span></div></div><div className="stat-card"><div className="stat-icon"><i className="fas fa-check-circle"></i></div><div className="stat-info"><span className="stat-value">{analytics.resolutionRate}%</span><span className="stat-label">Resolution Rate</span></div></div><div className="stat-card"><div className="stat-icon"><i className="fas fa-robot"></i></div><div className="stat-info"><span className="stat-value">{analytics.aiAssistedConversations}</span><span className="stat-label">AI Assisted</span></div></div></div>)}</div></div>{}<div className="hub-navigation"><div className="nav-tabs">{[{id:'overview',label:'Overview',icon:'fa-chart-line'},{id:'conversations',label:'Conversations',icon:'fa-comments'},{id:'analytics',label:'Analytics',icon:'fa-chart-bar'},{id:'ai-transcripts',label:'AI Transcripts',icon:'fa-robot'},{id:'export',label:'Export & Archive',icon:'fa-download'}].map(tab =>(<button key={tab.id}className={`nav-tab ${activeView === tab.id ? 'active':''}`}onClick={()=> setActiveView(tab.id)}><i className={`fas ${tab.icon}`}></i><span>{tab.label}</span></button>))}</div></div>{}<div className="hub-content">{activeView === 'overview' &&(<OverviewTab analytics={analytics}conversations={conversations.slice(0,10)}/>)}{activeView === 'conversations' &&(<ConversationsTab conversations={conversations}searchQuery={searchQuery}setSearchQuery={setSearchQuery}filters={filters}setFilters={setFilters}selectedConversation={selectedConversation}setSelectedConversation={setSelectedConversation}toggleResolved={toggleResolved}loading={loading}/>)}{activeView === 'analytics' &&(<AnalyticsTab analytics={analytics}/>)}{activeView === 'ai-transcripts' &&(<AITranscriptsTab />)}{activeView === 'export' &&(<ExportTab exportFormat={exportFormat}setExportFormat={setExportFormat}handleExport={handleExport}handleArchive={handleArchive}filters={filters}setFilters={setFilters}/>)}</div></div>)};const OverviewTab =({analytics,conversations})=>{if(!analytics)return <div className="loading-state">Loading analytics...</div>;return(<div className="overview-tab"><div className="overview-grid">{}<div className="overview-card recent-activity"><h3><i className="fas fa-clock"></i> Recent Activity </h3><div className="activity-list">{conversations.map(conv =>(<div key={conv.id}className="activity-item"><div className="activity-icon"><i className={`fas ${conv.type === 'ai' ? 'fa-robot':'fa-comment'}`}></i></div><div className="activity-content"><p className="activity-text"><strong>{conv.participantName}</strong> -{conv.content.substring(0,50)}... </p><span className="activity-time">{formatTimeAgo(conv.timestamp)}</span></div><div className="activity-meta"><span className={`type-badge ${conv.type}`}>{conv.type}</span></div></div>))}</div></div>{}<div className="overview-card conversation-types"><h3><i className="fas fa-chart-pie"></i> Conversation Types </h3><div className="type-breakdown">{Object.entries(analytics.byType ||{}).map(([type,count])=>(<div key={type}className="type-item"><div className="type-info"><i className={`fas ${getTypeIcon(type)}`}></i><span className="type-name">{type.charAt(0).toUpperCase()+ type.slice(1)}</span></div><span className="type-count">{count}</span></div>))}</div></div>{}<div className="overview-card participant-breakdown"><h3><i className="fas fa-users"></i> By Participant Type </h3><div className="participant-chart">{Object.entries(analytics.byParticipantType ||{}).map(([type,count])=>(<div key={type}className="participant-bar"><div className="bar-info"><i className={`fas ${getParticipantIcon(type)}`}></i><span>{type.charAt(0).toUpperCase()+ type.slice(1)}s</span></div><div className="bar-visual"><div className="bar-fill" style={{width:`${(count / analytics.totalConversations)* 100}%`,backgroundColor:getParticipantColor(type)}}></div></div><span className="bar-count">{count}</span></div>))}</div></div>{}<div className="overview-card top-properties"><h3><i className="fas fa-building"></i> Most Active Properties </h3><div className="property-list">{Object.entries(analytics.byProperty ||{}).sort(([,a],[,b])=> b - a).slice(0,5).map(([property,count])=>(<div key={property}className="property-item"><span className="property-name">{property || 'Unknown'}</span><span className="property-count">{count}</span></div>))}</div></div></div></div>)};const ConversationsTab =({conversations,searchQuery,setSearchQuery,filters,setFilters,selectedConversation,setSelectedConversation,toggleResolved,loading})=>{return(<div className="conversations-tab">{}<div className="conversations-controls"><div className="search-container"><i className="fas fa-search"></i><input type="text" placeholder="Search conversations..." value={searchQuery}onChange={(e)=> setSearchQuery(e.target.value)}className="search-input" /></div><div className="filter-row"><select value={filters.participantType}onChange={(e)=> setFilters({...filters,participantType:e.target.value})}className="filter-select" ><option value="">All Participants</option><option value="tenant">Tenants</option><option value="owner">Owners</option><option value="vendor">Vendors</option><option value="admin">Admins</option></select><select value={filters.type}onChange={(e)=> setFilters({...filters,type:e.target.value})}className="filter-select" ><option value="">All Types</option><option value="text">Text</option><option value="voice">Voice</option><option value="ai">AI</option><option value="broadcast">Broadcast</option></select><select value={filters.priority}onChange={(e)=> setFilters({...filters,priority:e.target.value})}className="filter-select" ><option value="">All Priorities</option><option value="low">Low</option><option value="normal">Normal</option><option value="high">High</option><option value="urgent">Urgent</option></select><select value={filters.resolved === null ? '':filters.resolved.toString()}onChange={(e)=> setFilters({...filters,resolved:e.target.value === '' ? null:e.target.value === 'true'})}className="filter-select" ><option value="">All Status</option><option value="false">Unresolved</option><option value="true">Resolved</option></select></div></div>{}<div className="conversations-container"><div className="conversations-list">{loading ?(<div className="loading-state"><i className="fas fa-spinner fa-spin"></i><p>Loading conversations...</p></div>):conversations.length === 0 ?(<div className="empty-state"><i className="fas fa-comments"></i><h3>No conversations found</h3><p>Try adjusting your search or filters</p></div>):(conversations.map(conv =>(<ConversationCard key={conv.id}conversation={conv}selected={selectedConversation?.id === conv.id}onClick={()=> setSelectedConversation(conv)}onToggleResolved={()=> toggleResolved(conv.id)}/>)))}</div>{}<div className="conversation-detail">{selectedConversation ?(<ConversationDetail conversation={selectedConversation}/>):(<div className="detail-empty"><i className="fas fa-comment-alt"></i><h3>Select a conversation</h3><p>Choose a conversation to view details</p></div>)}</div></div></div>)};const ConversationCard =({conversation,selected,onClick,onToggleResolved})=>{return(<div className={`conversation-card ${selected ? 'selected':''}${conversation.metadata.resolved ? 'resolved':''}`}onClick={onClick}><div className="card-header"><div className="participant-info"><div className={`participant-avatar ${conversation.participantType}`}><i className={`fas ${getParticipantIcon(conversation.participantType)}`}></i></div><div className="participant-details"><h4>{conversation.participantName}</h4><p>{conversation.propertyName}{conversation.unitNumber && `• Unit ${conversation.unitNumber}`}</p></div></div><div className="conversation-meta"><span className="timestamp">{formatTimeAgo(conversation.timestamp)}</span><div className="type-badges"><span className={`type-badge ${conversation.type}`}><i className={`fas ${getTypeIcon(conversation.type)}`}></i>{conversation.type}</span>{conversation.metadata.priority !== 'normal' &&(<span className={`priority-badge ${conversation.metadata.priority}`}>{conversation.metadata.priority}</span>)}</div></div></div><div className="card-content">{conversation.subject &&(<p className="conversation-subject">{conversation.subject}</p>)}<p className="conversation-preview">{conversation.content.substring(0,150)}{conversation.content.length > 150 && '...'}</p></div><div className="card-footer"><div className="conversation-tags">{conversation.metadata.tags.map(tag =>(<span key={tag}className="tag">{tag}</span>))}{conversation.metadata.aiAssisted &&(<span className="tag ai">AI Assisted</span>)}</div><div className="card-actions"><button className={`resolve-btn ${conversation.metadata.resolved ? 'resolved':''}`}onClick={(e)=>{e.stopPropagation();onToggleResolved()}}><i className={`fas ${conversation.metadata.resolved ? 'fa-undo':'fa-check'}`}></i>{conversation.metadata.resolved ? 'Unresolve':'Resolve'}</button></div></div></div>)};const ConversationDetail =({conversation})=>{return(<div className="conversation-detail-view"><div className="detail-header"><div className="detail-participant"><div className={`detail-avatar ${conversation.participantType}`}><i className={`fas ${getParticipantIcon(conversation.participantType)}`}></i></div><div className="detail-info"><h3>{conversation.participantName}</h3><p>{conversation.participantType}•{conversation.propertyName}</p>{conversation.unitNumber && <p>Unit{conversation.unitNumber}</p>}</div></div><div className="detail-meta"><span className="detail-timestamp">{new Date(conversation.timestamp).toLocaleString()}</span><div className="detail-badges"><span className={`type-badge ${conversation.type}`}><i className={`fas ${getTypeIcon(conversation.type)}`}></i>{conversation.type}</span><span className={`channel-badge`}>{conversation.metadata.channel}</span></div></div></div><div className="detail-content">{conversation.subject &&(<div className="detail-subject"><h4>Subject</h4><p>{conversation.subject}</p></div>)}<div className="detail-message"><h4>Message</h4><div className="message-content">{conversation.content.split('\n').map((line,i)=>(<p key={i}>{line}</p>))}</div></div>{conversation.metadata.linkedTickets.length > 0 &&(<div className="detail-tickets"><h4>Linked Tickets</h4><div className="ticket-list">{conversation.metadata.linkedTickets.map(ticket =>(<div key={ticket.id}className="ticket-item"><i className={`fas ${ticket.type === 'maintenance' ? 'fa-tools':'fa-ticket-alt'}`}></i><span>{ticket.title || ticket.id}</span></div>))}</div></div>)}<div className="detail-metadata"><div className="metadata-grid"><div className="metadata-item"><label>Priority</label><span className={`priority ${conversation.metadata.priority}`}>{conversation.metadata.priority}</span></div><div className="metadata-item"><label>Channel</label><span>{conversation.metadata.channel}</span></div><div className="metadata-item"><label>Sentiment</label><span className={`sentiment ${conversation.metadata.sentiment}`}>{conversation.metadata.sentiment}</span></div><div className="metadata-item"><label>Status</label><span className={`status ${conversation.metadata.resolved ? 'resolved':'open'}`}>{conversation.metadata.resolved ? 'Resolved':'Open'}</span></div></div></div></div></div>)};const formatTimeAgo =(timestamp)=>{const date = new Date(timestamp);const now = new Date();const diffMs = now - date;const diffMins = Math.floor(diffMs / 60000);const diffHours = Math.floor(diffMs / 3600000);const diffDays = Math.floor(diffMs / 86400000);if(diffMins < 1)return 'just now';if(diffMins < 60)return `${diffMins}m ago`;if(diffHours < 24)return `${diffHours}h ago`;if(diffDays < 7)return `${diffDays}d ago`;return date.toLocaleDateString('en-US',{month:'short',day:'numeric'})};const getTypeIcon =(type)=>{const icons ={text:'fa-comment',voice:'fa-microphone',ai:'fa-robot',broadcast:'fa-bullhorn',email:'fa-envelope'};return icons[type] || 'fa-comment'};const getParticipantIcon =(type)=>{const icons ={tenant:'fa-user',owner:'fa-building',vendor:'fa-tools',admin:'fa-user-shield',prospect:'fa-user-plus'};return icons[type] || 'fa-user'};const getParticipantColor =(type)=>{const colors ={tenant:'#3b82f6',owner:'#8b5cf6',vendor:'#f59e0b',admin:'#ef4444',prospect:'#10b981'};return colors[type] || '#6b7280'};const AnalyticsTab =({analytics})=>{if(!analytics)return <div className="loading-state">Loading analytics...</div>;return(<div className="analytics-tab"><div className="analytics-grid">{}<div className="analytics-card"><h3><i className="fas fa-chart-line"></i> Daily Volume </h3><div className="volume-chart">{Object.entries(analytics.dailyVolume ||{}).slice(-7).map(([date,count])=>(<div key={date}className="volume-bar"><div className="bar-container"><div className="bar" style={{height:`${(count / Math.max(...Object.values(analytics.dailyVolume)))* 100}%`}}></div></div><span className="bar-label">{new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric'})}</span><span className="bar-value">{count}</span></div>))}</div></div>{}<div className="analytics-card"><h3><i className="fas fa-clock"></i> Response Performance </h3><div className="performance-metrics"><div className="metric"><span className="metric-label">Average Response Time</span><span className="metric-value">{analytics.averageResponseTime}m</span></div><div className="metric"><span className="metric-label">Resolution Rate</span><span className="metric-value">{analytics.resolutionRate}%</span></div><div className="metric"><span className="metric-label">AI Assisted</span><span className="metric-value">{analytics.aiAssistedConversations}</span></div></div></div>{}<div className="analytics-card"><h3><i className="fas fa-tags"></i> Popular Topics </h3><div className="tags-cloud">{analytics.topTags?.slice(0,10).map(({tag,count})=>(<div key={tag}className="tag-item"><span className="tag-name">{tag}</span><span className="tag-count">{count}</span></div>))}</div></div>{}<div className="analytics-card"><h3><i className="fas fa-smile"></i> Sentiment Analysis </h3><div className="sentiment-breakdown">{Object.entries(analytics.sentimentAnalysis ||{}).map(([sentiment,count])=>(<div key={sentiment}className="sentiment-item"><div className="sentiment-info"><i className={`fas ${sentiment === 'positive' ? 'fa-smile':sentiment === 'negative' ? 'fa-frown':'fa-meh'}`}></i><span>{sentiment.charAt(0).toUpperCase()+ sentiment.slice(1)}</span></div><span className="sentiment-count">{count}</span></div>))}</div></div></div></div>)};const AITranscriptsTab =()=>{const [transcripts,setTranscripts] = React.useState([]);const [loading,setLoading] = React.useState(true);const [selectedTranscript,setSelectedTranscript] = React.useState(null);React.useEffect(()=>{loadTranscripts()},[]);const loadTranscripts =()=>{setLoading(true);try{const aiTranscripts = window.ConversationLogService?.aiTranscripts || [];setTranscripts(aiTranscripts)}catch(error){console.error('Error loading AI transcripts:',error)}finally{setLoading(false)}};return(<div className="ai-transcripts-tab"><div className="transcripts-container"><div className="transcripts-list"><div className="list-header"><h3><i className="fas fa-robot"></i> AI Conversation Transcripts </h3><p>All AI-assisted conversations and responses</p></div>{loading ?(<div className="loading-state"><i className="fas fa-spinner fa-spin"></i><p>Loading AI transcripts...</p></div>):transcripts.length === 0 ?(<div className="empty-state"><i className="fas fa-robot"></i><h3>No AI transcripts found</h3><p>AI conversations will appear here once they start</p></div>):(<div className="transcripts-grid">{transcripts.map(transcript =>(<TranscriptCard key={transcript.id}transcript={transcript}selected={selectedTranscript?.id === transcript.id}onClick={()=> setSelectedTranscript(transcript)}/>))}</div>)}</div>{selectedTranscript &&(<div className="transcript-detail"><TranscriptDetail transcript={selectedTranscript}onClose={()=> setSelectedTranscript(null)}/></div>)}</div></div>)};const TranscriptCard =({transcript,selected,onClick})=>{return(<div className={`transcript-card ${selected ? 'selected':''}`}onClick={onClick}><div className="transcript-header"><div className="transcript-user"><div className={`user-avatar ${transcript.userType}`}><i className={`fas ${getParticipantIcon(transcript.userType)}`}></i></div><div className="user-info"><h4>{transcript.userName}</h4><p>{transcript.userType}•{formatTimeAgo(transcript.timestamp)}</p></div></div><div className="transcript-meta"><span className={`conversation-type ${transcript.conversationType}`}>{transcript.conversationType}</span></div></div><div className="transcript-preview"><div className="prompt-preview"><strong>Prompt:</strong>{transcript.prompt.substring(0,80)}... </div><div className="response-preview"><strong>Response:</strong>{transcript.response.substring(0,80)}... </div></div><div className="transcript-footer"><div className="transcript-tags"><span className="tag ai-model">{transcript.aiModel}</span>{transcript.metadata.intent &&(<span className="tag intent">{transcript.metadata.intent}</span>)}</div>{transcript.metadata.confidence &&(<div className="confidence-score"> Confidence:{Math.round(transcript.metadata.confidence * 100)}% </div>)}</div></div>)};const TranscriptDetail =({transcript,onClose})=>{return(<div className="transcript-detail-view"><div className="detail-header"><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button><h3>AI Conversation Detail</h3></div><div className="detail-content"><div className="conversation-context"><h4>Context</h4><div className="context-grid"><div className="context-item"><label>User</label><span>{transcript.userName}({transcript.userType})</span></div><div className="context-item"><label>Timestamp</label><span>{new Date(transcript.timestamp).toLocaleString()}</span></div><div className="context-item"><label>AI Model</label><span>{transcript.aiModel}</span></div><div className="context-item"><label>Type</label><span>{transcript.conversationType}</span></div></div></div><div className="conversation-exchange"><div className="prompt-section"><h4>User Prompt</h4><div className="message-bubble user">{transcript.prompt}</div></div><div className="response-section"><h4>AI Response</h4><div className="message-bubble ai">{transcript.response}</div></div></div><div className="conversation-metadata"><h4>Metadata</h4><div className="metadata-grid">{transcript.metadata.confidence &&(<div className="metadata-item"><label>Confidence</label><span>{Math.round(transcript.metadata.confidence * 100)}%</span></div>)}{transcript.metadata.intent &&(<div className="metadata-item"><label>Intent</label><span>{transcript.metadata.intent}</span></div>)}{transcript.metadata.sentiment &&(<div className="metadata-item"><label>Sentiment</label><span className={`sentiment ${transcript.metadata.sentiment}`}>{transcript.metadata.sentiment}</span></div>)}{transcript.metadata.entities?.length > 0 &&(<div className="metadata-item"><label>Entities</label><div className="entities-list">{transcript.metadata.entities.map((entity,i)=>(<span key={i}className="entity-tag">{entity}</span>))}</div></div>)}</div></div></div></div>)};const ExportTab =({exportFormat,setExportFormat,handleExport,handleArchive,filters,setFilters})=>{const [dateRange,setDateRange] = React.useState({start:'',end:''});return(<div className="export-tab"><div className="export-grid">{}<div className="export-card"><h3><i className="fas fa-download"></i> Export Conversations </h3><p>Download conversation data in various formats</p><div className="export-options"><div className="format-selector"><label>Export Format:</label><div className="format-buttons">{['csv','json','pdf'].map(format =>(<button key={format}className={`format-btn ${exportFormat === format ? 'active':''}`}onClick={()=> setExportFormat(format)}><i className={`fas fa-file-${format === 'csv' ? 'csv':format === 'json' ? 'code':'pdf'}`}></i>{format.toUpperCase()}</button>))}</div></div><div className="date-range-selector"><label>Date Range:</label><div className="date-inputs"><input type="date" value={dateRange.start}onChange={(e)=>{setDateRange({...dateRange,start:e.target.value});setFilters({...filters,dateRange:{...dateRange,start:e.target.value}})}}className="date-input" /><span>to</span><input type="date" value={dateRange.end}onChange={(e)=>{setDateRange({...dateRange,end:e.target.value});setFilters({...filters,dateRange:{...dateRange,end:e.target.value}})}}className="date-input" /></div></div><button className="export-btn" onClick={handleExport}><i className="fas fa-download"></i> Export Data </button></div></div>{}<div className="export-card"><h3><i className="fas fa-archive"></i> Archive Old Conversations </h3><p>Move old conversations to archive storage</p><div className="archive-options"><div className="archive-info"><p>Conversations older than 1 year will be moved to archive storage. This helps keep the active conversation list manageable while preserving historical data.</p></div><button className="archive-btn" onClick={handleArchive}><i className="fas fa-archive"></i> Archive Old Conversations </button></div></div>{}<div className="export-card"><h3><i className="fas fa-chart-bar"></i> Storage Statistics </h3><div className="storage-stats"><div className="stat-item"><span className="stat-label">Active Conversations</span><span className="stat-value">{window.ConversationLogService?.logs?.length || 0}</span></div><div className="stat-item"><span className="stat-label">AI Transcripts</span><span className="stat-value">{window.ConversationLogService?.aiTranscripts?.length || 0}</span></div><div className="stat-item"><span className="stat-label">Archived Conversations</span><span className="stat-value">{JSON.parse(localStorage.getItem('archivedConversations')|| '[]').length}</span></div></div></div></div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.CommunicationsHub = CommunicationsHub;

// LeasingSystem.jsx
const LeasingSystem =()=>{const [activeSection,setActiveSection] = React.useState('dashboard');const [activeSub,setActiveSub] = React.useState('');const [searchQuery,setSearchQuery] = React.useState('');const [globalFilter,setGlobalFilter] = React.useState('all');const navigation = [{id:'dashboard',label:'Dashboard',icon:'fa-chart-pie',color:'#6366f1',description:'Overview & Critical Alerts'},{id:'active-leases',label:'Active Leases',icon:'fa-file-contract',color:'#059669',description:'1,247 Active',badge:'247',subMenu:[{id:'all-leases',label:'All Leases',count:1247},{id:'by-property',label:'By Property',count:15},{id:'by-status',label:'By Status'},{id:'expiring-soon',label:'Expiring Soon',count:23,urgent:true},{id:'month-to-month',label:'Month-to-Month',count:45}]},{id:'applications',label:'Applications',icon:'fa-user-plus',color:'#dc2626',description:'89 Pending',badge:'89',subMenu:[{id:'new-applications',label:'New Applications',count:23,urgent:true},{id:'in-screening',label:'In Screening',count:34},{id:'approved-pending',label:'Approved/Pending',count:18},{id:'waitlist',label:'Waitlist',count:12},{id:'archived-denied',label:'Archived/Denied',count:156}]},{id:'operations',label:'Lease Operations',icon:'fa-cogs',color:'#7c3aed',description:'Create & Manage',subMenu:[{id:'create-lease',label:'Create New Lease',action:true},{id:'renewals',label:'Renewals',count:67,subItems:[{id:'eligible-renewal',label:'Eligible for Renewal',count:45},{id:'offers-sent',label:'Renewal Offers Sent',count:12},{id:'renewals-progress',label:'Renewals in Progress',count:8},{id:'renewal-history',label:'Renewal History'}]},{id:'transfers',label:'Transfers',count:5},{id:'modifications',label:'Lease Modifications',count:12},{id:'terminations',label:'Early Terminations',count:3}]},{id:'documents',label:'Documents',icon:'fa-folder',color:'#ea580c',description:'Templates & Forms',subMenu:[{id:'lease-templates',label:'Lease Templates',count:12},{id:'addendums',label:'Addendums Library',count:45},{id:'notices',label:'Notices & Letters',count:78},{id:'applications-forms',label:'Application Forms',count:8},{id:'checklists',label:'Move-in/out Checklists',count:15}]},{id:'tenants',label:'Tenant Management',icon:'fa-users',color:'#0891b2',description:'1,247 Tenants',subMenu:[{id:'all-tenants',label:'All Tenants',count:1247},{id:'tenant-profiles',label:'Tenant Profiles'},{id:'emergency-contacts',label:'Emergency Contacts'},{id:'tenant-documents',label:'Tenant Documents'},{id:'communication-history',label:'Communication History'}]},{id:'compliance',label:'Compliance',icon:'fa-shield-alt',color:'#be185d',description:'Notices & Legal',subMenu:[{id:'disclosures',label:'Required Disclosures'},{id:'notice-generator',label:'Notice Generator',subItems:[{id:'rent-increase',label:'Rent Increase Notice'},{id:'non-renewal',label:'Non-renewal Notice'},{id:'lease-violation',label:'Lease Violation Notice'},{id:'entry-notice',label:'Entry Notice'},{id:'custom-notice',label:'Custom Notice'}]},{id:'sent-notices',label:'Sent Notices',count:234},{id:'compliance-calendar',label:'Compliance Calendar'}]},{id:'reports',label:'Reports',icon:'fa-chart-bar',color:'#059669',description:'Analytics & Insights',subMenu:[{id:'rent-roll',label:'Rent Roll'},{id:'expiration-report',label:'Lease Expiration Report'},{id:'vacancy-report',label:'Vacancy Report'},{id:'lease-abstract',label:'Lease Abstract'},{id:'renewal-analysis',label:'Renewal Analysis'},{id:'deposit-report',label:'Deposit Report'},{id:'custom-reports',label:'Custom Reports'}]},{id:'settings',label:'Settings',icon:'fa-cog',color:'#6b7280',description:'Configuration',subMenu:[{id:'lease-templates-settings',label:'Lease Templates'},{id:'screening-criteria',label:'Screening Criteria'},{id:'renewal-rules',label:'Renewal Rules'},{id:'fee-schedule',label:'Fee Schedule'},{id:'document-settings',label:'Document Settings'},{id:'notifications',label:'Notification Preferences'}]}];const handleNavigation =(sectionId,subId = '')=>{setActiveSection(sectionId);setActiveSub(subId)};const renderMainContent =()=>{switch(activeSection){case 'dashboard':return <LeasingDashboard />;case 'active-leases':return <ActiveLeases activeSub={activeSub}/>;case 'applications':return <ApplicationsPipeline activeSub={activeSub}/>;case 'operations':return <LeaseOperations activeSub={activeSub}/>;case 'documents':return <DocumentsLibrary activeSub={activeSub}/>;case 'tenants':return <TenantManagement activeSub={activeSub}/>;case 'compliance':return <ComplianceCenter activeSub={activeSub}/>;case 'reports':return <ReportsCenter activeSub={activeSub}/>;case 'settings':return <LeasingSettings activeSub={activeSub}/>;default:return <LeasingDashboard />}};return(<div className="leasing-system">{}<div className="leasing-header"><div className="header-left"><div className="breadcrumb-nav"><button className="back-btn" onClick={()=> window.history.back()}><i className="fas fa-arrow-left"></i> Back to Portal </button><span className="breadcrumb-separator">/</span><span className="current-page">Leasing Management</span></div><div className="system-title"><i className="fas fa-home-heart"></i><h1>Leasing Management</h1><span className="system-subtitle">Enterprise Property Leasing System</span></div></div><div className="header-center"><div className="global-search"><i className="fas fa-search"></i><input type="text" placeholder="Search leases,tenants,applications..." value={searchQuery}onChange={(e)=> setSearchQuery(e.target.value)}/><div className="search-filters"><button className="filter-btn"><i className="fas fa-filter"></i> Filters </button></div></div></div><div className="header-right"><div className="global-stats"><div className="stat-item"><span className="stat-value">1,247</span><span className="stat-label">Active Leases</span></div><div className="stat-item urgent"><span className="stat-value">23</span><span className="stat-label">Expiring Soon</span></div><div className="stat-item"><span className="stat-value">89</span><span className="stat-label">Pending Apps</span></div></div><div className="header-actions"><button className="header-btn"><i className="fas fa-plus"></i> Quick Create </button><button className="header-btn secondary"><i className="fas fa-bell"></i><span className="notification-dot">5</span></button><div className="user-profile-menu"><div className="user-avatar"><i className="fas fa-user-circle"></i></div><div className="user-info"><span className="user-name">John Manager</span><span className="user-role">Property Manager</span></div><div className="profile-dropdown"><button className="dropdown-btn"><i className="fas fa-chevron-down"></i></button><div className="dropdown-menu"><a href="#" className="dropdown-item"><i className="fas fa-user"></i> Profile Settings </a><a href="#" className="dropdown-item"><i className="fas fa-cog"></i> Preferences </a><div className="dropdown-divider"></div><a href="#" className="dropdown-item logout" onClick={()=>{if(confirm('Are you sure you want to log out?')){window.location.href = '/login'}}}><i className="fas fa-sign-out-alt"></i> Log Out </a></div></div></div></div></div></div>{}<div className="leasing-layout">{}<div className="leasing-nav"><div className="nav-content">{navigation.map((section)=>(<NavigationSection key={section.id}section={section}active={activeSection === section.id}activeSub={activeSub}onNavigate={handleNavigation}/>))}</div><div className="nav-footer"><div className="system-health"><div className="health-indicator"><div className="health-dot online"></div><span>System Healthy</span></div><div className="last-sync"> Last sync:2 min ago </div></div></div></div>{}<div className="leasing-content">{renderMainContent()}</div></div></div>)};const NavigationSection =({section,active,activeSub,onNavigate})=>{const [expanded,setExpanded] = React.useState(active);React.useEffect(()=>{if(active)setExpanded(true)},[active]);return(<div className={`nav-section ${active ? 'active':''}`}><div className="nav-item main" onClick={()=>{onNavigate(section.id);setExpanded(!expanded)}}><div className="nav-icon" style={{color:section.color}}><i className={`fas ${section.icon}`}></i></div><div className="nav-content"><div className="nav-label">{section.label}{section.badge &&(<span className="nav-badge">{section.badge}</span>)}</div><div className="nav-description">{section.description}</div></div>{section.subMenu &&(<div className="nav-chevron"><i className={`fas fa-chevron-${expanded ? 'down':'right'}`}></i></div>)}</div>{section.subMenu && expanded &&(<div className="nav-submenu">{section.subMenu.map((sub)=>(<SubMenuItem key={sub.id}item={sub}active={activeSub === sub.id}onNavigate={()=> onNavigate(section.id,sub.id)}/>))}</div>)}</div>)};const SubMenuItem =({item,active,onNavigate})=>{const [subExpanded,setSubExpanded] = React.useState(false);return(<div className="submenu-item"><div className={`nav-subitem ${active ? 'active':''}${item.urgent ? 'urgent':''}`}onClick={()=>{onNavigate();if(item.subItems)setSubExpanded(!subExpanded)}}><div className="subitem-content"><span className="subitem-label">{item.label}</span>{item.count &&(<span className={`subitem-count ${item.urgent ? 'urgent':''}`}>{item.count}</span>)}{item.action &&(<span className="action-indicator"><i className="fas fa-plus"></i></span>)}</div>{item.subItems &&(<i className={`fas fa-chevron-${subExpanded ? 'down':'right'}sub-chevron`}></i>)}</div>{item.subItems && subExpanded &&(<div className="nav-subsubmenu">{item.subItems.map((subItem)=>(<div key={subItem.id}className="nav-subsubitem"><span>{subItem.label}</span>{subItem.count && <span className="count">{subItem.count}</span>}</div>))}</div>)}</div>)};const LeasingDashboard =()=>{const [timeFilter,setTimeFilter] = React.useState('today');const [refreshing,setRefreshing] = React.useState(false);const dashboardStats ={todayActivity:{newApplications:12,scheduledTours:18,leasesSigned:5,moveIns:3,moveOuts:2,renewalsSent:8},criticalAlerts:[{id:1,type:'urgent',icon:'fa-exclamation-triangle',title:'Lease Expiring Today',count:3,action:'Review Now'},{id:2,type:'warning',icon:'fa-clock',title:'Pending Applications',count:23,action:'Process'},{id:3,type:'info',icon:'fa-calendar-check',title:'Tours Scheduled',count:18,action:'View Schedule'}],expirationPipeline:{next30Days:45,next60Days:78,next90Days:123,renewalRate:85.4},recentActivity:[{id:1,type:'application',tenant:'Sarah Johnson',property:'Sunset Apartments',unit:'205',status:'approved',time:'10 min ago'},{id:2,type:'lease',tenant:'Michael Chen',property:'Downtown Plaza',unit:'1204',status:'signed',time:'25 min ago'},{id:3,type:'tour',tenant:'Emily Davis',property:'Garden Complex',unit:'302',status:'scheduled',time:'1 hour ago'},{id:4,type:'renewal',tenant:'Robert Wilson',property:'Sunset Apartments',unit:'108',status:'sent',time:'2 hours ago'},{id:5,type:'application',tenant:'Lisa Anderson',property:'Downtown Plaza',unit:'715',status:'screening',time:'3 hours ago'}]};const handleRefresh =()=>{setRefreshing(true);setTimeout(()=> setRefreshing(false),1500)};return(<div className="leasing-dashboard">{}<div className="dashboard-header"><div className="header-info"><h1>Leasing Dashboard</h1><p>Real-time overview of your leasing operations</p></div><div className="header-controls"><div className="time-filter"><button className={timeFilter === 'today' ? 'active':''}onClick={()=> setTimeFilter('today')}> Today </button><button className={timeFilter === 'week' ? 'active':''}onClick={()=> setTimeFilter('week')}> This Week </button><button className={timeFilter === 'month' ? 'active':''}onClick={()=> setTimeFilter('month')}> This Month </button></div><button className={`refresh-btn ${refreshing ? 'refreshing':''}`}onClick={handleRefresh}><i className="fas fa-sync-alt"></i> Refresh </button></div></div>{}<div className="dashboard-grid">{}<div className="activity-cards"><h2>Today's Activity</h2><div className="cards-grid"><ActivityCard icon="fa-user-plus" title="New Applications" value={dashboardStats.todayActivity.newApplications}change="+15%" trend="up" color="#6366f1" /><ActivityCard icon="fa-calendar-check" title="Scheduled Tours" value={dashboardStats.todayActivity.scheduledTours}change="+8%" trend="up" color="#059669" /><ActivityCard icon="fa-file-signature" title="Leases Signed" value={dashboardStats.todayActivity.leasesSigned}change="+12%" trend="up" color="#7c3aed" /><ActivityCard icon="fa-key" title="Move-ins" value={dashboardStats.todayActivity.moveIns}change="+0%" trend="neutral" color="#ea580c" /><ActivityCard icon="fa-door-open" title="Move-outs" value={dashboardStats.todayActivity.moveOuts}change="-5%" trend="down" color="#dc2626" /><ActivityCard icon="fa-redo" title="Renewals Sent" value={dashboardStats.todayActivity.renewalsSent}change="+25%" trend="up" color="#0891b2" /></div></div>{}<div className="critical-alerts"><h2>Critical Alerts</h2><div className="alerts-list">{dashboardStats.criticalAlerts.map((alert)=>(<AlertCard key={alert.id}alert={alert}/>))}</div></div>{}<div className="expiration-pipeline"><h2>Lease Expiration Pipeline</h2><div className="pipeline-chart"><ExpirationCard period="Next 30 Days" count={dashboardStats.expirationPipeline.next30Days}urgent={true}/><ExpirationCard period="Next 60 Days" count={dashboardStats.expirationPipeline.next60Days}urgent={false}/><ExpirationCard period="Next 90 Days" count={dashboardStats.expirationPipeline.next90Days}urgent={false}/><div className="renewal-rate"><div className="rate-circle"><span className="rate-value">{dashboardStats.expirationPipeline.renewalRate}%</span><span className="rate-label">Renewal Rate</span></div></div></div></div>{}<div className="recent-activity"><h2>Recent Activity</h2><div className="activity-feed">{dashboardStats.recentActivity.map((activity)=>(<ActivityFeedItem key={activity.id}activity={activity}/>))}</div></div></div></div>)};const ActivityCard =({icon,title,value,change,trend,color})=>(<div className="activity-card"><div className="card-icon" style={{backgroundColor:`${color}20`,color:color}}><i className={`fas ${icon}`}></i></div><div className="card-content"><div className="card-value">{value}</div><div className="card-title">{title}</div><div className={`card-change ${trend}`}><i className={`fas fa-arrow-${trend === 'up' ? 'up':trend === 'down' ? 'down':'right'}`}></i>{change}</div></div></div>);const AlertCard =({alert})=>(<div className={`alert-card ${alert.type}`}><div className="alert-icon"><i className={`fas ${alert.icon}`}></i></div><div className="alert-content"><div className="alert-title">{alert.title}</div><div className="alert-count">{alert.count}items require attention</div></div><button className="alert-action">{alert.action}<i className="fas fa-arrow-right"></i></button></div>);const ExpirationCard =({period,count,urgent})=>(<div className={`expiration-card ${urgent ? 'urgent':''}`}><div className="expiration-count">{count}</div><div className="expiration-period">{period}</div>{urgent && <div className="urgent-indicator">Urgent</div>}</div>);const ActivityFeedItem =({activity})=>{const getActivityIcon =(type)=>{switch(type){case 'application':return 'fa-user-plus';case 'lease':return 'fa-file-contract';case 'tour':return 'fa-calendar-check';case 'renewal':return 'fa-redo';default:return 'fa-circle'}};const getStatusColor =(status)=>{switch(status){case 'approved':return '#059669';case 'signed':return '#7c3aed';case 'scheduled':return '#0891b2';case 'sent':return '#ea580c';case 'screening':return '#6366f1';default:return '#6b7280'}};return(<div className="activity-item"><div className="activity-icon" style={{backgroundColor:`${getStatusColor(activity.status)}20`}}><i className={`fas ${getActivityIcon(activity.type)}`}style={{color:getStatusColor(activity.status)}}></i></div><div className="activity-details"><div className="activity-main"><span className="tenant-name">{activity.tenant}</span><span className="activity-description">{activity.type === 'application' && 'submitted application for'}{activity.type === 'lease' && 'signed lease for'}{activity.type === 'tour' && 'scheduled tour for'}{activity.type === 'renewal' && 'renewal offer sent for'}</span></div><div className="activity-location">{activity.property}- Unit{activity.unit}</div></div><div className="activity-meta"><div className={`activity-status ${activity.status}`}>{activity.status}</div><div className="activity-time">{activity.time}</div></div></div>)};const ActiveLeases =({activeSub})=>{const [searchQuery,setSearchQuery] = React.useState('');const [selectedProperty,setSelectedProperty] = React.useState('all');const [selectedStatus,setSelectedStatus] = React.useState('all');const [sortBy,setSortBy] = React.useState('tenant');const [sortOrder,setSortOrder] = React.useState('asc');const [viewMode,setViewMode] = React.useState('table');const [selectedLeases,setSelectedLeases] = React.useState([]);const allLeases = [{id:'L001',tenant:'Sarah Johnson',property:'Sunset Apartments',unit:'205',startDate:'2023-01-15',endDate:'2024-01-14',rentAmount:2850,status:'active',leaseType:'fixed',daysToExpiry:42,renewalStatus:'pending',lastPayment:'2023-12-01',phone:'(555)123-4567',email:'sarah.j@email.com'},{id:'L002',tenant:'Michael Chen',property:'Downtown Plaza',unit:'1204',startDate:'2023-03-01',endDate:'2024-02-29',rentAmount:3200,status:'active',leaseType:'fixed',daysToExpiry:89,renewalStatus:'offered',lastPayment:'2023-12-01',phone:'(555)234-5678',email:'mchen@email.com'},{id:'L003',tenant:'Emily Davis',property:'Garden Complex',unit:'302',startDate:'2022-06-15',endDate:'2024-06-14',rentAmount:2650,status:'active',leaseType:'fixed',daysToExpiry:184,renewalStatus:'none',lastPayment:'2023-12-01',phone:'(555)345-6789',email:'emily.davis@email.com'},{id:'L004',tenant:'Robert Wilson',property:'Sunset Apartments',unit:'108',startDate:'2023-05-01',endDate:null,rentAmount:2750,status:'active',leaseType:'month-to-month',daysToExpiry:null,renewalStatus:'none',lastPayment:'2023-12-01',phone:'(555)456-7890',email:'rwilson@email.com'},{id:'L005',tenant:'Lisa Anderson',property:'Downtown Plaza',unit:'715',startDate:'2023-08-15',endDate:'2024-08-14',rentAmount:3100,status:'active',leaseType:'fixed',daysToExpiry:256,renewalStatus:'none',lastPayment:'2023-12-01',phone:'(555)567-8901',email:'l.anderson@email.com'},{id:'L006',tenant:'David Kumar',property:'Garden Complex',unit:'101',startDate:'2023-12-20',endDate:'2024-01-05',rentAmount:2550,status:'expiring',leaseType:'fixed',daysToExpiry:3,renewalStatus:'none',lastPayment:'2023-12-01',phone:'(555)678-9012',email:'dkumar@email.com'}];const properties = ['All Properties','Sunset Apartments','Downtown Plaza','Garden Complex'];const statuses = ['All Statuses','Active','Expiring Soon','Month-to-Month'];const getFilteredLeases =()=>{let filtered = [...allLeases];switch(activeSub){case 'by-property':if(selectedProperty !== 'all'){filtered = filtered.filter(lease => lease.property === selectedProperty)}break;case 'by-status':if(selectedStatus !== 'all'){if(selectedStatus === 'Active'){filtered = filtered.filter(lease => lease.status === 'active')}else if(selectedStatus === 'Expiring Soon'){filtered = filtered.filter(lease => lease.daysToExpiry && lease.daysToExpiry <= 30)}else if(selectedStatus === 'Month-to-Month'){filtered = filtered.filter(lease => lease.leaseType === 'month-to-month')}}break;case 'expiring-soon':filtered = filtered.filter(lease => lease.daysToExpiry && lease.daysToExpiry <= 30);break;case 'month-to-month':filtered = filtered.filter(lease => lease.leaseType === 'month-to-month');break;default:break}if(searchQuery){filtered = filtered.filter(lease => lease.tenant.toLowerCase().includes(searchQuery.toLowerCase())|| lease.property.toLowerCase().includes(searchQuery.toLowerCase())|| lease.unit.toLowerCase().includes(searchQuery.toLowerCase())|| lease.id.toLowerCase().includes(searchQuery.toLowerCase()))}filtered.sort((a,b)=>{let aValue = a[sortBy];let bValue = b[sortBy];if(sortBy === 'rentAmount'){aValue = parseFloat(aValue);bValue = parseFloat(bValue)}if(sortOrder === 'asc'){return aValue > bValue ? 1:-1}else{return aValue < bValue ? 1:-1}});return filtered};const filteredLeases = getFilteredLeases();const getSectionTitle =()=>{switch(activeSub){case 'by-property':return 'Leases by Property';case 'by-status':return 'Leases by Status';case 'expiring-soon':return 'Expiring Soon';case 'month-to-month':return 'Month-to-Month Leases';default:return 'All Active Leases'}};const handleSelectLease =(leaseId)=>{setSelectedLeases(prev => prev.includes(leaseId)? prev.filter(id => id !== leaseId):[...prev,leaseId])};const handleBulkAction =(action)=>{setSelectedLeases([])};return(<div className="active-leases">{}<div className="section-header"><div className="header-left"><h1>{getSectionTitle()}</h1><p>{filteredLeases.length}lease{filteredLeases.length !== 1 ? 's':''}found</p></div><div className="header-actions"><button className="action-btn primary"><i className="fas fa-plus"></i> Create Lease </button><button className="action-btn secondary"><i className="fas fa-download"></i> Export </button></div></div>{}<div className="filters-section"><div className="search-container"><div className="search-input-wrapper"><i className="fas fa-search"></i><input type="text" placeholder="Search by tenant,property,unit,or lease ID..." value={searchQuery}onChange={(e)=> setSearchQuery(e.target.value)}className="search-input" />{searchQuery &&(<button className="clear-search" onClick={()=> setSearchQuery('')}><i className="fas fa-times"></i></button>)}</div></div><div className="filter-controls">{(activeSub === 'by-property' || activeSub === 'all-leases')&&(<select value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}className="filter-select" ><option value="all">All Properties</option><option value="Sunset Apartments">Sunset Apartments</option><option value="Downtown Plaza">Downtown Plaza</option><option value="Garden Complex">Garden Complex</option></select>)}{(activeSub === 'by-status' || activeSub === 'all-leases')&&(<select value={selectedStatus}onChange={(e)=> setSelectedStatus(e.target.value)}className="filter-select" ><option value="all">All Statuses</option><option value="Active">Active</option><option value="Expiring Soon">Expiring Soon</option><option value="Month-to-Month">Month-to-Month</option></select>)}<select value={sortBy}onChange={(e)=> setSortBy(e.target.value)}className="filter-select" ><option value="tenant">Sort by Tenant</option><option value="property">Sort by Property</option><option value="unit">Sort by Unit</option><option value="rentAmount">Sort by Rent</option><option value="endDate">Sort by End Date</option></select><button className="sort-order-btn" onClick={()=> setSortOrder(sortOrder === 'asc' ? 'desc':'asc')}><i className={`fas fa-sort-amount-${sortOrder === 'asc' ? 'up':'down'}`}></i></button><div className="view-toggle"><button className={`view-btn ${viewMode === 'table' ? 'active':''}`}onClick={()=> setViewMode('table')}><i className="fas fa-table"></i></button><button className={`view-btn ${viewMode === 'grid' ? 'active':''}`}onClick={()=> setViewMode('grid')}><i className="fas fa-th"></i></button></div></div></div>{}{selectedLeases.length > 0 &&(<div className="bulk-actions"><div className="selection-info"><span>{selectedLeases.length}lease{selectedLeases.length !== 1 ? 's':''}selected</span><button onClick={()=> setSelectedLeases([])}className="clear-selection"> Clear Selection </button></div><div className="bulk-action-buttons"><button onClick={()=> handleBulkAction('renew')}className="bulk-btn"><i className="fas fa-redo"></i> Send Renewals </button><button onClick={()=> handleBulkAction('notice')}className="bulk-btn"><i className="fas fa-envelope"></i> Send Notice </button><button onClick={()=> handleBulkAction('export')}className="bulk-btn"><i className="fas fa-download"></i> Export Selected </button></div></div>)}{}<div className="leases-content">{viewMode === 'table' ?(<LeaseTable leases={filteredLeases}selectedLeases={selectedLeases}onSelectLease={handleSelectLease}onSelectAll={(selectAll)=>{setSelectedLeases(selectAll ? filteredLeases.map(l => l.id):[])}}/>):(<LeaseGrid leases={filteredLeases}selectedLeases={selectedLeases}onSelectLease={handleSelectLease}/>)}</div></div>)};const ApplicationsPipeline =({activeSub})=>(<div className="content-placeholder"><h2>Applications & Prospects</h2><p>Active section:{activeSub || 'new-applications'}</p></div>);const LeaseOperations =({activeSub})=>(<div className="content-placeholder"><h2>Lease Operations</h2><p>Active section:{activeSub || 'create-lease'}</p></div>);const DocumentsLibrary =({activeSub})=>(<div className="content-placeholder"><h2>Documents Library</h2><p>Active section:{activeSub || 'lease-templates'}</p></div>);const TenantManagement =({activeSub})=>(<div className="content-placeholder"><h2>Tenant Management</h2><p>Active section:{activeSub || 'all-tenants'}</p></div>);const ComplianceCenter =({activeSub})=>(<div className="content-placeholder"><h2>Compliance Center</h2><p>Active section:{activeSub || 'disclosures'}</p></div>);const ReportsCenter =({activeSub})=>(<div className="content-placeholder"><h2>Reports Center</h2><p>Active section:{activeSub || 'rent-roll'}</p></div>);const LeasingSettings =({activeSub})=>(<div className="content-placeholder"><h2>Leasing Settings</h2><p>Active section:{activeSub || 'lease-templates-settings'}</p></div>);const LeaseTable =({leases,selectedLeases,onSelectLease,onSelectAll})=>{const formatCurrency =(amount)=> new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount);const formatDate =(dateStr)=>{if(!dateStr)return 'N/A';return new Date(dateStr).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};const getStatusBadge =(lease)=>{if(lease.daysToExpiry && lease.daysToExpiry <= 7){return <span className="status-badge urgent">Expiring Soon</span>}else if(lease.daysToExpiry && lease.daysToExpiry <= 30){return <span className="status-badge warning">Expires Soon</span>}else if(lease.leaseType === 'month-to-month'){return <span className="status-badge info">Month-to-Month</span>}else{return <span className="status-badge success">Active</span>}};const getRenewalBadge =(status)=>{switch(status){case 'pending':return <span className="renewal-badge pending">Renewal Pending</span>;case 'offered':return <span className="renewal-badge offered">Offer Sent</span>;default:return null}};return(<div className="lease-table-container"><table className="lease-table"><thead><tr><th className="checkbox-col"><input type="checkbox" checked={selectedLeases.length === leases.length && leases.length > 0}onChange={(e)=> onSelectAll(e.target.checked)}className="table-checkbox" /></th><th>Tenant</th><th>Property & Unit</th><th>Lease Term</th><th>Rent Amount</th><th>Status</th><th>Renewal</th><th>Actions</th></tr></thead><tbody>{leases.map((lease)=>(<tr key={lease.id}className={selectedLeases.includes(lease.id)? 'selected':''}><td><input type="checkbox" checked={selectedLeases.includes(lease.id)}onChange={()=> onSelectLease(lease.id)}className="table-checkbox" /></td><td><div className="tenant-info"><div className="tenant-name">{lease.tenant}</div><div className="tenant-contact"><span>{lease.phone}</span><span>{lease.email}</span></div></div></td><td><div className="property-info"><div className="property-name">{lease.property}</div><div className="unit-number">Unit{lease.unit}</div></div></td><td><div className="lease-term"><div className="start-date">Start:{formatDate(lease.startDate)}</div><div className="end-date">{lease.endDate ? `End:${formatDate(lease.endDate)}`:'Month-to-Month'}</div>{lease.daysToExpiry &&(<div className={`days-remaining ${lease.daysToExpiry <= 30 ? 'urgent':''}`}>{lease.daysToExpiry}days remaining </div>)}</div></td><td><div className="rent-amount">{formatCurrency(lease.rentAmount)}</div><div className="last-payment">Last:{formatDate(lease.lastPayment)}</div></td><td>{getStatusBadge(lease)}</td><td>{getRenewalBadge(lease.renewalStatus)}</td><td><div className="action-buttons"><button className="action-btn-sm view" title="View Lease"><i className="fas fa-eye"></i></button><button className="action-btn-sm edit" title="Edit Lease"><i className="fas fa-edit"></i></button><button className="action-btn-sm more" title="More Actions"><i className="fas fa-ellipsis-v"></i></button></div></td></tr>))}</tbody></table>{leases.length === 0 &&(<div className="empty-state"><i className="fas fa-file-contract"></i><h3>No leases found</h3><p>Try adjusting your search or filters</p></div>)}</div>)};const LeaseGrid =({leases,selectedLeases,onSelectLease})=>{const formatCurrency =(amount)=> new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount);const formatDate =(dateStr)=>{if(!dateStr)return 'N/A';return new Date(dateStr).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};return(<div className="lease-grid">{leases.map((lease)=>(<div key={lease.id}className={`lease-card ${selectedLeases.includes(lease.id)? 'selected':''}`}><div className="card-header"><input type="checkbox" checked={selectedLeases.includes(lease.id)}onChange={()=> onSelectLease(lease.id)}className="card-checkbox" /><div className="lease-id">#{lease.id}</div></div><div className="card-content"><div className="tenant-section"><h3 className="tenant-name">{lease.tenant}</h3><div className="contact-info"><span className="phone">{lease.phone}</span><span className="email">{lease.email}</span></div></div><div className="property-section"><div className="property-name">{lease.property}</div><div className="unit-info">Unit{lease.unit}</div></div><div className="financial-section"><div className="rent-amount">{formatCurrency(lease.rentAmount)}/month</div><div className="last-payment">Last payment:{formatDate(lease.lastPayment)}</div></div><div className="lease-details"><div className="lease-term"><span>Start:{formatDate(lease.startDate)}</span><span>{lease.endDate ? `End:${formatDate(lease.endDate)}`:'Month-to-Month'}</span></div>{lease.daysToExpiry &&(<div className={`expiry-warning ${lease.daysToExpiry <= 30 ? 'urgent':''}`}><i className="fas fa-clock"></i>{lease.daysToExpiry}days remaining </div>)}</div><div className="status-section">{lease.daysToExpiry && lease.daysToExpiry <= 7 &&(<span className="status-badge urgent">Expiring Soon</span>)}{lease.daysToExpiry && lease.daysToExpiry > 7 && lease.daysToExpiry <= 30 &&(<span className="status-badge warning">Expires Soon</span>)}{lease.leaseType === 'month-to-month' &&(<span className="status-badge info">Month-to-Month</span>)}{(!lease.daysToExpiry || lease.daysToExpiry > 30)&& lease.leaseType !== 'month-to-month' &&(<span className="status-badge success">Active</span>)}{lease.renewalStatus === 'pending' &&(<span className="renewal-badge pending">Renewal Pending</span>)}{lease.renewalStatus === 'offered' &&(<span className="renewal-badge offered">Offer Sent</span>)}</div></div><div className="card-actions"><button className="card-action-btn primary"><i className="fas fa-eye"></i> View Details </button><button className="card-action-btn secondary"><i className="fas fa-edit"></i> Edit </button><button className="card-action-btn secondary"><i className="fas fa-ellipsis-h"></i> More </button></div></div>))}{leases.length === 0 &&(<div className="empty-state"><i className="fas fa-file-contract"></i><h3>No leases found</h3><p>Try adjusting your search or filters</p></div>)}</div>)};if(typeof window !== 'undefined'){window.AppModules = window.AppModules ||{};window.AppModules.LeasingSystem = LeasingSystem}

// EnhancedDevTools.jsx
const EnhancedDevTools =()=>{const [isOpen,setIsOpen] = React.useState(false);const [activeTab,setActiveTab] = React.useState('overview');const [metrics,setMetrics] = React.useState({});const [logs,setLogs] = React.useState([]);const [networkRequests,setNetworkRequests] = React.useState([]);const [storeStates,setStoreStates] = React.useState({});React.useEffect(()=>{const interval = setInterval(()=>{const newMetrics ={cache:window.cache ?{size:window.cache.cache.size,stats:window.cache.getStats(),hitRate:window.cache.getStats().hitRate}:'Not available',performance:window.PerformanceMonitor ?{score:window.PerformanceMonitor.calculatePerformanceScore(),slowest:window.PerformanceMonitor.getSlowestOperations(5),webVitals:window.PerformanceMonitor.getWebVitals()}:'Not available',memory:performance.memory ?{used:(performance.memory.usedJSHeapSize / 1048576).toFixed(2)+ ' MB',total:(performance.memory.totalJSHeapSize / 1048576).toFixed(2)+ ' MB',limit:(performance.memory.jsHeapSizeLimit / 1048576).toFixed(2)+ ' MB'}:'Not available',stores:window.stateManager ? window.stateManager.getAllStores():{},modules:Object.keys(window.AppModules ||{}),api:{baseURL:window.api?.baseURL || 'Not available',hasToken:!!localStorage.getItem('access_token')}};setMetrics(newMetrics);setStoreStates(newMetrics.stores)},1000);return()=> clearInterval(interval)},[]);React.useEffect(()=>{const originalLog = console.log;const originalError = console.error;const originalWarn = console.warn;const addLog =(type,args)=>{const timestamp = new Date().toLocaleTimeString();setLogs(prev => [...prev.slice(-49),{id:Date.now()+ Math.random(),type,timestamp,message:args.map(arg => typeof arg === 'object' ? JSON.stringify(arg,null,2):String(arg)).join(' ')}])};console.log =(...args)=>{addLog('log',args);originalLog.apply(console,args)};console.error =(...args)=>{addLog('error',args);originalError.apply(console,args)};console.warn =(...args)=>{addLog('warn',args);originalWarn.apply(console,args)};return()=>{console.log = originalLog;console.error = originalError;console.warn = originalWarn}},[]);React.useEffect(()=>{const originalFetch = window.fetch;window.fetch = async(...args)=>{const startTime = Date.now();const [url,options] = args;try{const response = await originalFetch(...args);const endTime = Date.now();setNetworkRequests(prev => [...prev.slice(-19),{id:Date.now()+ Math.random(),url:typeof url === 'string' ? url:url.url,method:options?.method || 'GET',status:response.status,duration:endTime - startTime,timestamp:new Date(startTime).toLocaleTimeString(),success:response.ok}]);return response}catch(error){const endTime = Date.now();setNetworkRequests(prev => [...prev.slice(-19),{id:Date.now()+ Math.random(),url:typeof url === 'string' ? url:url.url,method:options?.method || 'GET',status:'Failed',duration:endTime - startTime,timestamp:new Date(startTime).toLocaleTimeString(),success:false,error:error.message}]);throw error}};return()=>{window.fetch = originalFetch}},[]);const tabs = [{id:'overview',label:'📊 Overview',icon:'📊'},{id:'performance',label:'⚡ Performance',icon:'⚡'},{id:'cache',label:'💾 Cache',icon:'💾'},{id:'state',label:'🗃️ State',icon:'🗃️'},{id:'network',label:'🌐 Network',icon:'🌐'},{id:'logs',label:'📝 Logs',icon:'📝'},{id:'tools',label:'🛠️ Tools',icon:'🛠️'}];const renderOverview =()=>(<div className="dev-section"><div className="dev-grid"><div className="dev-card"><h4>🏗️ Architecture</h4><p>Modules:{metrics.modules?.length || 0}</p><p>Stores:{Object.keys(metrics.stores ||{}).length}</p><p>Cache Entries:{metrics.cache?.size || 0}</p></div><div className="dev-card"><h4>📈 Performance</h4><p>Score:{metrics.performance?.score || 'N/A'}/100</p><p>Memory:{metrics.memory?.used || 'N/A'}</p><p>Cache Hit Rate:{metrics.cache?.hitRate || 'N/A'}</p></div><div className="dev-card"><h4>🔐 Authentication</h4><p>Token:{metrics.api?.hasToken ? '✅ Present':'❌ Missing'}</p><p>API:{metrics.api?.baseURL || 'Not configured'}</p></div></div></div>);const renderPerformance =()=>(<div className="dev-section"><h4>⚡ Performance Metrics</h4>{metrics.performance !== 'Not available' ?(<><div className="dev-metric"><strong>Performance Score:{metrics.performance?.score || 0}/100</strong></div><h5>Slowest Operations:</h5><div className="dev-list">{metrics.performance?.slowest?.map((op,i)=>(<div key={i}className="dev-list-item"><span>{op.name}</span><span className="dev-metric-value">{op.maxTime?.toFixed(2)}ms</span></div>))|| []}</div><h5>Web Vitals:</h5><div className="dev-list">{Object.entries(metrics.performance?.webVitals ||{}).map(([key,value])=>(<div key={key}className="dev-list-item"><span>{key}</span><span className="dev-metric-value">{value?.avgTime?.toFixed(2)|| 'N/A'}ms</span></div>))}</div><button className="dev-button" onClick={()=> window.PerformanceMonitor?.export()}> 📤 Export Performance Report </button></>):(<p>Performance monitoring not available</p>)}</div>);const renderCache =()=>(<div className="dev-section"><h4>💾 Cache Management</h4>{metrics.cache !== 'Not available' ?(<><div className="dev-stats"><div>Size:{metrics.cache.size}entries</div><div>Hit Rate:{metrics.cache.hitRate}</div><div>Memory:{metrics.cache.stats?.memoryUsage || 'N/A'}</div></div><div className="dev-actions"><button className="dev-button" onClick={()=>{window.cache.clear()}}> 🗑️ Clear Cache </button><button className="dev-button" onClick={()=>{const stats = window.cache.getStats()}}> 📊 Log Stats </button><button className="dev-button" onClick={()=>{const data = window.cache.export()}}> 📤 Export Cache </button></div></>):(<p>Cache not available</p>)}</div>);const renderState =()=>(<div className="dev-section"><h4>🗃️ Application State</h4><div className="dev-state-viewer">{Object.entries(storeStates).map(([storeName,state])=>(<details key={storeName}className="dev-store"><summary>{storeName}Store</summary><pre className="dev-code">{JSON.stringify(state,null,2)}</pre></details>))}</div><div className="dev-actions"><button className="dev-button" onClick={()=>{const allStores = window.stateManager?.getAllStores()}}> 📝 Log All States </button></div></div>);const renderNetwork =()=>(<div className="dev-section"><h4>🌐 Network Requests</h4><div className="dev-network-list">{networkRequests.slice().reverse().map(req =>(<div key={req.id}className={`dev-network-item ${req.success ? 'success':'error'}`}><div className="dev-network-method">{req.method}</div><div className="dev-network-url">{req.url}</div><div className="dev-network-status">{req.status}</div><div className="dev-network-time">{req.duration}ms</div><div className="dev-network-timestamp">{req.timestamp}</div></div>))}</div><button className="dev-button" onClick={()=> setNetworkRequests([])}> 🗑️ Clear Network Log </button></div>);const renderLogs =()=>(<div className="dev-section"><h4>📝 Console Logs</h4><div className="dev-logs">{logs.slice().reverse().map(log =>(<div key={log.id}className={`dev-log-item ${log.type}`}><span className="dev-log-time">{log.timestamp}</span><span className="dev-log-type">{log.type.toUpperCase()}</span><pre className="dev-log-message">{log.message}</pre></div>))}</div><button className="dev-button" onClick={()=> setLogs([])}> 🗑️ Clear Logs </button></div>);const renderTools =()=>(<div className="dev-section"><h4>🛠️ Development Tools</h4><div className="dev-tool-group"><h5>State Management</h5><button onClick={()=> window.stateManager?.reset('auth')}>Reset Auth Store</button><button onClick={()=> window.stateManager?.reset('dashboard')}>Reset Dashboard Store</button></div><div className="dev-tool-group"><h5>Performance</h5><button onClick={()=> window.PerformanceMonitor?.clear()}>Clear Performance Data</button><button onClick={()=> window.PerformanceMonitor?.export()}>Export Performance Report</button></div><div className="dev-tool-group"><h5>Storage</h5><button onClick={()=> localStorage.clear()}>Clear Local Storage</button><button onClick={()=> sessionStorage.clear()}>Clear Session Storage</button></div><div className="dev-tool-group"><h5>Debugging</h5><button onClick={()=>}>Log App Modules</button><button onClick={()=>)}>Log Global State</button><button onClick={()=>)}>Log Performance Report</button></div></div>);const renderTabContent =()=>{switch(activeTab){case 'overview':return renderOverview();case 'performance':return renderPerformance();case 'cache':return renderCache();case 'state':return renderState();case 'network':return renderNetwork();case 'logs':return renderLogs();case 'tools':return renderTools();default:return renderOverview()}};if(!isOpen){return(<div className="dev-tools-toggle" onClick={()=> setIsOpen(true)}> 🛠️ Dev Tools </div>)}return(<div className="dev-tools-panel"><div className="dev-tools-header"><h3>🛠️ Development Tools</h3><button className="dev-close" onClick={()=> setIsOpen(false)}>×</button></div><div className="dev-tools-tabs">{tabs.map(tab =>(<button key={tab.id}className={`dev-tab ${activeTab === tab.id ? 'active':''}`}onClick={()=> setActiveTab(tab.id)}>{tab.icon}</button>))}</div><div className="dev-tools-content">{renderTabContent()}</div></div>)};if(window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'){document.addEventListener('DOMContentLoaded',()=>{const devRoot = document.createElement('div');devRoot.id = 'dev-tools-root';document.body.appendChild(devRoot);const style = document.createElement('style');style.textContent = ` #dev-tools-root{position:fixed;top:0;right:0;z-index:10000;font-family:'Monaco','Menlo',monospace;font-size:12px}.dev-tools-toggle{position:fixed;top:20px;right:20px;background:#333;color:white;border:none;padding:8px 12px;border-radius:4px;cursor:pointer;z-index:10001}.dev-tools-panel{position:fixed;top:0;right:0;width:400px;height:100vh;background:#1a1a1a;color:#fff;overflow-y:auto;box-shadow:-4px 0 12px rgba(0,0,0,0.3)}.dev-tools-header{padding:16px;background:#333;display:flex;justify-content:space-between;align-items:center}.dev-tools-tabs{display:flex;background:#2a2a2a;overflow-x:auto}.dev-tab{background:none;border:none;color:#ccc;padding:12px 8px;cursor:pointer;border-bottom:2px solid transparent}.dev-tab.active{color:#fff;border-bottom-color:#007acc}.dev-tools-content{padding:16px}.dev-section h4{margin:0 0 12px 0;color:#007acc}.dev-grid{display:grid;grid-template-columns:1fr;gap:12px}.dev-card{background:#2a2a2a;padding:12px;border-radius:4px}.dev-list{background:#2a2a2a;border-radius:4px;padding:8px}.dev-list-item{display:flex;justify-content:space-between;padding:4px 0;border-bottom:1px solid #444}.dev-button{background:#007acc;color:white;border:none;padding:6px 12px;border-radius:4px;cursor:pointer;margin:4px}.dev-code{background:#000;padding:8px;border-radius:4px;overflow-x:auto;font-size:11px}.dev-network-item{display:grid;grid-template-columns:50px 1fr 60px 60px 80px;gap:8px;padding:4px 8px;border-bottom:1px solid #444;font-size:11px}.dev-network-item.success{background:rgba(0,255,0,0.1)}.dev-network-item.error{background:rgba(255,0,0,0.1)}.dev-log-item{display:flex;gap:8px;padding:4px 8px;border-bottom:1px solid #444;font-size:11px}.dev-log-item.error{background:rgba(255,0,0,0.1)}.dev-log-item.warn{background:rgba(255,255,0,0.1)}.dev-tool-group{margin-bottom:16px}.dev-tool-group h5{margin:0 0 8px 0;color:#ccc}`;document.head.appendChild(style);ReactDOM.createRoot(devRoot).render(<EnhancedDevTools />)})}window.AppModules = window.AppModules ||{};window.AppModules.DevTools = EnhancedDevTools;

// PropertyManagementApp.jsx
const PropertyManagementApp =()=>{const [activeSection,setActiveSection] = React.useState('dashboard');const [loading,setLoading] = React.useState(false);const [globalData,setGlobalData] = React.useState({properties:[],units:[],tenants:[],leases:[],payments:[]});React.useEffect(()=>{loadAllData()},[]);const loadAllData = async()=>{setLoading(true);try{const [properties,units,tenants,leases,payments] = await Promise.all([ window.ApiService.get('/properties'),window.ApiService.get('/units'),window.ApiService.get('/tenants'),window.ApiService.get('/leases'),window.ApiService.get('/payments')]);setGlobalData({properties:properties || [],units:units || [],tenants:tenants || [],leases:leases || [],payments:payments || []});window.AppState.setState('properties',properties);window.AppState.setState('units',units);window.AppState.setState('tenants',tenants)}catch(error){window.Toast.error('Failed to load data')}finally{setLoading(false)}};const renderContent =()=>{switch(activeSection){case 'dashboard':return <WorkingDashboard data={globalData}/>;case 'properties':return <PropertiesWorking onUpdate={loadAllData}/>;case 'units':return <UnitsWorking onUpdate={loadAllData}/>;case 'tenants':return <TenantsWorking onUpdate={loadAllData}/>;case 'leases':return <LeasesWorking onUpdate={loadAllData}/>;case 'payments':return <PaymentsWorking onUpdate={loadAllData}/>;default:return <WorkingDashboard data={globalData}/>}};return(<div className="app-container"><Sidebar activeSection={activeSection}setActiveSection={setActiveSection}data={globalData}/><main className="main-content">{loading ?(<div className="loading-screen"><div className="spinner"></div><p>Loading your properties...</p></div>):(renderContent())}</main></div>)};window.AppModules = window.AppModules ||{};window.AppModules.PropertyManagementApp = PropertyManagementApp;

// OccupancyWidget.jsx
const OccupancyWidget =({data,size,config})=>{if(!data)return null;const MiniCharts = window.MiniCharts ||{};const{SparkLine,RingChart,BarChart,AreaChart,TrendIndicator}= MiniCharts;const isCompact = size.w === 1 && size.h === 1;const isWide = size.w === 2 && size.h === 1;const isTall = size.w === 1 && size.h === 2;const isLarge = size.w === 2 && size.h === 2;const isExtraLarge = size.w === 4;if(isCompact){return(<div className="widget-content" style={{position:'relative'}}><div className="widget-header"><h3 className="widget-title">Occupancy</h3>{TrendIndicator && <TrendIndicator value={data.change}size="small" />}</div><div style={{display:'flex',alignItems:'center',justifyContent:'space-between',marginTop:'-4px'}}><div><div className="metric-value">{data.rate}%</div><div className="metric-label" style={{fontSize:'10px',opacity:0.7}}>{data.occupied}of{data.total}</div></div>{RingChart ?(<RingChart percentage={data.rate}color="#10b981" size={44}strokeWidth={3}/>):(<div style={{fontSize:'10px',opacity:0.6}}>Loading...</div>)}</div>{AreaChart && <AreaChart data={data.trend || [75,78,82,85,88,87,92]}color="#10b981" />}</div>)}if(isWide){return(<div className="widget-content widget-gradient-occupancy"><div className="widget-header"><h3 className="widget-title">Occupancy Rate</h3><div style={{display:'flex',alignItems:'center',gap:'12px'}}><TrendIndicator value={data.change}/><span style={{fontSize:'11px',opacity:0.6}}>vs last month</span></div></div><div style={{display:'flex',alignItems:'center',gap:'24px',flex:1}}><div style={{flex:1}}><div style={{display:'flex',alignItems:'baseline',gap:'12px'}}><div className="metric-value">{data.rate}%</div><div style={{fontSize:'14px',opacity:0.7,fontWeight:'500'}}> occupied </div></div><div className="metric-label">{data.occupied}of{data.total}units</div><div style={{marginTop:'12px',display:'flex',gap:'8px'}}>{data.properties?.slice(0,3).map((prop,idx)=>(<div key={idx}style={{flex:1,padding:'4px 8px',background:'rgba(255,255,255,0.1)',borderRadius:'6px',fontSize:'11px'}}><div style={{fontWeight:'600'}}>{prop.rate}%</div><div style={{opacity:0.7,fontSize:'10px'}}>{prop.name}</div></div>))}</div></div><div style={{width:'120px',height:'60px'}}><AreaChart data={data.trend || [75,78,82,80,85,88,87,90,89,92]}color="#10b981" height={60}/></div></div></div>)}if(isTall){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Occupancy</h3></div><div style={{marginBottom:'16px'}}><div className="metric-value">{data.rate}%</div><div className="metric-label">Overall</div></div><div className="widget-list">{data.properties?.slice(0,3).map((property,idx)=>(<div key={idx}className="widget-list-item"><div className="list-item-title">{property.name}</div><div className="list-item-subtitle">{property.rate}%</div></div>))}</div></div>)}if(isLarge){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Occupancy Analytics</h3><div className="widget-actions"><button className="widget-action-btn"><Icons.Download /></button></div></div><div style={{display:'grid',gridTemplateColumns:'1fr 1fr',gap:'20px'}}><div><div className="metric-value large">{data.rate}%</div><div className="metric-label">{data.occupied}of{data.total}units occupied</div><div className={`metric-change ${data.change >= 0 ? 'positive':'negative'}`}>{data.change >= 0 ? '↑':'↓'}{Math.abs(data.change)}% from last month </div></div><div><h4 style={{fontSize:'12px',marginBottom:'12px',opacity:0.8}}> Property Breakdown </h4>{data.properties?.map((property,idx)=>(<div key={idx}style={{marginBottom:'8px'}}><div style={{display:'flex',justifyContent:'space-between',marginBottom:'4px'}}><span style={{fontSize:'13px'}}>{property.name}</span><span style={{fontSize:'13px',fontWeight:'600'}}>{property.rate}%</span></div><div className="progress-bar"><div className="progress-fill" style={{width:`${property.rate}%`}}/></div></div>))}</div></div><div style={{marginTop:'20px'}}><h4 style={{fontSize:'12px',marginBottom:'12px',opacity:0.8}}> 30-Day Trend </h4><AreaChart data={data.history}height={80}/></div></div>)}if(isExtraLarge){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Occupancy Overview</h3><div className="widget-actions"><select className="widget-action-select"><option>Last 30 days</option><option>Last 90 days</option><option>Year to date</option></select></div></div><div style={{display:'grid',gridTemplateColumns:'200px 1fr 300px',gap:'24px'}}><div><div className="metric-value large">{data.rate}%</div><div className="metric-label">Current Occupancy</div><div className={`metric-change ${data.change >= 0 ? 'positive':'negative'}`}>{data.change >= 0 ? '↑':'↓'}{Math.abs(data.change)}% MoM </div><div style={{marginTop:'20px'}}><div className="metric-label">Units Status</div><div style={{marginTop:'8px'}}><div style={{fontSize:'14px',marginBottom:'4px'}}> Occupied:{data.occupied}</div><div style={{fontSize:'14px',marginBottom:'4px'}}> Available:{data.total - data.occupied}</div><div style={{fontSize:'14px'}}> Total:{data.total}</div></div></div></div><div><AreaChart data={data.history}height={size.h === 2 ? 140:60}/></div><div><h4 style={{fontSize:'12px',marginBottom:'12px',opacity:0.8}}> Properties Performance </h4><div className="widget-list">{data.properties?.map((property,idx)=>(<div key={idx}className="widget-list-item"><div style={{display:'flex',justifyContent:'space-between'}}><div><div className="list-item-title">{property.name}</div><div className="list-item-subtitle">{Math.floor(property.rate * data.total / 100)}units </div></div><div style={{textAlign:'right'}}><div style={{fontSize:'16px',fontWeight:'600'}}>{property.rate}% </div><div style={{fontSize:'11px',opacity:0.7}}> occupancy </div></div></div></div>))}</div></div></div></div>)}return(<div className="widget-content"><div className="metric-value">{data.rate}%</div><div className="metric-label">Occupancy Rate</div></div>)};const SparklineChart =({data})=>{if(!data || data.length === 0)return null;const width = 100;const height = 40;const padding = 2;const min = Math.min(...data);const max = Math.max(...data);const range = max - min || 1;const points = data.map((value,index)=>{const x =(index /(data.length - 1))*(width - 2 * padding)+ padding;const y = height -((value - min)/ range)*(height - 2 * padding)- padding;return `${x},${y}`}).join(' ');return(<svg width={width}height={height}style={{width:'100%',height:'100%'}}><defs><linearGradient id="gradient" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" stopColor="rgba(255,255,255,0.4)" /><stop offset="100%" stopColor="rgba(255,255,255,0.1)" /></linearGradient></defs><polyline points={points}className="chart-line" strokeLinecap="round" strokeLinejoin="round" /><polygon points={`${padding},${height}${points}${width - padding},${height}`}className="chart-area" /></svg>)};const AreaChart =({data,height = 100})=>{if(!data || data.length === 0)return null;const width = 400;const padding = 20;const values = data.map(d => d.occupancy || d.value || 0);const min = Math.min(...values);const max = Math.max(...values);const range = max - min || 1;const points = values.map((value,index)=>{const x =(index /(values.length - 1))*(width - 2 * padding)+ padding;const y = height -((value - min)/ range)*(height - 2 * padding)- padding;return{x,y}});const pathData = points .map((p,i)=> `${i === 0 ? 'M':'L'}${p.x}${p.y}`).join(' ');const areaData = `${pathData}L ${width - padding}${height}L ${padding}${height}Z`;return(<svg width="100%" height={height}viewBox={`0 0 ${width}${height}`}preserveAspectRatio="none"><defs><linearGradient id="areaGradient" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" stopColor="rgba(255,255,255,0.3)" /><stop offset="100%" stopColor="rgba(255,255,255,0.05)" /></linearGradient></defs><path d={areaData}fill="url(#areaGradient)" /><path d={pathData}fill="none" stroke="rgba(255,255,255,0.8)" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" /></svg>)};

// MaintenanceWidget.jsx
const MaintenanceWidget =({data,size,config})=>{if(!data)return null;const MiniCharts = window.MiniCharts ||{};const{SparkLine,RingChart,BarChart,AreaChart,TrendIndicator}= MiniCharts;const isCompact = size.w === 1 && size.h === 1;const isWide = size.w === 2 && size.h === 1;const isTall = size.w === 1 && size.h === 2;const isLarge = size.w >= 2 && size.h >= 2;if(isCompact){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Maintenance</h3></div><div style={{display:'flex',alignItems:'center',justifyContent:'space-between'}}><div><div className="metric-value">{data.open || 0}</div><div className="metric-label" style={{fontSize:'10px'}}>Open</div></div>{data.urgent > 0 &&(<div style={{fontSize:'11px',color:'#fca5a5',fontWeight:'600'}}>{data.urgent}urgent </div>)}</div></div>)}if(isWide){return(<div className="widget-content widget-gradient-maintenance"><div className="widget-header"><h3 className="widget-title">Maintenance Requests</h3><div style={{display:'flex',gap:'8px'}}>{data.urgent > 0 &&(<span style={{fontSize:'11px',padding:'2px 8px',background:'rgba(239,68,68,0.2)',color:'#fca5a5',borderRadius:'4px',fontWeight:'600'}}>{data.urgent}urgent </span>)}</div></div><div style={{display:'flex',gap:'20px',alignItems:'center'}}><div style={{flex:1}}><div style={{display:'grid',gridTemplateColumns:'repeat(4,1fr)',gap:'12px'}}><div style={{textAlign:'center'}}><div style={{fontSize:'20px',fontWeight:'700'}}>{data.open}</div><div style={{fontSize:'10px',opacity:0.7}}>Open</div></div><div style={{textAlign:'center'}}><div style={{fontSize:'20px',fontWeight:'700',color:'#3b82f6'}}>{data.today}</div><div style={{fontSize:'10px',opacity:0.7}}>Today</div></div><div style={{textAlign:'center'}}><div style={{fontSize:'20px',fontWeight:'700',color:'#f59e0b'}}>{data.overdue}</div><div style={{fontSize:'10px',opacity:0.7}}>Overdue</div></div><div style={{textAlign:'center'}}><div style={{fontSize:'20px',fontWeight:'700',color:'#10b981'}}>{data.completed || 0}</div><div style={{fontSize:'10px',opacity:0.7}}>Done</div></div></div><div style={{marginTop:'12px',display:'flex',gap:'4px'}}>{['Plumbing','Electric','HVAC','Other'].map((cat,idx)=>{const count = data.byCategory?.[cat.toLowerCase()] || Math.floor(Math.random()* 10);return(<div key={cat}style={{flex:1,padding:'4px',background:'rgba(255,255,255,0.1)',borderRadius:'4px',fontSize:'10px',textAlign:'center'}}><div style={{fontWeight:'600'}}>{count}</div><div style={{opacity:0.7,fontSize:'9px'}}>{cat}</div></div>)})}</div></div>{SparkLine &&(<div style={{width:'100px'}}><SparkLine data={data.trend || [12,15,13,18,16,14,13]}color="#ec4899" width={100}height={40}/><div style={{fontSize:'10px',opacity:0.5,textAlign:'center',marginTop:'4px'}}>7 day trend</div></div>)}</div></div>)}if(isTall || isLarge){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Recent Maintenance</h3><span style={{fontSize:'12px',opacity:0.8}}>{data.open}open </span></div><div className="widget-list">{data.recent?.length > 0 ?(data.recent.map((request,idx)=>(<div key={idx}className="widget-list-item"><div style={{display:'flex',justifyContent:'space-between'}}><div style={{flex:1}}><div className="list-item-title">{request.title}</div><div className="list-item-subtitle">{request.status}• Priority:{request.priority}</div></div><div style={{width:'8px',height:'8px',borderRadius:'50%',background:getPriorityColor(request.priority),alignSelf:'center'}}/></div></div>))):(<div style={{textAlign:'center',opacity:0.6,padding:'20px'}}> No maintenance requests </div>)}</div></div>)}return null};const getPriorityColor =(priority)=>{const colors ={high:'#ef4444',medium:'#f59e0b',low:'#10b981'};return colors[priority] || colors.medium};

// LeasesWidget.jsx
const LeasesWidget =({data,size,config})=>{if(!data)return null;const isCompact = size.w === 1 && size.h === 1;const isWide = size.w === 2 && size.h === 1;const isTall = size.w === 1 && size.h === 2;const isLarge = size.w >= 2 && size.h >= 2;if(isCompact){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Leases</h3></div><div className="metric-value">{data.expiring || 0}</div><div className="metric-label">Expiring soon</div><div style={{marginTop:'8px',fontSize:'11px',opacity:0.7}}> Next 30 days </div></div>)}if(isWide){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Lease Timeline</h3></div><div style={{display:'flex',gap:'8px',alignItems:'center'}}>{['30d','60d','90d'].map((period,idx)=>(<div key={period}style={{flex:1,textAlign:'center',padding:'12px',background:'rgba(255,255,255,0.05)',borderRadius:'6px'}}><div style={{fontSize:'20px',fontWeight:'600'}}>{data[`expiring_${period}`] || 0}</div><div style={{fontSize:'11px',opacity:0.7}}>{period}</div></div>))}</div></div>)}return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Expiring Leases</h3><span style={{fontSize:'12px',opacity:0.8}}>{data.expiring}total </span></div><div className="widget-list">{data.upcoming?.length > 0 ?(data.upcoming.slice(0,isLarge ? 5:3).map((lease,idx)=>(<div key={idx}className="widget-list-item"><div style={{display:'flex',justifyContent:'space-between'}}><div><div className="list-item-title">{lease.tenant}</div><div className="list-item-subtitle"> Unit{lease.unit}•{lease.property}</div></div><div style={{textAlign:'right'}}><div style={{fontSize:'13px',fontWeight:'600',color:getExpiryColor(lease.days_until)}}>{lease.days_until}d </div><div style={{fontSize:'11px',opacity:0.7}}>{lease.end_date}</div></div></div></div>))):(<div style={{textAlign:'center',opacity:0.6,padding:'20px'}}> No leases expiring soon </div>)}</div></div>)};const getExpiryColor =(days)=>{if(days <= 30)return '#ef4444';if(days <= 60)return '#f59e0b';return 'inherit'};

// MiniCharts.jsx
const SparkLine =({data,color = '#60a5fa',height = 16,width = 40})=>{if(!data || data.length < 2)return null;const min = Math.min(...data);const max = Math.max(...data);const range = max - min || 1;const points = data.map((value,index)=>{const x =(index /(data.length - 1))* width;const y = height -((value - min)/ range)* height;return `${x},${y}`}).join(' ');return(<svg className="widget-spark" viewBox={`0 0 ${width}${height}`}style={{width,height}}><polyline points={points}fill="none" stroke={color}strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" /></svg>)};const RingChart =({percentage,color = '#60a5fa',size = 48,strokeWidth = 4})=>{const radius =(size - strokeWidth)/ 2;const circumference = radius * 2 * Math.PI;const strokeDashoffset = circumference -(percentage / 100)* circumference;return(<div className="widget-ring-chart" style={{width:size,height:size}}><svg width={size}height={size}>{}<circle cx={size / 2}cy={size / 2}r={radius}fill="none" stroke="rgba(255,255,255,0.1)" strokeWidth={strokeWidth}/>{}<circle cx={size / 2}cy={size / 2}r={radius}fill="none" stroke={color}strokeWidth={strokeWidth}strokeDasharray={circumference}strokeDashoffset={strokeDashoffset}strokeLinecap="round" style={{transition:'stroke-dashoffset 0.5s ease'}}/></svg><div style={{position:'absolute',inset:0,display:'flex',alignItems:'center',justifyContent:'center',fontSize:'14px',fontWeight:'600',color:'white'}}>{percentage}% </div></div>)};const BarChart =({data,color = '#60a5fa',height = 40})=>{if(!data || data.length === 0)return null;const max = Math.max(...data);const barWidth = 100 / data.length;return(<div className="widget-mini-chart"><svg viewBox="0 0 100 40" preserveAspectRatio="none">{data.map((value,index)=>{const barHeight =(value / max)* 40;return(<rect key={index}x={index * barWidth + barWidth * 0.1}y={40 - barHeight}width={barWidth * 0.8}height={barHeight}fill={color}opacity={0.6 +(index / data.length)* 0.4}rx="2" />)})}</svg></div>)};const AreaChart =({data,color = '#60a5fa',height = 40})=>{if(!data || data.length < 2)return null;const min = Math.min(...data);const max = Math.max(...data);const range = max - min || 1;const points = data.map((value,index)=>{const x =(index /(data.length - 1))* 100;const y = 40 -((value - min)/ range)* 40;return{x,y}});const pathData = points .map((p,i)=> `${i === 0 ? 'M':'L'}${p.x}${p.y}`).join(' ');const areaData = `${pathData}L 100 40 L 0 40 Z`;return(<div className="widget-mini-chart"><svg viewBox="0 0 100 40" preserveAspectRatio="none"><defs><linearGradient id={`area-gradient-${color}`}x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" stopColor={color}stopOpacity="0.3" /><stop offset="100%" stopColor={color}stopOpacity="0.05" /></linearGradient></defs><path d={areaData}fill={`url(#area-gradient-${color})`}/><path d={pathData}fill="none" stroke={color}strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" opacity="0.8" /></svg></div>)};const TrendIndicator =({value,size = 'small'})=>{const isPositive = value >= 0;const color = isPositive ? '#10b981':'#ef4444';const arrow = isPositive ? '↑':'↓';const fontSize = size === 'small' ? '11px':'13px';return(<span style={{color,fontSize,fontWeight:'600',display:'inline-flex',alignItems:'center',gap:'2px'}}>{arrow}{Math.abs(value)}% </span>)};window.MiniCharts ={SparkLine,RingChart,BarChart,AreaChart,TrendIndicator};

// QuickNotesWidget.jsx
const QuickNotesWidget =({config,size,onUpdate})=>{const [notes,setNotes] = React.useState(config.notes || '');const [isEditing,setIsEditing] = React.useState(false);const isCompact = size.w === 1 && size.h === 1;const isLarge = size.w >= 2 || size.h >= 2;const handleSave =()=>{onUpdate({notes});setIsEditing(false)};const handleKeyDown =(e)=>{if(e.key === 'Escape'){setIsEditing(false);setNotes(config.notes || '')}if((e.metaKey || e.ctrlKey)&& e.key === 's'){e.preventDefault();handleSave()}};if(isCompact && !isEditing){const lines = notes.split('\n').filter(line => line.trim());const noteCount = lines.length;const firstLine = lines[0] || 'Click to add notes';return(<div className="widget-content" onClick={()=> setIsEditing(true)}style={{cursor:'pointer',position:'relative'}}><div className="widget-header"><h3 className="widget-title">Quick Notes</h3><span style={{fontSize:'10px',opacity:0.5'}}><svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor" style={{verticalAlign:'middle'}}><path d={'M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z'}/></svg></span></div><div style={{marginTop:'-4px'}}><div style={{fontSize:'13px',lineHeight:'1.4',opacity:0.9,marginBottom:'8px',display:'-webkit-box',WebkitLineClamp:2,WebkitBoxOrient:'vertical',overflow:'hidden'}}>{firstLine}</div>{noteCount > 0 &&(<div style={{display:'flex',alignItems:'center',gap:'8px',fontSize:'10px',opacity:0.6}}><span>{noteCount}{noteCount === 1 ? 'note':'notes'}</span>{lines.length > 1 && <span>+{lines.length - 1}more</span>}</div>)}</div><div style={{position:'absolute',bottom:0,left:'-16px',right:'-16px',height:'2px',background:'linear-gradient(90deg,transparent,rgba(168,85,247,0.5),transparent)',opacity:0,transition:'opacity 0.2s ease'}}className="hover-indicator" /></div>)}if(isEditing){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Quick Notes</h3><div className="widget-actions"><button className="widget-action-btn" onClick={handleSave}style={{background:'rgba(34,197,94,0.2)'}}> ✓ </button><button className="widget-action-btn" onClick={()=>{setIsEditing(false);setNotes(config.notes || '')}}> × </button></div></div><textarea value={notes}onChange={(e)=> setNotes(e.target.value)}onKeyDown={handleKeyDown}placeholder="Type your notes here..." autoFocus style={{width:'100%',height:isLarge ? '120px':'60px',background:'rgba(255,255,255,0.05)',border:'1px solid rgba(255,255,255,0.2)',borderRadius:'6px',padding:'8px',color:'white',fontSize:'13px',resize:'none',outline:'none'}}/><div style={{marginTop:'8px',fontSize:'11px',opacity:0.5}}> Press Cmd+S to save,Esc to cancel </div></div>)}return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Quick Notes</h3><button className="widget-action-btn" onClick={()=> setIsEditing(true)}><Icons.Edit /></button></div><div onClick={()=> setIsEditing(true)}style={{cursor:'text',minHeight:'60px',whiteSpace:'pre-wrap',fontSize:'13px',lineHeight:'1.6',opacity:notes ? 1:0.5}}>{notes || 'Click to add notes...'}</div></div>)};

// FollowUpsWidget.jsx
const FollowUpsWidget =({data,size,config})=>{if(!data)return null;const isCompact = size.w === 1 && size.h === 1;const isWide = size.w === 2 && size.h === 1;const isTall = size.w === 1 && size.h === 2;const isLarge = size.w >= 2 && size.h >= 2;if(isCompact){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Follow-ups</h3></div><div className="metric-value">{data.total || 0}</div><div className="metric-label">tasks</div>{data.overdue > 0 &&(<div style={{marginTop:'8px',fontSize:'12px',color:'#fca5a5'}}>{data.overdue}overdue </div>)}</div>)}const maxTasks = isWide ? 3:(isTall ? 4:6);const tasks = data.tasks?.slice(0,maxTasks)|| [];return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Follow-up Tasks</h3>{!isCompact &&(<button className="widget-action-btn"><Icons.Plus /></button>)}</div><div className="widget-list">{tasks.length > 0 ?(tasks.map((task,idx)=>(<div key={idx}className="widget-list-item" style={{cursor:'pointer'}}><div style={{display:'flex',gap:'12px',alignItems:'start'}}><input type="checkbox" checked={task.completed}onChange={()=>{}}style={{marginTop:'2px',cursor:'pointer',accentColor:'var(--color-brand)'}}/><div style={{flex:1}}><div className={`list-item-title ${task.completed ? 'completed':''}`}style={{textDecoration:task.completed ? 'line-through':'none',opacity:task.completed ? 0.6:1}}>{task.title}</div><div className="list-item-subtitle" style={{color:getDueColor(task.due),fontSize:'11px'}}> Due:{task.due}</div></div></div></div>))):(<div style={{textAlign:'center',opacity:0.6,padding:'20px'}}><div style={{marginBottom:'8px'}}>✓</div><div style={{fontSize:'13px'}}>All caught up!</div></div>)}</div>{data.total > tasks.length &&(<div style={{marginTop:'12px',textAlign:'center',fontSize:'12px',opacity:0.7}}> +{data.total - tasks.length}more tasks </div>)}</div>)};const getDueColor =(due)=>{if(due === 'Today' || due === 'Overdue')return '#ef4444';if(due === 'Tomorrow')return '#f59e0b';return 'inherit'};

// CalendarWidget.jsx
const CalendarWidget =({data,size,config})=>{if(!data)return null;const MiniCharts = window.MiniCharts ||{};const{SparkLine,RingChart,BarChart,AreaChart,TrendIndicator}= MiniCharts;const isCompact = size.w === 1 && size.h === 1;const isWide = size.w === 2 && size.h === 1;const isTall = size.w === 1 && size.h === 2;const isLarge = size.w >= 2 && size.h >= 2;const currentTime = new Date().toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit'});if(isCompact){const date = new Date();const dayName = date.toLocaleDateString('en-US',{weekday:'short'});const dayNum = date.getDate();return(<div className="widget-content widget-gradient-calendar" style={{position:'relative'}}><div className="widget-header"><h3 className="widget-title">Calendar</h3><span style={{fontSize:'10px',opacity:0.7}}>{currentTime}</span></div><div style={{display:'flex',alignItems:'center',justifyContent:'space-between',marginTop:'-4px'}}><div><div className="metric-value">{data.today || 0}</div><div className="metric-label" style={{fontSize:'10px',opacity:0.7}}>events today</div></div><div style={{width:'44px',height:'44px',background:'rgba(255,255,255,0.1)',borderRadius:'8px',display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center',border:'1px solid rgba(255,255,255,0.2)'}}><div style={{fontSize:'9px',opacity:0.7,fontWeight:'600'}}>{dayName}</div><div style={{fontSize:'18px',fontWeight:'700',lineHeight:1}}>{dayNum}</div></div></div>{data.nextEvent &&(<div style={{marginTop:'8px',padding:'4px 8px',background:'rgba(255,255,255,0.1)',borderRadius:'4px',fontSize:'10px',whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'}}><span style={{opacity:0.7}}>Next:</span>{data.nextEvent.time}-{data.nextEvent.title}</div>)}</div>)}if(isWide){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Today's Schedule</h3><span style={{fontSize:'12px',opacity:0.8}}>{data.events?.length || 0}events</span></div><div style={{display:'flex',gap:'8px',overflowX:'auto'}}>{data.events?.length > 0 ?(data.events.slice(0,3).map((event,idx)=>(<div key={idx}style={{flex:'0 0 auto',padding:'8px 12px',background:'rgba(255,255,255,0.1)',borderRadius:'6px',minWidth:'140px'}}><div style={{fontSize:'12px',fontWeight:'600',marginBottom:'4px'}}>{event.time}</div><div style={{fontSize:'12px',opacity:0.9}}>{event.title}</div></div>))):(<div style={{opacity:0.6,fontSize:'13px'}}>No events scheduled</div>)}</div></div>)}if(isTall){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Calendar</h3></div><div className="widget-list">{data.events?.length > 0 ?(data.events.map((event,idx)=>(<div key={idx}className="widget-list-item"><div style={{display:'flex',gap:'12px'}}><div style={{width:'4px',background:getEventColor(event.type),borderRadius:'2px'}}/><div style={{flex:1}}><div className="list-item-title">{event.title}</div><div className="list-item-subtitle">{event.time}</div></div></div></div>))):(<div style={{textAlign:'center',opacity:0.6,padding:'20px'}}><div style={{marginBottom:'8px'}}>📅</div><div style={{fontSize:'13px'}}>No events today</div></div>)}</div></div>)}if(isLarge){const days = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];const today = new Date().getDay();return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Weekly Calendar</h3><div className="widget-actions"><button className="widget-action-btn"><Icons.ChevronDown /></button></div></div><div style={{display:'grid',gridTemplateColumns:'repeat(7,1fr)',gap:'8px'}}>{days.map((day,idx)=>(<div key={idx}style={{padding:'12px 8px',background:idx === today - 1 ? 'rgba(255,255,255,0.15)':'rgba(255,255,255,0.05)',borderRadius:'8px',textAlign:'center'}}><div style={{fontSize:'11px',opacity:0.7,marginBottom:'4px'}}>{day}</div><div style={{fontSize:'18px',fontWeight:'600'}}>{new Date().getDate()- today + idx + 1}</div><div style={{fontSize:'10px',marginTop:'4px',opacity:0.8}}>{idx === today - 1 ? `${data.events?.length || 0}events`:''}</div></div>))}</div><div style={{marginTop:'16px'}}><h4 style={{fontSize:'12px',marginBottom:'12px',opacity:0.8}}> Today's Events </h4><div className="widget-list">{data.events?.map((event,idx)=>(<div key={idx}className="widget-list-item"><div style={{display:'flex',justifyContent:'space-between'}}><div><div className="list-item-title">{event.title}</div><div className="list-item-subtitle">{event.type}•{event.time}</div></div><div style={{width:'8px',height:'8px',borderRadius:'50%',background:getEventColor(event.type),alignSelf:'center'}}/></div></div>))}</div></div></div>)}return null};const getEventColor =(type)=>{const colors ={meeting:'#60a5fa',inspection:'#34d399',lease:'#f59e0b',maintenance:'#f87171',other:'#a78bfa'};return colors[type] || colors.other};

// RevenueWidget.jsx
const RevenueWidget =({data,size,config})=>{if(!data)return null;const MiniCharts = window.MiniCharts ||{};const{SparkLine,RingChart,BarChart,AreaChart,TrendIndicator}= MiniCharts;const isCompact = size.w === 1 && size.h === 1;const isWide = size.w === 2 && size.h === 1;const isTall = size.w === 1 && size.h === 2;const isLarge = size.w === 2 && size.h === 2;if(isCompact){const progressPercent = Math.round((data.current / data.target)* 100);return(<div className="widget-content" style={{position:'relative'}}><div className="widget-header"><h3 className="widget-title">Revenue</h3>{TrendIndicator && <TrendIndicator value={data.change}size="small" />}</div><div style={{display:'flex',alignItems:'center',justifyContent:'space-between',marginTop:'-4px'}}><div><div className="metric-value"> ${(data.current / 1000000).toFixed(1)}M </div><div className="metric-label" style={{fontSize:'10px',opacity:0.7}}>{progressPercent}% of target </div></div>{RingChart ?(<RingChart percentage={progressPercent}color="#3b82f6" size={44}strokeWidth={3}/>):(<div style={{fontSize:'10px',opacity:0.6}}>Loading...</div>)}</div>{BarChart &&(<BarChart data={data.daily || [1.2,1.5,1.8,2.1,1.9,2.3,2.5]}color="#3b82f6" />)}</div>)}if(isWide){const progressPercent = Math.round((data.current / data.target)* 100);return(<div className="widget-content widget-gradient-revenue"><div className="widget-header"><h3 className="widget-title">Monthly Revenue</h3><div style={{display:'flex',alignItems:'center',gap:'12px'}}><span style={{fontSize:'12px',fontWeight:'600'}}> ${(data.current / 1000000).toFixed(1)}M / ${(data.target / 1000000).toFixed(1)}M </span></div></div><div style={{display:'flex',alignItems:'center',gap:'24px',flex:1}}><div style={{flex:1}}><div style={{marginBottom:'12px'}}><div style={{display:'flex',alignItems:'baseline',gap:'8px',marginBottom:'4px'}}><span style={{fontSize:'28px',fontWeight:'700'}}>{progressPercent}%</span><span style={{fontSize:'14px',opacity:0.7}}>of monthly target</span></div><div className="progress-bar" style={{height:'8px',marginBottom:'8px'}}><div className="progress-fill" style={{width:`${Math.min(progressPercent,100)}%`,background:'linear-gradient(90deg,#3b82f6,#60a5fa)'}}/></div><TrendIndicator value={data.change}/></div><div style={{display:'grid',gridTemplateColumns:'repeat(3,1fr)',gap:'8px'}}><div style={{padding:'6px',background:'rgba(255,255,255,0.1)',borderRadius:'6px',fontSize:'11px'}}><div style={{opacity:0.7}}>Today</div><div style={{fontWeight:'600'}}>${(data.today / 1000).toFixed(0)}k</div></div><div style={{padding:'6px',background:'rgba(255,255,255,0.1)',borderRadius:'6px',fontSize:'11px'}}><div style={{opacity:0.7}}>Week</div><div style={{fontWeight:'600'}}>${(data.week / 1000).toFixed(0)}k</div></div><div style={{padding:'6px',background:'rgba(255,255,255,0.1)',borderRadius:'6px',fontSize:'11px'}}><div style={{opacity:0.7}}>Month</div><div style={{fontWeight:'600'}}>${(data.current / 1000000).toFixed(1)}M</div></div></div></div></div></div>)}if(isLarge){return(<div className="widget-content"><div className="widget-header"><h3 className="widget-title">Revenue Analytics</h3><div className="widget-actions"><button className="widget-action-btn"><Icons.Chart /></button></div></div><div style={{marginBottom:'20px'}}><div className="metric-value large"> ${(data.current / 1000000).toFixed(2)}M </div><div className="metric-label">Current Month Revenue</div><div style={{display:'flex',gap:'16px',marginTop:'12px'}}><div className={`metric-change ${data.change >= 0 ? 'positive':'negative'}`}>{data.change >= 0 ? '↑':'↓'}{Math.abs(data.change)}% MoM </div><div style={{fontSize:'13px',opacity:0.8}}> YTD:${(data.ytd / 1000000).toFixed(1)}M </div></div></div><div style={{marginBottom:'20px'}}><h4 style={{fontSize:'12px',marginBottom:'12px',opacity:0.8}}> Revenue Breakdown </h4><div style={{display:'grid',gap:'8px'}}><div style={{display:'flex',justifyContent:'space-between'}}><span>Rent</span><span style={{fontWeight:'600'}}> ${(data.breakdown.rent / 1000000).toFixed(2)}M </span></div><div style={{display:'flex',justifyContent:'space-between'}}><span>Fees</span><span style={{fontWeight:'600'}}> ${(data.breakdown.fees / 1000).toFixed(0)}K </span></div><div style={{display:'flex',justifyContent:'space-between'}}><span>Other</span><span style={{fontWeight:'600'}}> ${(data.breakdown.other / 1000).toFixed(0)}K </span></div></div></div><div><div style={{display:'flex',justifyContent:'space-between',marginBottom:'8px'}}><span style={{fontSize:'12px',opacity:0.8}}>Target Progress</span><span style={{fontSize:'12px',fontWeight:'600'}}>{data.progress}%</span></div><div className="progress-bar" style={{height:'16px'}}><div className="progress-fill" style={{width:`${Math.min(data.progress,100)}%`,background:data.progress >= 100 ? 'linear-gradient(90deg,#10b981,#34d399)':'linear-gradient(90deg,#60a5fa,#3b82f6)'}}/></div></div></div>)}return(<div className="widget-content"><div className="metric-value"> ${(data.current / 1000000).toFixed(1)}M </div><div className="metric-label">Monthly Revenue</div></div>)};

// ApplicationWorkflow.jsx
const ApplicationWorkflow =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('ApplicationWorkflow')((props,helpers)=>{const{useLocalState,formatDate}= helpers;const [state,updateState] = useLocalState({applications:[],filterStatus:'all',sortBy:'dateReceived',selectedApplication:null,showAIAnalysis:false,bulkAction:null,searchQuery:''});React.useEffect(()=>{loadApplications()},[state.filterStatus,state.sortBy]);const loadApplications = async()=>{const mockApplications = [{id:'APP001',applicant:{name:'Sarah Johnson',email:'sarah.j@email.com',phone:'(555)123-4567'},property:'Sunset Apartments',unit:'3B',dateReceived:'2025-01-10T10:30:00',status:'pending_review',aiScore:92,creditScore:750,incomeVerified:true,documentsComplete:true,flags:[],stage:'screening'},{id:'APP002',applicant:{name:'Mike Chen',email:'mchen@email.com',phone:'(555)234-5678'},property:'Downtown Plaza',unit:'5A',dateReceived:'2025-01-09T14:20:00',status:'approved',aiScore:88,creditScore:720,incomeVerified:true,documentsComplete:true,flags:[],stage:'lease_pending'},{id:'APP003',applicant:{name:'Emma Davis',email:'emma.d@email.com',phone:'(555)345-6789'},property:'Garden Complex',unit:'2C',dateReceived:'2025-01-11T09:15:00',status:'pending_documents',aiScore:78,creditScore:680,incomeVerified:false,documentsComplete:false,flags:['missing_income_proof'],stage:'documentation'}];const filtered = mockApplications.filter(app => state.filterStatus === 'all' || app.status === state.filterStatus);const sorted = filtered.sort((a,b)=>{switch(state.sortBy){case 'dateReceived':return new Date(b.dateReceived)- new Date(a.dateReceived);case 'aiScore':return b.aiScore - a.aiScore;case 'applicantName':return a.applicant.name.localeCompare(b.applicant.name);default:return 0}});updateState({applications:sorted})};const workflowStages = [{id:'received',label:'Received',icon:'fa-inbox'},{id:'screening',label:'Screening',icon:'fa-search'},{id:'documentation',label:'Documents',icon:'fa-file-alt'},{id:'approval',label:'Approval',icon:'fa-check'},{id:'lease_pending',label:'Lease Pending',icon:'fa-file-contract'},{id:'completed',label:'Completed',icon:'fa-check-circle'}];const statusColors ={pending_review:'warning',pending_documents:'info',approved:'success',rejected:'danger',lease_pending:'primary',completed:'success'};return React.createElement('div',{className:'application-workflow'},[ React.createElement('div',{key:'header',className:'workflow-header'},[ React.createElement('h1',{key:'title'},'Application Management'),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('div',{key:'search',className:'search-box'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search applications...',value:state.searchQuery,onChange:(e)=> updateState({searchQuery:e.target.value})})]),React.createElement('button',{key:'ai-analysis',className:`btn btn-ai ${state.showAIAnalysis ? 'active':''}`,onClick:()=> updateState({showAIAnalysis:!state.showAIAnalysis})},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),'AI Analysis' ])])]),React.createElement('div',{key:'pipeline',className:'workflow-pipeline'},workflowStages.map(stage => React.createElement('div',{key:stage.id,className:'pipeline-stage'},[ React.createElement('div',{key:'header',className:'stage-header'},[ React.createElement('i',{key:'icon',className:`fas ${stage.icon}`}),React.createElement('h3',{key:'label'},stage.label),React.createElement('span',{key:'count',className:'stage-count'},state.applications.filter(app => app.stage === stage.id).length)]),React.createElement('div',{key:'cards',className:'stage-cards'},state.applications .filter(app => app.stage === stage.id).map(app => React.createElement(ApplicationCard,{key:app.id,application:app,onSelect:()=> updateState({selectedApplication:app}),onAction:(action)=> handleApplicationAction(app.id,action)})))]))),React.createElement('div',{key:'controls',className:'workflow-controls'},[ React.createElement('div',{key:'filters',className:'filter-section'},[ React.createElement('select',{key:'status',value:state.filterStatus,onChange:(e)=> updateState({filterStatus:e.target.value})},[ React.createElement('option',{key:'all',value:'all'},'All Applications'),React.createElement('option',{key:'pending_review',value:'pending_review'},'Pending Review'),React.createElement('option',{key:'pending_documents',value:'pending_documents'},'Missing Documents'),React.createElement('option',{key:'approved',value:'approved'},'Approved'),React.createElement('option',{key:'rejected',value:'rejected'},'Rejected')]),React.createElement('select',{key:'sort',value:state.sortBy,onChange:(e)=> updateState({sortBy:e.target.value})},[ React.createElement('option',{key:'date',value:'dateReceived'},'Date Received'),React.createElement('option',{key:'score',value:'aiScore'},'AI Score'),React.createElement('option',{key:'name',value:'applicantName'},'Applicant Name')])]),React.createElement('div',{key:'bulk',className:'bulk-actions'},[ React.createElement('button',{key:'approve',className:'btn btn-success',onClick:()=> handleBulkAction('approve')},'Bulk Approve'),React.createElement('button',{key:'request-docs',className:'btn btn-info',onClick:()=> handleBulkAction('request_documents')},'Request Documents')])]),state.showAIAnalysis && React.createElement(AIAnalysisPanel,{key:'ai-panel',applications:state.applications,onClose:()=> updateState({showAIAnalysis:false})}),state.selectedApplication && React.createElement(ApplicationDetailModal,{key:'detail',application:state.selectedApplication,onClose:()=> updateState({selectedApplication:null}),onAction:(action)=> handleApplicationAction(state.selectedApplication.id,action)})]);function handleApplicationAction(appId,action){if(action === 'approve'){window.location.hash = `#/lease/create?application=${appId}`}}function handleBulkAction(action){const selectedApps = state.applications.filter(app => app.selected)}})})();const ApplicationCard = ComponentFactory.createComponent('ApplicationCard')((props,helpers)=>{const{application,onSelect,onAction}= props;const{formatDate}= helpers;const getScoreColor =(score)=>{if(score >= 90)return 'excellent';if(score >= 80)return 'good';if(score >= 70)return 'fair';return 'poor'};return React.createElement('div',{className:'application-card',onClick:onSelect},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('div',{key:'applicant',className:'applicant-info'},[ React.createElement('h4',{key:'name'},application.applicant.name),React.createElement('p',{key:'unit'},`${application.property}- Unit ${application.unit}`)]),React.createElement('div',{key:'score',className:`ai-score ${getScoreColor(application.aiScore)}`},[ React.createElement('span',{key:'label'},'AI Score'),React.createElement('span',{key:'value'},application.aiScore)])]),React.createElement('div',{key:'details',className:'card-details'},[ React.createElement('div',{key:'credit',className:'detail-item'},[ React.createElement('i',{key:'icon',className:'fas fa-credit-card'}),React.createElement('span',{},`Credit:${application.creditScore}`)]),React.createElement('div',{key:'income',className:'detail-item'},[ React.createElement('i',{key:'icon',className:`fas fa-${application.incomeVerified ? 'check-circle':'times-circle'}`}),React.createElement('span',{},'Income Verified')]),React.createElement('div',{key:'docs',className:'detail-item'},[ React.createElement('i',{key:'icon',className:`fas fa-${application.documentsComplete ? 'check-circle':'exclamation-circle'}`}),React.createElement('span',{},'Documents')])]),application.flags.length > 0 && React.createElement('div',{key:'flags',className:'card-flags'},application.flags.map(flag => React.createElement('span',{key:flag,className:'flag-badge'},flag.replace(/_/g,' ')))),React.createElement('div',{key:'footer',className:'card-footer'},[ React.createElement('span',{key:'date',className:'received-date'},formatDate(application.dateReceived)),React.createElement('div',{key:'actions',className:'quick-actions'},[ React.createElement('button',{key:'approve',className:'action-btn approve',onClick:(e)=>{e.stopPropagation();onAction('approve')},title:'Approve'},React.createElement('i',{className:'fas fa-check'})),React.createElement('button',{key:'message',className:'action-btn message',onClick:(e)=>{e.stopPropagation();onAction('message')},title:'Message'},React.createElement('i',{className:'fas fa-comment'}))])])])});const AIAnalysisPanel = ComponentFactory.createComponent('AIAnalysisPanel')((props,helpers)=>{const{applications,onClose}= props;const insights ={averageScore:Math.round(applications.reduce((sum,app)=> sum + app.aiScore,0)/ applications.length),highQuality:applications.filter(app => app.aiScore >= 85).length,needsAttention:applications.filter(app => app.flags.length > 0).length,approvalRate:Math.round((applications.filter(app => app.status === 'approved').length / applications.length)* 100),averageProcessingTime:'2.3 days',recommendations:[{type:'opportunity',message:'3 high-scoring applicants waiting for review',action:'Review Now'},{type:'warning',message:'2 applications missing income verification',action:'Request Documents'},{type:'insight',message:'Applications from referrals have 15% higher approval rate',action:'View Report'}]};return React.createElement('div',{className:'ai-analysis-panel'},[ React.createElement('div',{key:'header',className:'panel-header'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),'AI Application Insights' ]),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'metrics',className:'ai-metrics'},[ React.createElement('div',{key:'avg-score',className:'metric'},[ React.createElement('span',{key:'value'},insights.averageScore),React.createElement('span',{key:'label'},'Avg AI Score')]),React.createElement('div',{key:'high-quality',className:'metric'},[ React.createElement('span',{key:'value'},insights.highQuality),React.createElement('span',{key:'label'},'High Quality')]),React.createElement('div',{key:'attention',className:'metric'},[ React.createElement('span',{key:'value'},insights.needsAttention),React.createElement('span',{key:'label'},'Need Attention')]),React.createElement('div',{key:'approval',className:'metric'},[ React.createElement('span',{key:'value'},`${insights.approvalRate}%`),React.createElement('span',{key:'label'},'Approval Rate')])]),React.createElement('div',{key:'recommendations',className:'ai-recommendations'},[ React.createElement('h4',{key:'title'},'AI Recommendations'),insights.recommendations.map((rec,idx)=> React.createElement('div',{key:idx,className:`recommendation ${rec.type}`},[ React.createElement('div',{key:'content'},[ React.createElement('i',{key:'icon',className:`fas fa-${rec.type === 'opportunity' ? 'lightbulb':rec.type === 'warning' ? 'exclamation-triangle':'chart-line'}`}),React.createElement('p',{key:'message'},rec.message)]),React.createElement('button',{key:'action',className:'rec-action-btn'},rec.action)]))]),React.createElement('div',{key:'insights',className:'processing-insights'},[ React.createElement('h4',{key:'title'},'Processing Insights'),React.createElement('div',{key:'chart',className:'insights-chart'},React.createElement('p',{},'Average processing time:',React.createElement('strong',{},insights.averageProcessingTime)))])])});const ApplicationDetailModal = ComponentFactory.createComponent('ApplicationDetailModal')((props,helpers)=>{const{application,onClose,onAction}= props;const{formatDate}= helpers;const [activeTab,setActiveTab] = React.useState('overview');const tabs = [{id:'overview',label:'Overview',icon:'fa-info-circle'},{id:'documents',label:'Documents',icon:'fa-file-alt'},{id:'screening',label:'Screening',icon:'fa-shield-alt'},{id:'communication',label:'Communication',icon:'fa-comment'},{id:'timeline',label:'Timeline',icon:'fa-clock'}];return React.createElement('div',{className:'modal-overlay',onClick:onClose},React.createElement('div',{className:'modal-content application-detail-modal',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('div',{key:'title-section'},[ React.createElement('h2',{key:'name'},application.applicant.name),React.createElement('p',{key:'unit'},`${application.property}- Unit ${application.unit}`)]),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'tabs',className:'modal-tabs'},tabs.map(tab => React.createElement('button',{key:tab.id,className:`tab-btn ${activeTab === tab.id ? 'active':''}`,onClick:()=> setActiveTab(tab.id)},[ React.createElement('i',{key:'icon',className:`fas ${tab.icon}`}),React.createElement('span',{key:'label'},tab.label)]))),React.createElement('div',{key:'content',className:'modal-body'},[ activeTab === 'overview' && renderOverviewTab(),activeTab === 'documents' && renderDocumentsTab(),activeTab === 'screening' && renderScreeningTab(),activeTab === 'communication' && renderCommunicationTab(),activeTab === 'timeline' && renderTimelineTab()]),React.createElement('div',{key:'actions',className:'modal-footer'},[ React.createElement('button',{key:'reject',className:'btn btn-danger',onClick:()=> onAction('reject')},'Reject Application'),React.createElement('button',{key:'request-info',className:'btn btn-secondary',onClick:()=> onAction('request_info')},'Request More Info'),React.createElement('button',{key:'approve',className:'btn btn-success',onClick:()=> onAction('approve')},'Approve & Generate Lease')])]));function renderOverviewTab(){return React.createElement('div',{className:'tab-content overview-tab'},[ React.createElement('div',{key:'score',className:'ai-score-section'},[ React.createElement('h3',{},'AI Screening Score'),React.createElement('div',{className:'score-display'},[ React.createElement('div',{className:'score-circle'},application.aiScore),React.createElement('div',{className:'score-breakdown'},[ React.createElement('div',{className:'score-item'},[ React.createElement('span',{},'Credit Score'),React.createElement('strong',{},application.creditScore)]),React.createElement('div',{className:'score-item'},[ React.createElement('span',{},'Income Verification'),React.createElement('strong',{},application.incomeVerified ? 'Verified':'Pending')]),React.createElement('div',{className:'score-item'},[ React.createElement('span',{},'Rental History'),React.createElement('strong',{},'Positive')])])])]),React.createElement('div',{key:'details',className:'applicant-details'},[ React.createElement('h3',{},'Applicant Information'),React.createElement('div',{className:'detail-grid'},[ React.createElement('div',{className:'detail-item'},[ React.createElement('label',{},'Email'),React.createElement('span',{},application.applicant.email)]),React.createElement('div',{className:'detail-item'},[ React.createElement('label',{},'Phone'),React.createElement('span',{},application.applicant.phone)]),React.createElement('div',{className:'detail-item'},[ React.createElement('label',{},'Current Address'),React.createElement('span',{},'456 Oak Street,Apt 2B')]),React.createElement('div',{className:'detail-item'},[ React.createElement('label',{},'Move-in Date'),React.createElement('span',{},'March 1,2025')])])])])}function renderDocumentsTab(){const documents = [{name:'Government ID',status:'verified',type:'id'},{name:'Proof of Income',status:'verified',type:'income'},{name:'Bank Statements',status:'pending',type:'bank'},{name:'References',status:'verified',type:'references'}];return React.createElement('div',{className:'tab-content documents-tab'},[ React.createElement('h3',{},'Submitted Documents'),React.createElement('div',{className:'documents-list'},documents.map((doc,idx)=> React.createElement('div',{key:idx,className:`document-item ${doc.status}`},[ React.createElement('i',{key:'icon',className:`fas fa-${doc.status === 'verified' ? 'check-circle':'clock'}`}),React.createElement('span',{key:'name'},doc.name),React.createElement('span',{key:'status',className:'doc-status'},doc.status),React.createElement('button',{key:'view',className:'view-doc-btn'},'View')])))])}function renderScreeningTab(){return React.createElement('div',{className:'tab-content screening-tab'},[ React.createElement('h3',{},'Background Screening Results'),React.createElement('div',{className:'screening-results'},[ React.createElement('div',{className:'screening-item pass'},[ React.createElement('i',{className:'fas fa-check-circle'}),React.createElement('div',{},[ React.createElement('h4',{},'Criminal Background Check'),React.createElement('p',{},'No records found')])]),React.createElement('div',{className:'screening-item pass'},[ React.createElement('i',{className:'fas fa-check-circle'}),React.createElement('div',{},[ React.createElement('h4',{},'Eviction History'),React.createElement('p',{},'No evictions on record')])]),React.createElement('div',{className:'screening-item warning'},[ React.createElement('i',{className:'fas fa-exclamation-triangle'}),React.createElement('div',{},[ React.createElement('h4',{},'Credit Report'),React.createElement('p',{},'One late payment in last 12 months')])])])])}function renderCommunicationTab(){return React.createElement('div',{className:'tab-content communication-tab'},[ React.createElement('h3',{},'Communication History'),React.createElement('div',{className:'messages-list'},[{type:'outgoing',message:'Thank you for your application. We need your bank statements.',date:'2025-01-11 10:30 AM'},{type:'incoming',message:'I'll upload them right away. Thank you!',date:'2025-01-11 11:15 AM'}].map((msg,idx)=> React.createElement('div',{key:idx,className:`message ${msg.type}`},[ React.createElement('p',{key:'text'},msg.message),React.createElement('span',{key:'date'},msg.date)]))),React.createElement('div',{className:'new-message'},[ React.createElement('input',{type:'text',placeholder:'Type a message...'}),React.createElement('button',{},'Send')])])}function renderTimelineTab(){const events = [{action:'Application Submitted',date:'2025-01-10 10:30 AM',status:'completed'},{action:'AI Screening Completed',date:'2025-01-10 10:35 AM',status:'completed'},{action:'Documents Requested',date:'2025-01-11 09:00 AM',status:'completed'},{action:'Awaiting Bank Statements',date:'Pending',status:'pending'}];return React.createElement('div',{className:'tab-content timeline-tab'},[ React.createElement('h3',{},'Application Timeline'),React.createElement('div',{className:'timeline'},events.map((event,idx)=> React.createElement('div',{key:idx,className:`timeline-event ${event.status}`},[ React.createElement('div',{key:'marker',className:'timeline-marker'}),React.createElement('div',{key:'content',className:'timeline-content'},[ React.createElement('h4',{},event.action),React.createElement('span',{},event.date)])])))])}});window.AppModules = window.AppModules ||{};window.AppModules.ApplicationWorkflow = ApplicationWorkflow;window.AppModules.ApplicationCard = ApplicationCard;window.AppModules.AIAnalysisPanel = AIAnalysisPanel;window.AppModules.ApplicationDetailModal = ApplicationDetailModal;

// TrialBalanceModule.jsx
const TrialBalanceModule =(()=>{const ComponentFactory ={createComponent:(name,options ={})=>(componentFunc)=>{const Component =(props)=>{const helpers ={useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:true,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);return state},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('TrialBalanceModule',{})((props,helpers)=>{const{asOfDate,basisType,dimensions}= props;const{useAsyncState,formatCurrency}= helpers;const trialBalanceData = useAsyncState(async()=>{await new Promise(resolve => setTimeout(resolve,1000));return{accounts:[{id:'1000',name:'1000 - Cash and Cash Equivalents',debit_balance:850000,credit_balance:0,account_type:'Asset'},{id:'1100',name:'1100 - Operating Cash',debit_balance:425000,credit_balance:0,account_type:'Asset'},{id:'1200',name:'1200 - Accounts Receivable',debit_balance:125000,credit_balance:0,account_type:'Asset'},{id:'1300',name:'1300 - Prepaid Expenses',debit_balance:25000,credit_balance:0,account_type:'Asset'},{id:'1500',name:'1500 - Fixed Assets',debit_balance:5500000,credit_balance:0,account_type:'Asset'},{id:'1510',name:'1510 - Accumulated Depreciation',debit_balance:0,credit_balance:450000,account_type:'Asset'},{id:'2100',name:'2100 - Accounts Payable',debit_balance:0,credit_balance:85000,account_type:'Liability'},{id:'2200',name:'2200 - Accrued Expenses',debit_balance:0,credit_balance:35000,account_type:'Liability'},{id:'2300',name:'2300 - Security Deposits',debit_balance:0,credit_balance:180000,account_type:'Liability'},{id:'2500',name:'2500 - Notes Payable',debit_balance:0,credit_balance:2800000,account_type:'Liability'},{id:'3100',name:'3100 - Owner Capital',debit_balance:0,credit_balance:2500000,account_type:'Equity'},{id:'3200',name:'3200 - Retained Earnings',debit_balance:0,credit_balance:850000,account_type:'Equity'},{id:'3300',name:'3300 - Current Year Income',debit_balance:0,credit_balance:125000,account_type:'Equity'},{id:'4100',name:'4100 - Rental Income',debit_balance:0,credit_balance:1500000,account_type:'Revenue'},{id:'4200',name:'4200 - Late Fees',debit_balance:0,credit_balance:25000,account_type:'Revenue'},{id:'4300',name:'4300 - Other Income',debit_balance:0,credit_balance:15000,account_type:'Revenue'},{id:'6100',name:'6100 - Property Management',debit_balance:180000,credit_balance:0,account_type:'Expense'},{id:'6200',name:'6200 - Maintenance & Repairs',debit_balance:125000,credit_balance:0,account_type:'Expense'},{id:'6300',name:'6300 - Utilities',debit_balance:85000,credit_balance:0,account_type:'Expense'},{id:'6400',name:'6400 - Insurance',debit_balance:65000,credit_balance:0,account_type:'Expense'},{id:'6500',name:'6500 - Property Tax',debit_balance:120000,credit_balance:0,account_type:'Expense'},{id:'6600',name:'6600 - Interest Expense',debit_balance:140000,credit_balance:0,account_type:'Expense'},{id:'6900',name:'6900 - Other Expenses',debit_balance:35000,credit_balance:0,account_type:'Expense'}],totals:{debits:7675000,credits:7675000}}},[asOfDate,basisType,dimensions]);if(trialBalanceData.loading){return React.createElement('div',{className:'financial-loading'},React.createElement('div',{className:'loading-spinner'}),'Generating trial balance...')}const data = trialBalanceData.data ||{};const accounts = data.accounts || [];const totals = data.totals ||{debits:0,credits:0};const isBalanced = Math.abs(totals.debits - totals.credits)< 0.01;const exportToPDF =()=>{};const exportToExcel =()=>{};const accountsByType = accounts.reduce((acc,account)=>{if(!acc[account.account_type]){acc[account.account_type] = []}acc[account.account_type].push(account);return acc},{});return React.createElement('div',{className:'trial-balance-module'},[ React.createElement('div',{key:'header',className:'tb-header'},[ React.createElement('h2',{key:'title'},`Trial Balance - ${asOfDate}`),React.createElement('div',{key:'balance-check',className:`balance-indicator ${isBalanced ? 'balanced':'unbalanced'}`},[ React.createElement('i',{key:'icon',className:`fas ${isBalanced ? 'fa-check-circle':'fa-exclamation-triangle'}`}),React.createElement('span',{key:'text'},isBalanced ? 'In Balance':'Out of Balance!')])]),React.createElement('div',{key:'basis',className:'tb-basis-indicator'},`Basis:${basisType === 'cash' ? 'Cash':'Accrual'}`),React.createElement('div',{key:'table',className:'tb-table-container'},React.createElement('table',{className:'trial-balance-table'},[ React.createElement('thead',{key:'thead'},React.createElement('tr',{},[ React.createElement('th',{key:'account'},'Account'),React.createElement('th',{key:'debit'},'Debit'),React.createElement('th',{key:'credit'},'Credit')])),React.createElement('tbody',{key:'tbody'},[ accountsByType['Asset'] && [ React.createElement('tr',{key:'asset-header',className:'section-header'},React.createElement('td',{colSpan:3},React.createElement('strong',{},'ASSETS'))),...accountsByType['Asset'].map(account => React.createElement('tr',{key:account.id},[ React.createElement('td',{key:'name',className:'account-name'},account.name),React.createElement('td',{key:'debit',className:'amount'},account.debit_balance > 0 ? formatCurrency(account.debit_balance):'-'),React.createElement('td',{key:'credit',className:'amount'},account.credit_balance > 0 ? formatCurrency(account.credit_balance):'-')]))],accountsByType['Liability'] && [ React.createElement('tr',{key:'liability-header',className:'section-header'},React.createElement('td',{colSpan:3},React.createElement('strong',{},'LIABILITIES'))),...accountsByType['Liability'].map(account => React.createElement('tr',{key:account.id},[ React.createElement('td',{key:'name',className:'account-name'},account.name),React.createElement('td',{key:'debit',className:'amount'},account.debit_balance > 0 ? formatCurrency(account.debit_balance):'-'),React.createElement('td',{key:'credit',className:'amount'},account.credit_balance > 0 ? formatCurrency(account.credit_balance):'-')]))],accountsByType['Equity'] && [ React.createElement('tr',{key:'equity-header',className:'section-header'},React.createElement('td',{colSpan:3},React.createElement('strong',{},'EQUITY'))),...accountsByType['Equity'].map(account => React.createElement('tr',{key:account.id},[ React.createElement('td',{key:'name',className:'account-name'},account.name),React.createElement('td',{key:'debit',className:'amount'},account.debit_balance > 0 ? formatCurrency(account.debit_balance):'-'),React.createElement('td',{key:'credit',className:'amount'},account.credit_balance > 0 ? formatCurrency(account.credit_balance):'-')]))],accountsByType['Revenue'] && [ React.createElement('tr',{key:'revenue-header',className:'section-header'},React.createElement('td',{colSpan:3},React.createElement('strong',{},'REVENUE'))),...accountsByType['Revenue'].map(account => React.createElement('tr',{key:account.id},[ React.createElement('td',{key:'name',className:'account-name'},account.name),React.createElement('td',{key:'debit',className:'amount'},account.debit_balance > 0 ? formatCurrency(account.debit_balance):'-'),React.createElement('td',{key:'credit',className:'amount'},account.credit_balance > 0 ? formatCurrency(account.credit_balance):'-')]))],accountsByType['Expense'] && [ React.createElement('tr',{key:'expense-header',className:'section-header'},React.createElement('td',{colSpan:3},React.createElement('strong',{},'EXPENSES'))),...accountsByType['Expense'].map(account => React.createElement('tr',{key:account.id},[ React.createElement('td',{key:'name',className:'account-name'},account.name),React.createElement('td',{key:'debit',className:'amount'},account.debit_balance > 0 ? formatCurrency(account.debit_balance):'-'),React.createElement('td',{key:'credit',className:'amount'},account.credit_balance > 0 ? formatCurrency(account.credit_balance):'-')]))] ]),React.createElement('tfoot',{key:'tfoot'},React.createElement('tr',{className:'totals-row'},[ React.createElement('td',{key:'label'},React.createElement('strong',{},'TOTALS')),React.createElement('td',{key:'debit-total',className:'amount'},React.createElement('strong',{},formatCurrency(totals.debits))),React.createElement('td',{key:'credit-total',className:'amount'},React.createElement('strong',{},formatCurrency(totals.credits)))]))])),!isBalanced && React.createElement('div',{key:'variance',className:'tb-variance'},[ React.createElement('span',{key:'label'},'Variance:'),React.createElement('span',{key:'amount',className:'variance-amount'},formatCurrency(Math.abs(totals.debits - totals.credits)))]),React.createElement('div',{key:'exports',className:'tb-export-options'},[ React.createElement('button',{key:'pdf',className:'btn btn-outline',onClick:exportToPDF},[ React.createElement('i',{key:'icon',className:'fas fa-file-pdf'}),'Export PDF' ]),React.createElement('button',{key:'excel',className:'btn btn-outline',onClick:exportToExcel},[ React.createElement('i',{key:'icon',className:'fas fa-file-excel'}),'Export Excel' ])])])})})();window.AppModules = window.AppModules ||{};window.AppModules.TrialBalanceModule = TrialBalanceModule;

// AdminPortalV3.jsx
const AdminPortalV3 =({user,onLogout})=>{const [activePage,setActivePage] = React.useState('dashboard');const [sidebarCollapsed,setSidebarCollapsed] = React.useState(false);const [dashboardMounted,setDashboardMounted] = React.useState(false);const [showUserMenu,setShowUserMenu] = React.useState(false);const [silenceMode,setSilenceMode] = React.useState(()=>{return localStorage.getItem('silenceMode')=== 'true'});React.useEffect(()=>{if(activePage === 'dashboard'){setDashboardMounted(true)}},[activePage]);React.useEffect(()=>{const handleClickOutside =(event)=>{if(showUserMenu && !event.target.closest('.user-menu-v2')){setShowUserMenu(false)}};document.addEventListener('click',handleClickOutside);return()=> document.removeEventListener('click',handleClickOutside)},[showUserMenu]);React.useEffect(()=>{localStorage.setItem('silenceMode',silenceMode);window.silenceMode = silenceMode;window.dispatchEvent(new CustomEvent('silenceModeChanged',{detail:silenceMode}))},[silenceMode]);React.useEffect(()=>{const handleKeyPress =(e)=>{if((e.ctrlKey || e.metaKey)&& e.shiftKey && e.key === 'S'){e.preventDefault();setSilenceMode(prev => !prev)}};document.addEventListener('keydown',handleKeyPress);return()=> document.removeEventListener('keydown',handleKeyPress)},[]);const menuItems = [{id:'dashboard',label:'Dashboard',icon:'fa-home'},{id:'leads',label:'Lead Management',icon:'fa-user-plus'},{id:'ai-insights',label:'AI Insights',icon:'fa-robot'},{id:'properties',label:'Properties',icon:'fa-building'},{id:'units',label:'Units',icon:'fa-door-open'},{id:'tenants',label:'Tenants',icon:'fa-users'},{id:'leases',label:'Leases',icon:'fa-file-contract'},{id:'owner-portal',label:'Owner Portal',icon:'fa-crown'},{id:'messaging',label:'Messages',icon:'fa-comments'},{id:'calendar',label:'Calendar',icon:'fa-calendar-alt'},{id:'maintenance',label:'Maintenance',icon:'fa-wrench'},{id:'accounting',label:'Accounting',icon:'fa-calculator'},{id:'reports',label:'Reports',icon:'fa-chart-bar'},];const renderContent =()=>{switch(activePage){case 'dashboard':return <SimpleDashboard user={user}/>;case 'leads':return React.createElement((window.AppModules && window.AppModules.LeadManagementSystem)||(()=> React.createElement('div',{},'Lead Management System loading...')));case 'ai-insights':return React.createElement((window.AppModules && window.AppModules.AIDashboard)||(()=> React.createElement('div',{},'AI Dashboard loading...')));case 'properties':return React.createElement((window.AppModules && window.AppModules.PropertiesFixed)||(()=> React.createElement('div',{},'PropertiesFixed component not loaded')));case 'units':return React.createElement((window.AppModules && window.AppModules.UnitsWorldClass)||(()=> React.createElement('div',{},'Units component not loaded')));case 'tenants':return React.createElement((window.AppModules && window.AppModules.Tenants)||(()=> React.createElement('div',{},'Tenants component not loaded')));case 'leases':return React.createElement((window.AppModules && window.AppModules.Leases)||(()=> React.createElement('div',{},'Leases component not loaded')));case 'owner-portal':return React.createElement((window.AppModules && window.AppModules.OwnerPortal)||(()=> React.createElement('div',{},'Owner Portal loading...')));case 'messaging':return React.createElement((window.AppModules && window.AppModules.ProfessionalMail)||(()=> React.createElement('div',{},'Mail component not loaded')));case 'calendar':return React.createElement((window.AppModules && window.AppModules.SimpleCalendar)||(()=> React.createElement('div',{},'Calendar component not loaded')));case 'maintenance':return React.createElement((window.AppModules && window.AppModules.MaintenanceEcosystemPro)||(()=> React.createElement('div',{},'Maintenance component not loaded')));case 'accounting':return React.createElement((window.AppModules && window.AppModules.FinancialAccountingEngine)||(()=> React.createElement('div',{},'Accounting component not loaded')));case 'reports':return React.createElement((window.AppModules && window.AppModules.ReportsCenter)||(()=> React.createElement('div',{},'Reports component not loaded')));default:return(<div className="page-content-v2"><div className="content-placeholder"><h2>{activePage.charAt(0).toUpperCase()+ activePage.slice(1)}</h2><p>This page is under construction. Features will be added soon.</p></div></div>)}};return(<div className="admin-v2">{}{React.createElement((window.AppModules && window.AppModules.AIAssistant)||(()=> null))}{}{React.createElement((window.AppModules && window.AppModules.SilenceModeIndicator)||(()=> null))}{}<aside className={`sidebar-v2 ${sidebarCollapsed ? 'collapsed':''}`}><div className="sidebar-header-v2"><div className="logo-container"><div className="logo-icon"><svg width="32" height="32" viewBox="0 0 48 48" fill="none"><rect width="48" height="48" rx="10" fill="var(--color-blue-600)" /><path d="M24 12L12 20V36H20V28H28V36H36V20L24 12Z" fill="white" /></svg></div>{!sidebarCollapsed && <span className="logo-text">PropertyPro</span>}</div></div><nav className="sidebar-nav-v2"><SidebarV2 menuItems={menuItems}activePage={activePage}onPageChange={(newPage)=>{setActivePage(newPage);window.scrollTo({top:0,behavior:'smooth'})}}collapsed={sidebarCollapsed}/></nav><div className="sidebar-footer-v2"><button className="collapse-button" onClick={()=> setSidebarCollapsed(!sidebarCollapsed)}><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d={sidebarCollapsed ? "M10 4L6 8L10 12":"M6 4L10 8L6 12"}stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg></button></div></aside>{}<div className="main-v2">{activePage === 'dashboard' ?(renderContent()):(<>{}<header className="topbar-v2"><div className="topbar-left"><SearchBar placeholder="Search properties,tenants,payments..." /></div>{}{React.createElement((window.AppModules && window.AppModules.PropertySwitcher)||(()=> null),{currentProperty:window.currentProperty || 'all',onPropertyChange:(propertyId)=>{window.currentProperty = propertyId;window.dispatchEvent(new CustomEvent('propertyChanged',{detail:propertyId}))}})}<div className="topbar-right"><button className="topbar-button">{window.AppModules && window.AppModules.Icons ? React.createElement(window.AppModules.Icons.Plus):React.createElement('i',{className:'fas fa-plus'})}<span>New</span></button><button className="icon-button-v2">{window.AppModules && window.AppModules.Icons ? React.createElement(window.AppModules.Icons.Bell):React.createElement('i',{className:'fas fa-bell'})}<span className="notification-badge">3</span></button><div className="user-menu-v2" onClick={()=> setShowUserMenu(!showUserMenu)}><img src={`https:alt="User avatar" className="user-avatar" /><div className="user-info"><div className="user-name">{user.first_name}{user.last_name}</div><div className="user-role">Super Admin</div></div>{window.AppModules && window.AppModules.Icons ? React.createElement(window.AppModules.Icons.ChevronDown):React.createElement('i',{className:'fas fa-chevron-down'})}{showUserMenu &&(<div className="user-dropdown"><div className="dropdown-item" onClick={(e)=>{e.stopPropagation()}}><i className="fas fa-user"></i><span>Profile</span></div><div className="dropdown-item" onClick={(e)=>{e.stopPropagation()}}><i className="fas fa-cog"></i><span>Settings</span></div><div className="dropdown-item" onClick={(e)=>{e.stopPropagation();setSilenceMode(!silenceMode)}}><i className={`fas fa-volume-${silenceMode ? 'mute':'up'}`}></i><span>{silenceMode ? 'Enable Voice Mode':'Enable Silence Mode'}</span><div style={{marginLeft:'auto',width:'40px',height:'20px',backgroundColor:silenceMode ? '#ef4444':'#10b981',borderRadius:'10px',position:'relative',transition:'background-color 0.3s',cursor:'pointer'}}><div style={{position:'absolute',top:'2px',left:silenceMode ? '2px':'20px',width:'16px',height:'16px',backgroundColor:'white',borderRadius:'50%',transition:'left 0.3s',boxShadow:'0 2px 4px rgba(0,0,0,0.2)'}}></div></div></div><div className="dropdown-divider"></div><div className="dropdown-item logout" onClick={(e)=>{e.stopPropagation();if(confirm('Are you sure you want to logout?')){onLogout()}}}><i className="fas fa-sign-out-alt"></i><span>Logout</span></div></div>)}</div></div></header>{}<main className="content-v2"><div className="page-header-v2"><h1 className="page-title-v2">{activePage}</h1><div className="page-actions"><button className="secondary-button">{window.AppModules && window.AppModules.Icons ? React.createElement(window.AppModules.Icons.Filter):React.createElement('i',{className:'fas fa-filter'})}Filter </button><button className="secondary-button">{window.AppModules && window.AppModules.Icons ? React.createElement(window.AppModules.Icons.Download):React.createElement('i',{className:'fas fa-download'})}Export </button></div></div>{renderContent()}</main></>)}</div></div>)};

// AdminPortalV2.jsx
const AdminPortalV2 =({user,onLogout})=>{const [activePage,setActivePage] = React.useState('dashboard');const [sidebarCollapsed,setSidebarCollapsed] = React.useState(false);const [notifications,setNotifications] = React.useState(3);const menuItems = [{id:'dashboard',label:'Dashboard',icon:Icons.Dashboard},{id:'management',label:'Management',icon:Icons.Building,children:[{id:'properties',label:'Properties'},{id:'leads',label:'Leads'},{id:'applications',label:'Applications'},{id:'leases',label:'Leases'},{id:'users',label:'Users'}]},{id:'marketing',label:'Marketing',icon:Icons.Megaphone,children:[{id:'campaigns',label:'Marketing'},{id:'listings',label:'Listings'}]},{id:'operations',label:'Operations',icon:Icons.Settings,children:[{id:'messages',label:'Messages'},{id:'maintenance',label:'Maintenance'},{id:'payments',label:'Payments'},{id:'documents',label:'Documents'}]},{id:'community',label:'Community',icon:Icons.People,children:[{id:'announcements',label:'Announcements'},{id:'contracts',label:'Contracts'},{id:'vendors',label:'Vendors'}]},{id:'financial',label:'Financial',icon:Icons.Dollar,children:[{id:'accounting',label:'Accounting'},{id:'general-ledger',label:'General Ledger'},{id:'chart-of-accounts',label:'Chart of Accounts'},{id:'tenant-billing',label:'Tenant Billing'},{id:'bank-reconciliation',label:'Bank Reconciliation'},{id:'financial-reports',label:'Financial Reports'}]},{id:'security',label:'Security & Compliance',icon:Icons.Shield,children:[{id:'permissions',label:'Permissions'},{id:'audit-logs',label:'Audit Logs'}]}];const renderDashboard =()=>(<><div className="dashboard-metrics"><div className="metric-card"><div className="metric-header"><span className="metric-title">Total Properties</span><span className="metric-trend positive">+12.5%</span></div><div className="metric-value">156</div><div className="metric-subtitle">Active properties</div></div><div className="metric-card"><div className="metric-header"><span className="metric-title">Occupancy Rate</span><span className="metric-trend positive">+3.2%</span></div><div className="metric-value">89%</div><div className="metric-subtitle">1,108 of 1,245 units</div></div><div className="metric-card"><div className="metric-header"><span className="metric-title">Monthly Revenue</span><span className="metric-trend positive">+8.1%</span></div><div className="metric-value">$2.4M</div><div className="metric-subtitle">Collected this month</div></div><div className="metric-card"><div className="metric-header"><span className="metric-title">Active Leases</span><span className="metric-trend negative">-2.3%</span></div><div className="metric-value">1,248</div><div className="metric-subtitle">12 expiring soon</div></div></div><div className="dashboard-grid-2"><div className="dashboard-card"><div className="card-header"><h3>Recent Activity</h3><button className="text-button">View all</button></div><div className="activity-list"><div className="activity-item"><div className="activity-icon new"><Icons.Plus /></div><div className="activity-content"><div className="activity-title">New lease signed</div><div className="activity-subtitle">Unit 4B at Sunset Apartments</div></div><div className="activity-time">2 min ago</div></div><div className="activity-item"><div className="activity-icon payment"><Icons.Dollar /></div><div className="activity-content"><div className="activity-title">Payment received</div><div className="activity-subtitle">$1,850 from John Doe</div></div><div className="activity-time">1 hour ago</div></div><div className="activity-item"><div className="activity-icon maintenance"><Icons.Wrench /></div><div className="activity-content"><div className="activity-title">Maintenance completed</div><div className="activity-subtitle">HVAC repair at Building C</div></div><div className="activity-time">3 hours ago</div></div></div></div><div className="dashboard-card"><div className="card-header"><h3>Quick Stats</h3><button className="text-button">Customize</button></div><div className="stats-grid"><div className="stat-item"><div className="stat-label">Applications</div><div className="stat-value">23</div><div className="stat-subtext">Pending review</div></div><div className="stat-item"><div className="stat-label">Maintenance</div><div className="stat-value">18</div><div className="stat-subtext">Open requests</div></div><div className="stat-item"><div className="stat-label">Messages</div><div className="stat-value">47</div><div className="stat-subtext">Unread</div></div><div className="stat-item"><div className="stat-label">Overdue</div><div className="stat-value">$24.8K</div><div className="stat-subtext">12 tenants</div></div></div></div></div></>);return(<div className="admin-v2">{}<aside className={`sidebar-v2 ${sidebarCollapsed ? 'collapsed':''}`}><div className="sidebar-header-v2"><div className="logo-container"><div className="logo-icon"><svg width="32" height="32" viewBox="0 0 48 48" fill="none"><rect width="48" height="48" rx="10" fill="var(--color-blue-600)" /><path d="M24 12L12 20V36H20V28H28V36H36V20L24 12Z" fill="white" /></svg></div>{!sidebarCollapsed && <span className="logo-text">PropertyPro</span>}</div></div><nav className="sidebar-nav-v2"><SidebarV2 menuItems={menuItems}activePage={activePage}onPageChange={setActivePage}collapsed={sidebarCollapsed}/></nav><div className="sidebar-footer-v2"><button className="collapse-button" onClick={()=> setSidebarCollapsed(!sidebarCollapsed)}><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><path d={sidebarCollapsed ? "M10 4L6 8L10 12":"M6 4L10 8L6 12"}stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg></button></div></aside>{}<div className="main-v2">{}<header className="topbar-v2"><div className="topbar-left"><SearchBar placeholder="Search properties,tenants,payments..." /></div><div className="topbar-right"><button className="topbar-button"><Icons.Plus /><span>New</span></button><button className="icon-button-v2"><Icons.Bell />{notifications > 0 && <span className="notification-badge">{notifications}</span>}</button><div className="user-menu-v2"><img src={`https:alt="User avatar" className="user-avatar" /><div className="user-info"><div className="user-name">{user.first_name}{user.last_name}</div><div className="user-role">Super Admin</div></div><Icons.ChevronDown /></div></div></header>{}<main className="content-v2"><div className="page-header-v2"><h1 className="page-title-v2">{activePage === 'dashboard' ? 'Dashboard':'Page Content'}</h1><div className="page-actions"><button className="secondary-button"><Icons.Filter /> Filter </button><button className="secondary-button"><Icons.Download /> Export </button></div></div><div className="page-content-v2">{activePage === 'dashboard' ? renderDashboard():(<div className="content-placeholder"><p>{activePage}content will be displayed here</p></div>)}</div></main></div></div>)};

// Leases.jsx
const Leases =()=>{const [leases,setLeases] = React.useState([]);const [showCreateLease,setShowCreateLease] = React.useState(false);const [filters,setFilters] = React.useState({status:'all',property:'all',search:''});React.useEffect(()=>{setLeases(mockLeases);loadLeases()},[filters]);const loadLeases = async()=>{try{const controller = new AbortController();const timeoutId = setTimeout(()=> controller.abort(),2000);const params = new URLSearchParams();Object.entries(filters).forEach(([key,value])=>{if(value && value !== 'all')params.append(key,value)});const response = await fetch(`http:headers:{'Authorization':`Bearer ${localStorage.getItem('access_token')}`},signal:controller.signal});clearTimeout(timeoutId);if(response.ok){const data = await response.json();setLeases(data)}else{throw new Error('API response not ok')}}catch(error){console.error('Failed to load leases:',error);setLeases(mockLeases)}};const daysBetween =(date1,date2)=>{const diffTime = Math.abs(date2 - date1);const diffDays = Math.ceil(diffTime /(1000 * 60 * 60 * 24));return diffDays};const formatDate =(dateString)=>{if(!dateString)return 'N/A';const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};const formatNumber =(num)=>{return new Intl.NumberFormat('en-US').format(num)};const showToast =(type,message)=>{};const viewLease =(lease)=>{};const renewLease =(lease)=>{};const stats = React.useMemo(()=>{const active = leases.filter(l => l.status === 'active').length;const expiringSoon = leases.filter(l =>{const daysLeft = daysBetween(new Date(),new Date(l.end_date));return daysLeft > 0 && daysLeft <= 60}).length;const totalMonthlyRent = leases .filter(l => l.status === 'active').reduce((sum,l)=> sum + l.rent_amount,0);return{active,expiringSoon,totalMonthlyRent}},[leases]);return(<div className="leases-page">{}<div className="alerts-bar"><AlertCard type="warning" icon="fa-clock" title={`${stats.expiringSoon}Leases Expiring Soon`}subtitle="Action needed within 60 days" action="Review" onClick={()=> setFilters({...filters,status:'expiring'})}/><AlertCard type="info" icon="fa-file-signature" title="5 Renewals Available" subtitle="Send renewal offers" action="Send Offers" /><AlertCard type="success" icon="fa-dollar-sign" title={`$${formatNumber(stats.totalMonthlyRent)}Monthly`}subtitle="Total rent from active leases" /></div>{}<div className="page-header"><div><h1>Lease Management</h1><p className="subtitle">{stats.active}active leases</p></div><button className="btn btn-primary" onClick={()=> setShowCreateLease(true)}><i className="fas fa-plus"></i> Create Lease </button></div>{}<div className="filters-bar"><div className="search-box"><i className="fas fa-search"></i><input type="text" placeholder="Search by tenant,unit,property..." value={filters.search}onChange={(e)=> setFilters({...filters,search:e.target.value})}/></div><div className="filter-buttons"><button className={`filter-btn ${filters.status === 'all' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'all'})}> All Leases </button><button className={`filter-btn ${filters.status === 'active' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'active'})}> Active </button><button className={`filter-btn ${filters.status === 'expiring' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'expiring'})}> Expiring Soon </button><button className={`filter-btn ${filters.status === 'expired' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'expired'})}> Expired </button></div></div>{}<div className="leases-table-container"><table className="leases-table"><thead><tr><th>Tenant</th><th>Property / Unit</th><th>Term</th><th>Rent</th><th>Status</th><th>Actions</th></tr></thead><tbody>{leases.map(lease =>(<LeaseRow key={lease.id}lease={lease}onView={()=> viewLease(lease)}onRenew={()=> renewLease(lease)}/>))}</tbody></table></div>{}{showCreateLease &&(<CreateLeaseModal onClose={()=> setShowCreateLease(false)}onSave={()=>{setShowCreateLease(false);loadLeases()}}/>)}</div>)};const AlertCard =({type,icon,title,subtitle,action,onClick})=>{return(<div className={`insight-card ${type}`}><div className={`insight-icon ${type}`}><i className={`fas ${icon}`}></i></div><div className="insight-content"><h4>{title}</h4><p>{subtitle}</p></div>{action &&(<button className="insight-action" onClick={onClick}>{action}</button>)}</div>)};const LeaseRow =({lease,onView,onRenew})=>{const daysBetween =(date1,date2)=>{const diffTime = Math.abs(date2 - date1);const diffDays = Math.ceil(diffTime /(1000 * 60 * 60 * 24));return diffDays};const formatDate =(dateString)=>{if(!dateString)return 'N/A';const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};const daysRemaining = daysBetween(new Date(),new Date(lease.end_date));const isExpiringSoon = daysRemaining > 0 && daysRemaining <= 60;return(<tr className={isExpiringSoon ? 'expiring-soon':''}><td><div className="tenant-cell"><div className="tenant-avatar">{lease.tenant_name.split(' ').map(n => n[0]).join('')}</div><div><div className="tenant-name">{lease.tenant_name}</div><div className="tenant-email">{lease.tenant_email}</div></div></div></td><td><div className="property-cell"><div className="property-name">{lease.property_name}</div><div className="unit-number">Unit{lease.unit_number}</div></div></td><td><div className="term-cell"><div>{formatDate(lease.start_date)}-{formatDate(lease.end_date)}</div><div className="term-length">{lease.term_months}months</div></div></td><td><div className="rent-cell"><div className="rent-amount">${lease.rent_amount}/mo</div><div className="deposit">Deposit:${lease.security_deposit}</div></div></td><td><div className="status-cell"><span className={`lease-status ${lease.status}`}>{lease.status}</span>{isExpiringSoon &&(<div className="expiry-warning">{daysRemaining}days left </div>)}</div></td><td><div className="actions-cell"><button className="btn-icon" onClick={onView}><i className="fas fa-eye"></i></button><button className="btn-icon"><i className="fas fa-download"></i></button>{isExpiringSoon &&(<button className="btn-icon primary" onClick={onRenew}><i className="fas fa-redo"></i></button>)}</div></td></tr>)};const CreateLeaseModal =({onClose,onSave})=>{const [step,setStep] = React.useState(1);const [selectedUnit,setSelectedUnit] = React.useState(null);const [selectedTenant,setSelectedTenant] = React.useState(null);const [leaseTerms,setLeaseTerms] = React.useState({start_date:'',term_months:12,rent_amount:'',security_deposit:'',pet_deposit:0,utilities_included:[],late_fee:50,grace_period_days:5});const handleSubmit = async()=>{const leaseData ={unit_id:selectedUnit.id,tenant_id:selectedTenant.id,...leaseTerms};try{const response = await fetch('http:method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${localStorage.getItem('access_token')}`},body:JSON.stringify(leaseData)});if(response.ok){showToast('success','Lease created successfully');onSave()}}catch(error){showToast('error','Failed to create lease')}};const showToast =(type,message)=>{};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-lg" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>Create New Lease</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-body">{}<div className="lease-steps"><div className={`step ${step >= 1 ? 'active':''}`}><span className="step-number">1</span><span className="step-label">Select Unit</span></div><div className={`step ${step >= 2 ? 'active':''}`}><span className="step-number">2</span><span className="step-label">Select Tenant</span></div><div className={`step ${step >= 3 ? 'active':''}`}><span className="step-number">3</span><span className="step-label">Lease Terms</span></div></div>{}{step === 1 &&(<UnitSelection onSelect={(unit)=>{setSelectedUnit(unit);setLeaseTerms({...leaseTerms,rent_amount:unit.rent_amount});setStep(2)}}/>)}{step === 2 &&(<TenantSelection onSelect={(tenant)=>{setSelectedTenant(tenant);setStep(3)}}/>)}{step === 3 &&(<LeaseTermsForm unit={selectedUnit}tenant={selectedTenant}terms={leaseTerms}onChange={setLeaseTerms}onSubmit={handleSubmit}/>)}</div><div className="modal-footer">{step > 1 &&(<button className="btn btn-secondary" onClick={()=> setStep(step - 1)}> Back </button>)}{step < 3 &&(<button className="btn btn-primary" disabled={!selectedUnit && step === 1}onClick={()=> setStep(step + 1)}> Next </button>)}{step === 3 &&(<button className="btn btn-primary" onClick={handleSubmit}> Create Lease </button>)}</div></div></div>)};const UnitSelection =({onSelect})=>{const mockUnits = [{id:1,property_name:'Sunset Apartments',unit_number:'205',bedrooms:2,bathrooms:2,rent_amount:2400,status:'vacant'},{id:2,property_name:'Garden View Townhomes',unit_number:'410',bedrooms:3,bathrooms:2.5,rent_amount:2100,status:'vacant'},{id:3,property_name:'Downtown Office Plaza',unit_number:'B12',bedrooms:0,bathrooms:1,rent_amount:3500,status:'vacant'}];return(<div className="unit-selection"><h3>Select an Available Unit</h3><div className="units-grid">{mockUnits.map(unit =>(<div key={unit.id}className="unit-card selectable" onClick={()=> onSelect(unit)}><h4>{unit.property_name}</h4><p>Unit{unit.unit_number}</p><p className="rent-amount">${unit.rent_amount}/mo</p><p className="unit-type">{unit.bedrooms}BR /{unit.bathrooms}BA</p></div>))}</div></div>)};const TenantSelection =({onSelect})=>{const mockTenants = [{id:1,first_name:'Emily',last_name:'Davis',name:'Emily Davis',email:'emily.d@email.com',phone:'(555)123-4567',status:'applicant',screening_result:{credit_score:720,recommendation:'Approve'}},{id:2,first_name:'Robert',last_name:'Wilson',name:'Robert Wilson',email:'rwilson@email.com',phone:'(555)234-5678',status:'applicant',screening_result:{credit_score:680,recommendation:'Review'}},{id:3,first_name:'Lisa',last_name:'Chen',name:'Lisa Chen',email:'lisa.chen@email.com',phone:'(555)345-6789',status:'applicant',screening_result:{credit_score:750,recommendation:'Approve'}}];return(<div className="tenant-selection"><h3>Select a Tenant</h3><div className="tenants-list">{mockTenants.map(tenant =>(<div key={tenant.id}className="tenant-item selectable" onClick={()=> onSelect(tenant)}><div className="tenant-info"><h4>{tenant.name}</h4><p>{tenant.email}</p><p>{tenant.phone}</p></div>{tenant.screening_result &&(<div className="screening-info"><span>Credit Score:{tenant.screening_result.credit_score}</span><span className={`status ${tenant.screening_result.recommendation === 'Approve' ? 'success':'warning'}`}>{tenant.screening_result.recommendation}</span></div>)}</div>))}</div></div>)};const LeaseTermsForm =({unit,tenant,terms,onChange,onSubmit})=>{const handleInputChange =(field,value)=>{onChange({...terms,[field]:value})};return(<div className="lease-terms-form"><h3>Lease Terms</h3><div className="summary-box"><div className="summary-item"><strong>Unit:</strong>{unit.property_name}- Unit{unit.unit_number}</div><div className="summary-item"><strong>Tenant:</strong>{tenant.name}</div></div><div className="form-section"><div className="form-row"><div className="form-group"><label>Start Date</label><input type="date" className="form-control" value={terms.start_date}onChange={(e)=> handleInputChange('start_date',e.target.value)}required /></div><div className="form-group"><label>Term(Months)</label><select className="form-control" value={terms.term_months}onChange={(e)=> handleInputChange('term_months',parseInt(e.target.value))}><option value={6}>6 months</option><option value={12}>12 months</option><option value={18}>18 months</option><option value={24}>24 months</option></select></div></div><div className="form-row"><div className="form-group"><label>Monthly Rent</label><input type="number" className="form-control" value={terms.rent_amount}onChange={(e)=> handleInputChange('rent_amount',parseFloat(e.target.value))}required /></div><div className="form-group"><label>Security Deposit</label><input type="number" className="form-control" value={terms.security_deposit}onChange={(e)=> handleInputChange('security_deposit',parseFloat(e.target.value))}required /></div></div><div className="form-row"><div className="form-group"><label>Pet Deposit</label><input type="number" className="form-control" value={terms.pet_deposit}onChange={(e)=> handleInputChange('pet_deposit',parseFloat(e.target.value))}/></div><div className="form-group"><label>Late Fee</label><input type="number" className="form-control" value={terms.late_fee}onChange={(e)=> handleInputChange('late_fee',parseFloat(e.target.value))}/></div></div></div></div>)};const mockLeases = [{id:1,tenant_name:'John Smith',tenant_email:'john.smith@email.com',property_name:'Sunset Apartments',unit_number:'101',start_date:'2024-01-15',end_date:'2025-01-15',term_months:12,rent_amount:2200,security_deposit:2200,status:'active'},{id:2,tenant_name:'Sarah Johnson',tenant_email:'sarah.j@email.com',property_name:'Downtown Office Plaza',unit_number:'A1',start_date:'2023-08-01',end_date:'2024-08-31',term_months:12,rent_amount:5000,security_deposit:5000,status:'active'},{id:3,tenant_name:'Michael Chen',tenant_email:'mchen@email.com',property_name:'Garden View Townhomes',unit_number:'305',start_date:'2024-02-01',end_date:'2025-02-01',term_months:12,rent_amount:1800,security_deposit:1800,status:'active'},{id:4,tenant_name:'Lisa Park',tenant_email:'lisa.park@email.com',property_name:'Sunset Apartments',unit_number:'308',start_date:'2022-06-01',end_date:'2024-06-01',term_months:24,rent_amount:2000,security_deposit:2000,status:'expired'}];window.AppModules = window.AppModules ||{};window.AppModules.Leases = Leases;

// FinancialDashboard.jsx
const FinancialDashboard =(()=>{const ComponentFactory ={createComponent:(name,options ={})=>(componentFunc)=>{const Component =(props)=>{const helpers ={useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:true,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});await new Promise(resolve => setTimeout(resolve,1000));const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);return state},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatPercentage:(value)=>{return new Intl.NumberFormat('en-US',{style:'percent',minimumFractionDigits:1,maximumFractionDigits:1}).format(value || 0)}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('FinancialDashboard',{})((props,helpers)=>{const{period,basisType,entity,property}= props;const{useAsyncState,formatCurrency,formatPercentage}= helpers;const dashboardData = useAsyncState(async()=>{return{noi:125000,noiChange:0.08,capRate:0.075,capRateChange:0.002,dscr:1.35,dscrChange:0.05,occupancy:0.945,occupancyChange:0.02,freeCashFlow:85000,cashFlowChange:0.12,arAging90Plus:12500,arAgingChange:-0.15,noiTrend:[{month:'Aug',amount:110000},{month:'Sep',amount:115000},{month:'Oct',amount:118000},{month:'Nov',amount:120000},{month:'Dec',amount:125000}],cashFlowWaterfall:[{category:'Revenue',amount:200000},{category:'Operating Expenses',amount:-75000},{category:'NOI',amount:125000},{category:'Debt Service',amount:-40000},{category:'Free Cash Flow',amount:85000}],expenseBreakdown:[{category:'Property Management',amount:20000},{category:'Maintenance',amount:15000},{category:'Utilities',amount:12000},{category:'Insurance',amount:10000},{category:'Property Tax',amount:8000},{category:'Other',amount:10000}],recentEntries:[{id:1,je_number:'JE202501-0001',date:'2025-01-15',description:'January Rent Collection',amount:125000},{id:2,je_number:'JE202501-0002',date:'2025-01-10',description:'Property Management Fee',amount:20000},{id:3,je_number:'JE202501-0003',date:'2025-01-08',description:'Maintenance Expenses',amount:5500}],alerts:[{id:1,type:'critical',title:'Large AR Balance',message:'3 tenants with balances over 90 days'},{id:2,type:'warning',title:'Budget Variance',message:'Maintenance expenses 15% over budget'},{id:3,type:'info',title:'Bank Reconciliation',message:'5 unmatched transactions pending review'}]}},[period,basisType,entity,property]);if(dashboardData.loading){return React.createElement('div',{className:'financial-loading'},React.createElement('div',{className:'loading-spinner'}),React.createElement('div',{},'Loading financial dashboard...'))}const data = dashboardData.data ||{};return React.createElement('div',{className:'financial-dashboard'},[ React.createElement('div',{key:'kpis',className:'financial-kpi-grid'},[ React.createElement(FinancialKPICard,{key:'noi',title:'Net Operating Income',value:formatCurrency(data.noi || 0),change:data.noiChange || 0,icon:'fa-chart-line',color:'primary'}),React.createElement(FinancialKPICard,{key:'cap-rate',title:'Cap Rate',value:formatPercentage(data.capRate || 0),change:data.capRateChange || 0,icon:'fa-percentage',color:'success'}),React.createElement(FinancialKPICard,{key:'dscr',title:'DSCR',value:(data.dscr || 0).toFixed(2)+ 'x',change:data.dscrChange || 0,icon:'fa-shield-alt',color:data.dscr >= 1.25 ? 'success':'warning'}),React.createElement(FinancialKPICard,{key:'occupancy',title:'Economic Occupancy',value:formatPercentage(data.occupancy || 0),change:data.occupancyChange || 0,icon:'fa-home',color:'info'}),React.createElement(FinancialKPICard,{key:'cash-flow',title:'Free Cash Flow',value:formatCurrency(data.freeCashFlow || 0),change:data.cashFlowChange || 0,icon:'fa-money-bill-wave',color:data.freeCashFlow >= 0 ? 'success':'danger'}),React.createElement(FinancialKPICard,{key:'ar-aging',title:'AR > 90 Days',value:formatCurrency(data.arAging90Plus || 0),change:data.arAgingChange || 0,icon:'fa-exclamation-triangle',color:'warning'})]),React.createElement('div',{key:'charts',className:'financial-charts-section'},[ React.createElement(NOITrendChart,{key:'noi-trend',data:data.noiTrend || [],period:period}),React.createElement(ExpenseCategoryChart,{key:'expense-breakdown',data:data.expenseBreakdown || [],period:period})]),React.createElement('div',{key:'activity',className:'financial-activity-section'},[ React.createElement(RecentJournalEntries,{key:'recent-entries',entries:data.recentEntries || [],limit:10}),React.createElement(FinancialAlerts,{key:'alerts',alerts:data.alerts || [],severity:['critical','warning','info']})])])})})();const FinancialKPICard =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={formatPercentage:(value)=>{return new Intl.NumberFormat('en-US',{style:'percent',minimumFractionDigits:1,maximumFractionDigits:1}).format(value || 0)}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('FinancialKPICard')((props,helpers)=>{const{title,value,change,icon,color}= props;const{formatPercentage}= helpers;const changeColor = change >= 0 ? 'success':'danger';const changeIcon = change >= 0 ? 'fa-arrow-up':'fa-arrow-down';return React.createElement('div',{className:`financial-kpi-card kpi-${color}`},[ React.createElement('div',{key:'header',className:'kpi-header'},[ React.createElement('i',{key:'icon',className:`fas ${icon}kpi-icon`}),React.createElement('h3',{key:'title',className:'kpi-title'},title)]),React.createElement('div',{key:'value',className:'kpi-value'},value),React.createElement('div',{key:'change',className:`kpi-change change-${changeColor}`},[ React.createElement('i',{key:'change-icon',className:`fas ${changeIcon}`}),React.createElement('span',{key:'change-value'},`${formatPercentage(Math.abs(change))}vs last period`)])])})})();const NOITrendChart =(()=>{return(props)=>{const{data,period}= props;return React.createElement('div',{className:'chart-container noi-trend-chart'},[ React.createElement('div',{key:'header',className:'chart-header'},[ React.createElement('h3',{key:'title',className:'chart-title'},'NOI Trend'),React.createElement('span',{key:'period',className:'chart-period'},'Last 5 Months')]),React.createElement('div',{key:'chart',className:'chart-content'},React.createElement('div',{className:'simple-bar-chart'},data.map((item,index)=> React.createElement('div',{key:index,className:'bar-item'},[ React.createElement('div',{key:'bar',className:'bar',style:{height:`${(item.amount / 150000)* 100}%`}}),React.createElement('div',{key:'label',className:'bar-label'},item.month),React.createElement('div',{key:'value',className:'bar-value'},`$${(item.amount / 1000).toFixed(0)}k`)]))))])}})();const ExpenseCategoryChart =(()=>{return(props)=>{const{data,period}= props;const total = data.reduce((sum,item)=> sum + item.amount,0);return React.createElement('div',{className:'chart-container expense-chart'},[ React.createElement('div',{key:'header',className:'chart-header'},[ React.createElement('h3',{key:'title',className:'chart-title'},'Expense Breakdown'),React.createElement('span',{key:'period',className:'chart-period'},'Current Period')]),React.createElement('div',{key:'chart',className:'chart-content'},React.createElement('div',{className:'expense-list'},data.map((item,index)=> React.createElement('div',{key:index,className:'expense-item'},[ React.createElement('div',{key:'info',className:'expense-info'},[ React.createElement('span',{key:'category',className:'expense-category'},item.category),React.createElement('span',{key:'amount',className:'expense-amount'},`$${(item.amount / 1000).toFixed(1)}k`)]),React.createElement('div',{key:'bar',className:'expense-bar'},React.createElement('div',{className:'expense-bar-fill',style:{width:`${(item.amount / total)* 100}%`}})),React.createElement('span',{key:'percent',className:'expense-percent'},`${((item.amount / total)* 100).toFixed(0)}%`)]))))])}})();const RecentJournalEntries =(()=>{return(props)=>{const{entries,limit}= props;const displayEntries = entries.slice(0,limit);return React.createElement('div',{className:'recent-entries-container'},[ React.createElement('h3',{key:'title',className:'section-title'},'Recent Journal Entries'),React.createElement('div',{key:'entries',className:'entries-list'},displayEntries.map(entry => React.createElement('div',{key:entry.id,className:'entry-item'},[ React.createElement('div',{key:'left',className:'entry-left'},[ React.createElement('div',{key:'number',className:'entry-number'},entry.je_number),React.createElement('div',{key:'desc',className:'entry-description'},entry.description)]),React.createElement('div',{key:'right',className:'entry-right'},[ React.createElement('div',{key:'amount',className:'entry-amount'},`$${(entry.amount / 1000).toFixed(1)}k`),React.createElement('div',{key:'date',className:'entry-date'},entry.date)])])))])}})();const FinancialAlerts =(()=>{return(props)=>{const{alerts,severity}= props;const filteredAlerts = alerts.filter(alert => severity.includes(alert.type));return React.createElement('div',{className:'financial-alerts'},[ React.createElement('div',{key:'header',className:'alerts-header'},[ React.createElement('h3',{key:'title'},'Financial Alerts'),React.createElement('span',{key:'count',className:'alert-count'},`${filteredAlerts.length}active`)]),React.createElement('div',{key:'alerts',className:'alerts-list'},filteredAlerts.map(alert => React.createElement('div',{key:alert.id,className:`alert-item ${alert.type}`},[ React.createElement('i',{key:'icon',className:`alert-icon fas ${alert.type === 'critical' ? 'fa-exclamation-circle':alert.type === 'warning' ? 'fa-exclamation-triangle':'fa-info-circle'}`}),React.createElement('div',{key:'content',className:'alert-content'},[ React.createElement('div',{key:'title',className:'alert-title'},alert.title),React.createElement('div',{key:'message',className:'alert-message'},alert.message)])])))])}})();window.AppModules = window.AppModules ||{};window.AppModules.FinancialDashboard = FinancialDashboard;window.AppModules.FinancialKPICard = FinancialKPICard;

// AdminPortal.jsx
const AdminPortal =({user,onLogout})=>{const [activePage,setActivePage] = React.useState('dashboard');const menuItems = [{id:'dashboard',label:'Dashboard',icon:'📊'},{id:'management',label:'Management',icon:'🏢',children:[{id:'properties',label:'Properties'},{id:'leads',label:'Leads'},{id:'applications',label:'Applications'},{id:'leases',label:'Leases'},{id:'users',label:'Users'}]},{id:'marketing',label:'Marketing',icon:'📣',children:[{id:'campaigns',label:'Marketing'},{id:'listings',label:'Listings'}]},{id:'operations',label:'Operations',icon:'⚙️',children:[{id:'messages',label:'Messages'},{id:'maintenance',label:'Maintenance'},{id:'payments',label:'Payments'},{id:'documents',label:'Documents'}]},{id:'community',label:'Community',icon:'👥',children:[{id:'announcements',label:'Announcements'},{id:'contracts',label:'Contracts'},{id:'vendors',label:'Vendors'}]},{id:'financial',label:'Financial',icon:'💰',children:[{id:'accounting',label:'Accounting'},{id:'general-ledger',label:'General Ledger'},{id:'chart-of-accounts',label:'Chart of Accounts'},{id:'tenant-billing',label:'Tenant Billing'},{id:'bank-reconciliation',label:'Bank Reconciliation'},{id:'financial-reports',label:'Financial Reports'}]},{id:'security',label:'Security & Compliance',icon:'🔒',children:[{id:'permissions',label:'Permissions'},{id:'audit-logs',label:'Audit Logs'}]}];const getPageTitle =()=>{const findTitle =(items,targetId,parent = '')=>{for(const item of items){const currentId = parent ? `${parent}-${item.id}`:item.id;if(currentId === activePage){return parent ? `${items.find(i => i.id === parent.split('-')[0])?.label}> ${item.label}`:item.label}if(item.children){const childTitle = findTitle(item.children,targetId,item.id);if(childTitle)return childTitle}}return null};return findTitle(menuItems)|| 'Dashboard'};const renderPageContent =()=>{if(activePage === 'dashboard'){return(<div className="dashboard-grid"><Card className="stat-card"><div className="stat-value">156</div><div className="stat-label">Total Properties</div></Card><Card className="stat-card"><div className="stat-value">1,248</div><div className="stat-label">Active Leases</div></Card><Card className="stat-card"><div className="stat-value">89%</div><div className="stat-label">Occupancy Rate</div></Card><Card className="stat-card"><div className="stat-value">$2.4M</div><div className="stat-label">Monthly Revenue</div></Card></div>)}return(<Card><p style={{color:'var(--color-text-secondary)'}}>{getPageTitle()}page content will be implemented here. </p></Card>)};return(<div className="admin-portal"><Sidebar menuItems={menuItems}activePage={activePage}onPageChange={setActivePage}/><div className="main-content"><header className="topbar"><div className="topbar-content"><h1 className="page-title">{getPageTitle()}</h1><div className="topbar-actions"><button className="icon-button"><svg width="20" height="20" viewBox="0 0 20 20" fill="none"><path d="M10 2C13.866 2 17 5.13401 17 9C17 12.866 13.866 16 10 16C6.13401 16 3 12.866 3 9C3 5.13401 6.13401 2 10 2Z" stroke="currentColor" strokeWidth="2"/><path d="M10 5V9L13 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg></button><button className="icon-button"><svg width="20" height="20" viewBox="0 0 20 20" fill="none"><path d="M10 5C10.5523 5 11 4.55228 11 4C11 3.44772 10.5523 3 10 3C9.44772 3 9 3.44772 9 4C9 4.55228 9.44772 5 10 5Z" fill="currentColor"/><path d="M10 7C8.34315 7 7 8.34315 7 10V14C7 14.5523 7.44772 15 8 15H12C12.5523 15 13 14.5523 13 14V10C13 8.34315 11.6569 7 10 7Z" stroke="currentColor" strokeWidth="2"/><path d="M15 17H5" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg></button><div className="user-menu"><span className="user-name">{user.first_name}{user.last_name}</span><Button variant="ghost" size="sm" onClick={onLogout}> Sign out </Button></div></div></div></header><main className="page-content">{renderPageContent()}</main></div></div>)};

// Payments.jsx
const Payments =()=>{const [payments,setPayments] = React.useState([]);const [upcomingPayments,setUpcomingPayments] = React.useState([]);const [overduePayments,setOverduePayments] = React.useState([]);const [showCollectPayment,setShowCollectPayment] = React.useState(false);const [stats,setStats] = React.useState({collected:0,pending:0,overdue:0});const mockPayments = [{id:1,date:'2024-07-01',tenant_name:'John Smith',property_name:'Sunset Apartments',unit_number:'101',amount:2200,method:'Card',status:'completed',transaction_id:'PAY-001234'},{id:2,date:'2024-07-01',tenant_name:'Sarah Johnson',property_name:'Downtown Office Plaza',unit_number:'A1',amount:5000,method:'ACH',status:'completed',transaction_id:'PAY-001235'},{id:3,date:'2024-06-28',tenant_name:'Michael Chen',property_name:'Garden View Townhomes',unit_number:'305',amount:1800,method:'Card',status:'completed',transaction_id:'PAY-001233'}];const mockOverduePayments = [{id:1,tenant_name:'Emily Davis',unit_number:'204',amount:2000,due_date:'2024-06-01',days_overdue:30,phone:'(555)456-7890',email:'emily.davis@email.com'},{id:2,tenant_name:'Robert Wilson',unit_number:'302',amount:1500,due_date:'2024-06-15',days_overdue:16,phone:'(555)567-8901',email:'rwilson@email.com'}];const mockUpcomingPayments = [{id:1,tenant_name:'Lisa Anderson',unit_number:'405',amount:2300,due_date:'2024-08-01'},{id:2,tenant_name:'James Martinez',unit_number:'106',amount:1900,due_date:'2024-08-01'}];React.useEffect(()=>{setPayments(mockPayments);setOverduePayments(mockOverduePayments);setUpcomingPayments(mockUpcomingPayments);const collected = mockPayments.reduce((sum,p)=> sum + p.amount,0);const overdue = mockOverduePayments.reduce((sum,p)=> sum + p.amount,0);const pending = mockUpcomingPayments.reduce((sum,p)=> sum + p.amount,0);setStats({collected,pending,overdue})},[]);const formatNumber =(num)=>{return num.toLocaleString()};const formatDate =(dateString)=>{const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};const showToast =(type,message)=>{};return(<div className="payments-page">{}<div className="revenue-dashboard"><div className="revenue-card primary"><div className="card-icon"><i className="fas fa-dollar-sign"></i></div><div className="card-content"><h3>Collected This Month</h3><div className="amount">${formatNumber(stats.collected)}</div><div className="trend positive"><i className="fas fa-arrow-up"></i> 12% vs last month </div></div></div><div className="revenue-card warning"><div className="card-icon"><i className="fas fa-clock"></i></div><div className="card-content"><h3>Pending Payments</h3><div className="amount">${formatNumber(stats.pending)}</div><div className="count">{upcomingPayments.length}payments</div></div></div><div className="revenue-card danger"><div className="card-icon"><i className="fas fa-exclamation-triangle"></i></div><div className="card-content"><h3>Overdue</h3><div className="amount">${formatNumber(stats.overdue)}</div><div className="count">{overduePayments.length}payments</div></div></div></div>{}<div className="payment-actions"><button className="btn btn-primary" onClick={()=> setShowCollectPayment(true)}><i className="fas fa-credit-card"></i> Collect Payment </button><button className="btn btn-secondary"><i className="fas fa-paper-plane"></i> Send Reminders </button><button className="btn btn-secondary"><i className="fas fa-file-invoice"></i> Generate Invoices </button></div>{}{overduePayments.length > 0 &&(<div className="overdue-alert"><h3>Overdue Payments Requiring Action</h3><div className="overdue-list">{overduePayments.map(payment =>(<div key={payment.id}className="overdue-item"><div className="tenant-info"><strong>{payment.tenant_name}</strong><span>{payment.unit_number}</span></div><div className="overdue-details"><span className="amount">${payment.amount}</span><span className="days-overdue">{payment.days_overdue}days overdue </span></div><div className="overdue-actions"><button className="btn-small"><i className="fas fa-phone"></i> Call </button><button className="btn-small"><i className="fas fa-envelope"></i> Email </button><button className="btn-small primary"><i className="fas fa-credit-card"></i> Collect </button></div></div>))}</div></div>)}{}<div className="recent-payments"><h3>Recent Payments</h3><table className="payments-table"><thead><tr><th>Date</th><th>Tenant</th><th>Property/Unit</th><th>Amount</th><th>Method</th><th>Status</th><th>Actions</th></tr></thead><tbody>{payments.map(payment =>(<PaymentRow key={payment.id}payment={payment}formatDate={formatDate}/>))}</tbody></table></div>{}{showCollectPayment &&(<CollectPaymentModal onClose={()=> setShowCollectPayment(false)}onSuccess={()=>{setShowCollectPayment(false);setPayments([...payments])}}showToast={showToast}/>)}</div>)};const PaymentRow =({payment,formatDate})=>{const getStatusBadge =(status)=>{const statusClasses ={completed:'status-success',pending:'status-warning',failed:'status-danger'};return statusClasses[status] || 'status-secondary'};return(<tr><td>{formatDate(payment.date)}</td><td><div className="tenant-cell"><strong>{payment.tenant_name}</strong></div></td><td><div className="property-cell"><div>{payment.property_name}</div><small>Unit{payment.unit_number}</small></div></td><td className="amount-cell">${payment.amount.toLocaleString()}</td><td>{payment.method}</td><td><span className={`status-badge ${getStatusBadge(payment.status)}`}>{payment.status}</span></td><td><div className="action-buttons"><button className="btn-icon" title="View details"><i className="fas fa-eye"></i></button><button className="btn-icon" title="Download receipt"><i className="fas fa-download"></i></button></div></td></tr>)};const CollectPaymentModal =({onClose,onSuccess,showToast})=>{const [selectedTenant,setSelectedTenant] = React.useState(null);const [paymentMethod,setPaymentMethod] = React.useState('card');const [amount,setAmount] = React.useState('');const [processing,setProcessing] = React.useState(false);const [cardDetails,setCardDetails] = React.useState({number:'',expiry:'',cvv:''});const processPayment = async()=>{setProcessing(true);setTimeout(()=>{showToast('success','Payment processed successfully');setProcessing(false);onSuccess()},2000)};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-md" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>Collect Payment</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-body">{}<div className="form-group"><label>Select Tenant</label><TenantSearch onSelect={setSelectedTenant}/></div>{selectedTenant &&(<><div className="selected-tenant"><div className="tenant-details"><strong>{selectedTenant.name}</strong><span>{selectedTenant.unit_number}</span><span>Balance:${selectedTenant.balance}</span></div></div>{}<div className="form-group"><label>Amount</label><div className="amount-input"><span className="currency">$</span><input type="number" value={amount}onChange={(e)=> setAmount(e.target.value)}placeholder="0.00" /></div><div className="quick-amounts"><button className="amount-btn" onClick={()=> setAmount(selectedTenant.rent_amount)}> Full Rent(${selectedTenant.rent_amount})</button><button className="amount-btn" onClick={()=> setAmount(selectedTenant.balance)}> Full Balance(${selectedTenant.balance})</button></div></div>{}<div className="form-group"><label>Payment Method</label><div className="payment-methods"><label className={`method-option ${paymentMethod === 'card' ? 'selected':''}`}><input type="radio" value="card" checked={paymentMethod === 'card'}onChange={(e)=> setPaymentMethod(e.target.value)}/><i className="fas fa-credit-card"></i><span>Credit/Debit Card</span></label><label className={`method-option ${paymentMethod === 'ach' ? 'selected':''}`}><input type="radio" value="ach" checked={paymentMethod === 'ach'}onChange={(e)=> setPaymentMethod(e.target.value)}/><i className="fas fa-university"></i><span>Bank Transfer(ACH)</span></label></div></div>{}{paymentMethod === 'card' &&(<div className="card-details"><div className="form-group"><label>Card Number</label><input type="text" className="form-control" placeholder="1234 5678 9012 3456" value={cardDetails.number}onChange={(e)=> setCardDetails({...cardDetails,number:e.target.value})}/></div><div className="form-row"><div className="form-group"><label>Expiry Date</label><input type="text" className="form-control" placeholder="MM/YY" value={cardDetails.expiry}onChange={(e)=> setCardDetails({...cardDetails,expiry:e.target.value})}/></div><div className="form-group"><label>CVV</label><input type="text" className="form-control" placeholder="123" value={cardDetails.cvv}onChange={(e)=> setCardDetails({...cardDetails,cvv:e.target.value})}/></div></div></div>)}</>)}</div><div className="modal-footer"><button className="btn btn-secondary" onClick={onClose}> Cancel </button><button className="btn btn-primary" onClick={processPayment}disabled={!selectedTenant || !amount || processing}>{processing ?(<><i className="fas fa-spinner fa-spin"></i> Processing... </>):(<><i className="fas fa-lock"></i> Process Payment </>)}</button></div>{}<div className="security-footer"><i className="fas fa-shield-alt"></i><span>Payments secured by Valor PayTech</span></div></div></div>)};const TenantSearch =({onSelect})=>{const [searchTerm,setSearchTerm] = React.useState('');const [showResults,setShowResults] = React.useState(false);const mockTenants = [{id:1,name:'John Smith',unit_number:'101',balance:2200,rent_amount:2200},{id:2,name:'Sarah Johnson',unit_number:'A1',balance:5000,rent_amount:5000},{id:3,name:'Michael Chen',unit_number:'305',balance:0,rent_amount:1800}];const filteredTenants = mockTenants.filter(tenant => tenant.name.toLowerCase().includes(searchTerm.toLowerCase())|| tenant.unit_number.includes(searchTerm));return(<div className="tenant-search"><input type="text" className="form-control" placeholder="Search by name or unit number..." value={searchTerm}onChange={(e)=>{setSearchTerm(e.target.value);setShowResults(true)}}onFocus={()=> setShowResults(true)}/>{showResults && searchTerm &&(<div className="search-results">{filteredTenants.map(tenant =>(<div key={tenant.id}className="search-result-item" onClick={()=>{onSelect(tenant);setSearchTerm(tenant.name);setShowResults(false)}}><div><strong>{tenant.name}</strong><span className="unit">Unit{tenant.unit_number}</span></div><span className="balance">Balance:${tenant.balance}</span></div>))}</div>)}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.Payments = Payments;

// ReportsCenter.jsx
const ReportsCenter =()=>{const [searchQuery,setSearchQuery] = React.useState('');const [activeCategory,setActiveCategory] = React.useState('all');const [expandedCategories,setExpandedCategories] = React.useState(new Set(['diagnostic','leasing','financial']));const [favoriteReports,setFavoriteReports] = React.useState(new Set());const [recentReports,setRecentReports] = React.useState([]);const [showReportBuilder,setShowReportBuilder] = React.useState(false);const [selectedReport,setSelectedReport] = React.useState(null);const [loading,setLoading] = React.useState(false);const reportDataService = window.ReportDataService;const reportCategories ={diagnostic:{name:'Diagnostic Reports',icon:'fa-stethoscope',color:'#3b82f6',reports:[{id:'email-errors',name:'Email Delivery Errors',description:'Track failed email notifications',dataSource:'notifications'},{id:'late-fee-analysis',name:'Late Fee Policy Comparison',description:'Analyze late fee effectiveness',dataSource:'payments'},{id:'payment-success',name:'Payment Success Rate',description:'Valor PayTech transaction analysis',dataSource:'valor'},{id:'system-health',name:'System Health Dashboard',description:'Overall platform performance',dataSource:'system'}]},leasing:{name:'Leasing Reports',icon:'fa-file-contract',color:'#8b5cf6',reports:[{id:'guest-cards',name:'Guest Card Inquiries',description:'Track prospective tenant interactions',dataSource:'leads'},{id:'conversion-funnel',name:'Leasing Funnel Performance',description:'Inquiry to lease conversion',dataSource:'leases'},{id:'renewal-summary',name:'Renewal Summary',description:'Upcoming lease renewals',dataSource:'leases'},{id:'occupancy-summary',name:'Occupancy Summary',description:'Current and projected occupancy',dataSource:'units'},{id:'lease-expiration',name:'Lease Expiration Detail',description:'Detailed expiration timeline',dataSource:'leases'},{id:'unit-vacancy',name:'Unit Vacancy Detail',description:'Vacant unit analysis',dataSource:'units'},{id:'showings',name:'Showings Report',description:'Property showing metrics',dataSource:'calendar'},{id:'rental-applications',name:'Rental Applications',description:'Application status tracking',dataSource:'applications'}]},financial:{name:'Financial Reports',icon:'fa-chart-line',color:'#10b981',reports:[{id:'income-statement',name:'Income Statement',description:'P&L by property',dataSource:'accounting'},{id:'balance-sheet',name:'Balance Sheet',description:'Assets and liabilities',dataSource:'accounting'},{id:'cash-flow',name:'Cash Flow Statement',description:'Cash movement analysis',dataSource:'accounting'},{id:'rent-roll',name:'Rent Roll',description:'Current tenant rent details',dataSource:'leases'},{id:'ar-aging',name:'AR Aging',description:'Accounts receivable aging',dataSource:'payments'},{id:'delinquency',name:'Delinquency Report',description:'Overdue payments analysis',dataSource:'payments'},{id:'budget-variance',name:'Budget vs Actual',description:'Budget variance analysis',dataSource:'accounting'},{id:'expense-analysis',name:'Expense Analysis',description:'Detailed expense breakdown',dataSource:'accounting'}]},maintenance:{name:'Maintenance Reports',icon:'fa-tools',color:'#f59e0b',reports:[{id:'work-order-summary',name:'Work Order Summary',description:'Maintenance request overview',dataSource:'maintenance'},{id:'vendor-performance',name:'Vendor Performance',description:'Vendor KPIs and ratings',dataSource:'vendors'},{id:'maintenance-costs',name:'Maintenance Cost Analysis',description:'Cost by property and type',dataSource:'maintenance'},{id:'preventive-schedule',name:'Preventive Maintenance',description:'Scheduled maintenance tracking',dataSource:'maintenance'},{id:'unit-turn-time',name:'Unit Turn Time',description:'Time to make units ready',dataSource:'maintenance'},{id:'vendor-directory',name:'Vendor Directory',description:'Complete vendor listing',dataSource:'vendors'}]},owner:{name:'Owner Reports',icon:'fa-building',color:'#6366f1',reports:[{id:'owner-statement',name:'Owner Statement',description:'Monthly owner statements',dataSource:'accounting'},{id:'owner-statement-ytd',name:'Owner Statement(YTD)',description:'Year-to-date performance',dataSource:'accounting'},{id:'owner-directory',name:'Owner Directory',description:'Owner contact information',dataSource:'owners'},{id:'distribution-summary',name:'Distribution Summary',description:'Owner payment history',dataSource:'payments'},{id:'investment-analysis',name:'Investment Analysis',description:'ROI and cap rate analysis',dataSource:'accounting'}]},property:{name:'Property & Unit Reports',icon:'fa-home',color:'#ec4899',reports:[{id:'property-summary',name:'Property Summary',description:'Overview of all properties',dataSource:'properties'},{id:'unit-directory',name:'Unit Directory',description:'Complete unit listing',dataSource:'units'},{id:'amenities-report',name:'Amenities by Property',description:'Property features matrix',dataSource:'properties'},{id:'insurance-schedule',name:'Insurance Schedule',description:'Insurance coverage details',dataSource:'properties'},{id:'property-photos',name:'Property Photo Report',description:'Marketing photo inventory',dataSource:'media'}]},tenant:{name:'Tenant Reports',icon:'fa-users',color:'#14b8a6',reports:[{id:'tenant-directory',name:'Tenant Directory',description:'Current tenant listing',dataSource:'tenants'},{id:'tenant-ledger',name:'Tenant Ledger',description:'Individual tenant transactions',dataSource:'payments'},{id:'move-in-out',name:'Move In/Out Report',description:'Tenant turnover tracking',dataSource:'leases'},{id:'tenant-screening',name:'Screening Results',description:'Background check summary',dataSource:'applications'},{id:'emergency-contacts',name:'Emergency Contacts',description:'Tenant emergency info',dataSource:'tenants'}]},transaction:{name:'Transaction Reports',icon:'fa-exchange-alt',color:'#f97316',reports:[{id:'payment-history',name:'Payment History',description:'All payment transactions',dataSource:'valor'},{id:'deposit-registry',name:'Security Deposit Registry',description:'Deposit tracking',dataSource:'payments'},{id:'bank-reconciliation',name:'Bank Reconciliation',description:'Bank account matching',dataSource:'accounting'},{id:'valor-settlements',name:'Valor PayTech Settlements',description:'Payment processor details',dataSource:'valor'},{id:'refund-history',name:'Refund History',description:'Refund transaction log',dataSource:'valor'}]}};React.useEffect(()=>{loadRecentReports();loadFavorites()},[]);const loadRecentReports =()=>{const recent = JSON.parse(localStorage.getItem('recentReports')|| '[]');setRecentReports(recent.slice(0,5))};const loadFavorites =()=>{const favs = JSON.parse(localStorage.getItem('favoriteReports')|| '[]');setFavoriteReports(new Set(favs))};const toggleCategory =(categoryId)=>{const newExpanded = new Set(expandedCategories);if(newExpanded.has(categoryId)){newExpanded.delete(categoryId)}else{newExpanded.add(categoryId)}setExpandedCategories(newExpanded)};const toggleFavorite =(reportId,e)=>{e.stopPropagation();const newFavorites = new Set(favoriteReports);if(newFavorites.has(reportId)){newFavorites.delete(reportId)}else{newFavorites.add(reportId)}setFavoriteReports(newFavorites);localStorage.setItem('favoriteReports',JSON.stringify([...newFavorites]))};const runReport = async(report,categoryId)=>{setLoading(true);const recent = [{...report,categoryId,timestamp:new Date().toISOString()}];const existing = recentReports.filter(r => r.id !== report.id);const newRecent = [...recent,...existing].slice(0,5);setRecentReports(newRecent);localStorage.setItem('recentReports',JSON.stringify(newRecent));try{const propertyId = window.currentProperty !== 'all' ? window.currentProperty:null;const reportData = await reportDataService.fetchReportData(report.id,report.dataSource,{propertyId,dateRange:getDateRange()});setSelectedReport({...report,categoryId,data:reportData,generatedAt:new Date().toISOString()})}catch(error){console.error('Error generating report:',error);window.showNotification?.('error','Failed to generate report')}finally{setLoading(false)}};const getDateRange =()=>{const end = new Date().toISOString();const start = new Date();start.setMonth(start.getMonth()- 1);return{start,end}};const exportReport = async(format)=>{if(!selectedReport)return;try{window.showNotification?.('info',`Exporting report as ${format.toUpperCase()}...`);const exportService = window.ReportExportService;const reportName = `${selectedReport.name}_${new Date().toISOString().split('T')[0]}`;switch(format){case 'pdf':await exportService.exportToPDF(selectedReport.data,reportName);break;case 'excel':await exportService.exportToExcel(selectedReport.data,reportName);break;case 'csv':await exportService.exportToCSV(selectedReport.data,reportName);break;default:throw new Error(`Unsupported format:${format}`)}window.showNotification?.('success',`Report exported successfully as ${format.toUpperCase()}`)}catch(error){console.error('Export error:',error);window.showNotification?.('error',`Failed to export report:${error.message}`)}};const scheduleReport =(report)=>{window.showNotification?.('info','Report scheduling coming soon')};const emailReport =(report)=>{window.showNotification?.('info','Email functionality coming soon')};const filteredReports = React.useMemo(()=>{const query = searchQuery.toLowerCase();const filtered ={};Object.entries(reportCategories).forEach(([categoryId,category])=>{const matchingReports = category.reports.filter(report => report.name.toLowerCase().includes(query)|| report.description.toLowerCase().includes(query));if(matchingReports.length > 0 || category.name.toLowerCase().includes(query)){filtered[categoryId] ={...category,reports:matchingReports}}});return filtered},[searchQuery]);return(<div className="reports-center">{}<div className="reports-header"><div className="header-content"><h1>Reports Center</h1><div className="header-actions"><button className="btn-report-builder" onClick={()=> setShowReportBuilder(true)}><i className="fas fa-magic"></i> Report Builder </button></div></div>{}<div className="reports-search"><i className="fas fa-search"></i><input type="text" placeholder="Search reports by name,description,or category..." value={searchQuery}onChange={(e)=> setSearchQuery(e.target.value)}/></div>{}<div className="report-filters"><button className={`filter-tab ${activeCategory === 'all' ? 'active':''}`}onClick={()=> setActiveCategory('all')}> All Reports </button><button className={`filter-tab ${activeCategory === 'favorites' ? 'active':''}`}onClick={()=> setActiveCategory('favorites')}><i className="fas fa-star"></i> Favorites </button><button className={`filter-tab ${activeCategory === 'recent' ? 'active':''}`}onClick={()=> setActiveCategory('recent')}><i className="fas fa-clock"></i> Recent </button><button className={`filter-tab ${activeCategory === 'scheduled' ? 'active':''}`}onClick={()=> setActiveCategory('scheduled')}><i className="fas fa-calendar-check"></i> Scheduled </button></div></div>{}<div className="reports-content">{}<div className="reports-sidebar">{Object.entries(filteredReports).map(([categoryId,category])=>(<div key={categoryId}className="report-category"><div className="category-header" onClick={()=> toggleCategory(categoryId)}style={{borderLeftColor:category.color}}><div className="category-title"><i className={`fas ${category.icon}`}style={{color:category.color}}></i><span>{category.name}</span><span className="report-count">{category.reports.length}</span></div><i className={`fas fa-chevron-${expandedCategories.has(categoryId)? 'up':'down'}`}></i></div>{expandedCategories.has(categoryId)&&(<div className="category-reports">{category.reports.map(report =>(<div key={report.id}className="report-item" onClick={()=>{runReport(report,categoryId);window.scrollTo({top:0,behavior:'smooth'})}}><div className="report-info"><h4>{report.name}</h4><p>{report.description}</p></div><div className="report-actions"><button className={`btn-favorite ${favoriteReports.has(report.id)? 'active':''}`}onClick={(e)=> toggleFavorite(report.id,e)}><i className={`${favoriteReports.has(report.id)? 'fas':'far'}fa-star`}></i></button><button className="btn-schedule" onClick={(e)=>{e.stopPropagation();scheduleReport(report)}}><i className="far fa-calendar-plus"></i></button><button className="btn-more"><i className="fas fa-ellipsis-v"></i></button></div></div>))}</div>)}</div>))}</div>{}<div className="report-display">{loading ?(<div className="report-loading"><div className="loading-animation"><i className="fas fa-chart-line fa-spin"></i></div><h3>Generating Report...</h3><p>Analyzing data and creating visualizations</p></div>):selectedReport ?(<div className="report-viewer"><div className="report-viewer-header"><div className="report-title"><h2>{selectedReport.name}</h2><p>Generated:{new Date(selectedReport.generatedAt).toLocaleString()}</p></div><div className="report-actions"><button className="btn-export" onClick={()=> exportReport('pdf')}><i className="fas fa-file-pdf"></i> Export PDF </button><button className="btn-export" onClick={()=> exportReport('excel')}><i className="fas fa-file-excel"></i> Export Excel </button><button className="btn-export" onClick={()=> exportReport('csv')}><i className="fas fa-file-csv"></i> Export CSV </button><button className="btn-email" onClick={()=> emailReport(selectedReport)}><i className="fas fa-envelope"></i> Email </button><button className="btn-print" onClick={()=> window.print()}><i className="fas fa-print"></i> Print </button></div></div><div className="report-content">{}{selectedReport.id === 'income-statement' &&(<IncomeStatementReport data={selectedReport.data}/>)}{selectedReport.id === 'payment-history' &&(<PaymentHistoryReport data={selectedReport.data}/>)}{}{}{!['income-statement','payment-history'].includes(selectedReport.id)&&(<div className="default-report"><pre>{JSON.stringify(selectedReport.data,null,2)}</pre></div>)}</div></div>):(<div className="report-empty"><i className="fas fa-chart-bar"></i><h3>Select a Report</h3><p>Choose a report from the left sidebar to view</p>{recentReports.length > 0 &&(<div className="recent-reports-quick"><h4>Recent Reports</h4><div className="recent-list">{recentReports.map(report =>(<button key={report.id}className="recent-report-btn" onClick={()=>{runReport(report,report.categoryId);window.scrollTo({top:0,behavior:'smooth'})}}><i className={`fas ${reportCategories[report.categoryId]?.icon}`}></i>{report.name}</button>))}</div></div>)}</div>)}</div></div></div>)};const IncomeStatementReport =({data})=>{const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)};return(<div className="income-statement-report"><h3>Income Statement</h3><div className="statement-section"><h4>Revenue</h4><div className="line-item"><span>Rental Income</span><span>{formatCurrency(data.income_statement?.revenue?.rental_income)}</span></div><div className="line-item"><span>Late Fees</span><span>{formatCurrency(data.income_statement?.revenue?.late_fees)}</span></div><div className="line-item"><span>Other Income</span><span>{formatCurrency(data.income_statement?.revenue?.other_income)}</span></div><div className="line-item total"><span>Total Revenue</span><span>{formatCurrency(data.income_statement?.revenue?.total)}</span></div></div><div className="statement-section"><h4>Expenses</h4><div className="line-item"><span>Maintenance</span><span>{formatCurrency(data.income_statement?.expenses?.maintenance)}</span></div><div className="line-item"><span>Utilities</span><span>{formatCurrency(data.income_statement?.expenses?.utilities)}</span></div><div className="line-item"><span>Management Fees</span><span>{formatCurrency(data.income_statement?.expenses?.management)}</span></div><div className="line-item"><span>Insurance</span><span>{formatCurrency(data.income_statement?.expenses?.insurance)}</span></div><div className="line-item"><span>Property Taxes</span><span>{formatCurrency(data.income_statement?.expenses?.taxes)}</span></div><div className="line-item total"><span>Total Expenses</span><span>{formatCurrency(data.income_statement?.expenses?.total)}</span></div></div><div className="statement-section"><div className="line-item net-income"><span>Net Income</span><span>{formatCurrency(data.income_statement?.net_income)}</span></div></div></div>)};const PaymentHistoryReport =({data})=>{const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)};return(<div className="payment-history-report"><h3>Payment Transaction History</h3><table className="report-table"><thead><tr><th>Date</th><th>Tenant</th><th>Property</th><th>Amount</th><th>Method</th><th>Status</th></tr></thead><tbody>{data.history?.payments?.map((payment,index)=>(<tr key={payment.id || index}><td>{new Date(payment.createdAt).toLocaleDateString()}</td><td>{payment.metadata?.tenant_name || 'Unknown'}</td><td>{payment.metadata?.property_name || 'Unknown'}</td><td>{formatCurrency(payment.amount)}</td><td>{payment.paymentMethod}</td><td><span className={`status-badge ${payment.status}`}>{payment.status}</span></td></tr>))}</tbody></table></div>)};window.AppModules = window.AppModules ||{};window.AppModules.ReportsCenter = ReportsCenter;

// MaintenanceCommand.jsx
const MaintenanceCommand =()=>{const [view,setView] = React.useState('kanban');const [workOrders,setWorkOrders] = React.useState([]);const [selectedOrder,setSelectedOrder] = React.useState(null);const [showChatInterface,setShowChatInterface] = React.useState(false);const [filters,setFilters] = React.useState({property:'all',status:'all',priority:'all',dateRange:'last30days'});const kanbanColumns ={new:{title:'New',color:'#3b82f6',icon:'fa-inbox'},triaging:{title:'AI Triaging',color:'#8b5cf6',icon:'fa-brain'},assigned:{title:'Vendor Assigned',color:'#f59e0b',icon:'fa-user-check'},in_progress:{title:'In Progress',color:'#10b981',icon:'fa-hammer'},awaiting_parts:{title:'Awaiting Parts',color:'#ec4899',icon:'fa-box'},pending_approval:{title:'Pending Approval',color:'#6366f1',icon:'fa-clipboard-check'},completed:{title:'Completed',color:'#059669',icon:'fa-check-circle'},closed:{title:'Closed',color:'#6b7280',icon:'fa-archive'}};React.useEffect(()=>{loadWorkOrders();const interval = setInterval(checkForUpdates,30000);return()=> clearInterval(interval)},[filters]);const loadWorkOrders = async()=>{setWorkOrders(generateMockWorkOrders())};const checkForUpdates = async()=>{const agingOrders = workOrders.filter(order =>{const daysOld = Math.floor((new Date()- new Date(order.created))/(1000 * 60 * 60 * 24));return order.status === 'new' && daysOld > 2});agingOrders.forEach(order =>{sendAutomaticReminder(order)})};const sendAutomaticReminder =(order)=>{};const generateMockWorkOrders =()=>{return [{id:'WO-2024-001',title:'Water leak under kitchen sink',property:'Sunset Apartments',unit:'203',tenant:{name:'Sarah Johnson',id:'tenant-1'},status:'in_progress',priority:'high',category:'plumbing',created:'2025-01-12T10:30:00',updated:'2025-01-14T14:20:00',vendor:{name:'AquaFix Plumbing',id:'vendor-1'},estimatedCost:350,aiScore:85,conversation:[{type:'tenant',message:'Water is leaking from under the sink',timestamp:'2025-01-12T10:30:00'},{type:'ai',message:'I can see this is urgent. Let me analyze the photos you provided.',timestamp:'2025-01-12T10:31:00'},{type:'ai',message:'Based on the images,this appears to be a pipe joint issue. Assigning AquaFix Plumbing.',timestamp:'2025-01-12T10:32:00'},{type:'vendor',message:'On my way. ETA 45 minutes.',timestamp:'2025-01-12T11:00:00'}],photos:2,voiceNotes:1},{id:'WO-2024-002',title:'AC not cooling - urgent',property:'Downtown Plaza',unit:'1205',tenant:{name:'Michael Chen',id:'tenant-2'},status:'awaiting_parts',priority:'high',category:'hvac',created:'2025-01-13T15:45:00',updated:'2025-01-14T09:00:00',vendor:{name:'CoolBreeze HVAC',id:'vendor-3'},estimatedCost:520,aiScore:78,partsOrdered:[{name:'Compressor Capacitor',cost:85,eta:'2025-01-15'}]},{id:'WO-2024-003',title:'Preventive HVAC maintenance',property:'Garden Complex',unit:'Common Area',tenant:null,status:'new',priority:'low',category:'hvac',created:'2025-01-14T08:00:00',updated:'2025-01-14T08:00:00',aiRecommendation:'Bundle with 3 other HVAC requests in Building A to save $200',recurring:true,recurrencePattern:'quarterly'},{id:'WO-2024-004',title:'Dishwasher not draining',property:'Sunset Apartments',unit:'105',tenant:{name:'Emily Davis',id:'tenant-3'},status:'completed',priority:'medium',category:'appliance',created:'2025-01-10T14:30:00',updated:'2025-01-11T16:45:00',completed:'2025-01-11T16:45:00',vendor:{name:'AppliancePro',id:'vendor-4'},actualCost:225,rating:null,awaitingFeedback:true}]};const KanbanView =()=>{const ordersByStatus = React.useMemo(()=>{const grouped ={};Object.keys(kanbanColumns).forEach(status =>{grouped[status] = workOrders.filter(order => order.status === status)});return grouped},[workOrders]);const handleDragStart =(e,order)=>{e.dataTransfer.setData('orderId',order.id)};const handleDragOver =(e)=>{e.preventDefault()};const handleDrop =(e,newStatus)=>{e.preventDefault();const orderId = e.dataTransfer.getData('orderId');updateOrderStatus(orderId,newStatus)};return React.createElement('div',{className:'kanban-board'},Object.entries(kanbanColumns).map(([status,config])=> React.createElement('div',{key:status,className:'kanban-column',onDragOver:handleDragOver,onDrop:(e)=> handleDrop(e,status)},[ React.createElement('div',{key:'header',className:'column-header'},[ React.createElement('div',{key:'title',className:'column-title'},[ React.createElement('i',{key:'icon',className:`fas ${config.icon}`,style:{color:config.color}}),React.createElement('span',{key:'text'},config.title),React.createElement('span',{key:'count',className:'column-count'},ordersByStatus[status].length)]),status === 'new' && React.createElement('button',{key:'ai-triage',className:'ai-triage-btn',onClick:()=> triageNewOrders()},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),' AI Triage All' ])]),React.createElement('div',{key:'cards',className:'column-cards'},ordersByStatus[status].map(order => React.createElement(WorkOrderCard,{key:order.id,order,onSelect:()=> setSelectedOrder(order),draggable:true,onDragStart:(e)=> handleDragStart(e,order)})))])))};const WorkOrderCard =({order,onSelect,draggable,onDragStart})=>{const priorityColors ={low:'#10b981',medium:'#f59e0b',high:'#ef4444',urgent:'#dc2626'};return React.createElement('div',{className:'work-order-card',onClick:onSelect,draggable,onDragStart},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('span',{key:'id',className:'order-id'},order.id),React.createElement('span',{key:'priority',className:'priority-dot',style:{backgroundColor:priorityColors[order.priority]},title:`${order.priority}priority`})]),React.createElement('h4',{key:'title',className:'order-title'},order.title),React.createElement('div',{key:'meta',className:'order-meta'},[ React.createElement('span',{key:'location'},[ React.createElement('i',{key:'icon',className:'fas fa-building'}),` ${order.property}- ${order.unit}` ]),order.tenant && React.createElement('span',{key:'tenant'},[ React.createElement('i',{key:'icon',className:'fas fa-user'}),` ${order.tenant.name}` ])]),order.vendor && React.createElement('div',{key:'vendor',className:'order-vendor'},[ React.createElement('i',{key:'icon',className:'fas fa-hard-hat'}),` ${order.vendor.name}` ]),React.createElement('div',{key:'footer',className:'card-footer'},[ React.createElement('span',{key:'time',className:'time-ago'},getTimeAgo(order.updated)),React.createElement('div',{key:'indicators',className:'indicators'},[ order.photos > 0 && React.createElement('i',{key:'photos',className:'fas fa-camera',title:`${order.photos}photos`}),order.voiceNotes > 0 && React.createElement('i',{key:'voice',className:'fas fa-microphone',title:`${order.voiceNotes}voice notes`}),order.conversation && React.createElement('i',{key:'chat',className:'fas fa-comments',title:'Has conversation'}),order.awaitingFeedback && React.createElement('i',{key:'feedback',className:'fas fa-star',title:'Awaiting feedback',style:{color:'#f59e0b'}})])])])};const TimelineView =()=>{const sortedOrders = [...workOrders].sort((a,b)=> new Date(b.updated)- new Date(a.updated));return React.createElement('div',{className:'timeline-view'},sortedOrders.map((order,index)=> React.createElement('div',{key:order.id,className:'timeline-item'},[ React.createElement('div',{key:'marker',className:'timeline-marker'},[ React.createElement('div',{key:'dot',className:`marker-dot ${order.status}`,style:{backgroundColor:kanbanColumns[order.status]?.color}}),index < sortedOrders.length - 1 && React.createElement('div',{key:'line',className:'timeline-line'})]),React.createElement('div',{key:'content',className:'timeline-content'},[ React.createElement('div',{key:'time',className:'timeline-time'},formatDateTime(order.updated)),React.createElement(WorkOrderCard,{key:'card',order,onSelect:()=> setSelectedOrder(order)})])])))};const AIChatInterface =()=>{const [query,setQuery] = React.useState('');const [chatHistory,setChatHistory] = React.useState([]);const [isProcessing,setIsProcessing] = React.useState(false);const handleQuery = async()=>{if(!query.trim())return;const userMessage ={type:'user',content:query,timestamp:new Date()};setChatHistory(prev => [...prev,userMessage]);setQuery('');setIsProcessing(true);const response = await processAIQuery(query);const aiMessage ={type:'ai',content:response,timestamp:new Date()};setChatHistory(prev => [...prev,aiMessage]);setIsProcessing(false)};return React.createElement('div',{className:'ai-chat-interface'},[ React.createElement('div',{key:'header',className:'chat-header'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),' AI Maintenance Assistant' ]),React.createElement('button',{key:'close',className:'close-btn',onClick:()=> setShowChatInterface(false)},React.createElement('i',{className:'fas fa-times'}))]),React.createElement('div',{key:'history',className:'chat-history'},chatHistory.map((msg,index)=> React.createElement('div',{key:index,className:`chat-message ${msg.type}`},[ React.createElement('div',{key:'avatar',className:'message-avatar'},React.createElement('i',{className:`fas fa-${msg.type === 'user' ? 'user':'robot'}`})),React.createElement('div',{key:'content',className:'message-content'},[ React.createElement('div',{key:'text',className:'message-text'},msg.content),React.createElement('div',{key:'time',className:'message-time'},formatTime(msg.timestamp))])]))),React.createElement('div',{key:'input',className:'chat-input'},[ React.createElement('input',{key:'field',type:'text',placeholder:'Ask about maintenance history,vendors,or insights...',value:query,onChange:(e)=> setQuery(e.target.value),onKeyPress:(e)=> e.key === 'Enter' && handleQuery()}),React.createElement('button',{key:'send',onClick:handleQuery,disabled:isProcessing || !query.trim()},isProcessing ? React.createElement('i',{className:'fas fa-spinner fa-spin'}):React.createElement('i',{className:'fas fa-paper-plane'}))])])};const processAIQuery = async(query)=>{await new Promise(resolve => setTimeout(resolve,1000));const lowerQuery = query.toLowerCase();if(lowerQuery.includes('roof')&& lowerQuery.includes('maple')){return `Based on maintenance records,the roof at Maple Apartments was last repaired on March 15,2024. The work was done by SkyHigh Roofing for $12,500. It was a partial replacement of the west section due to storm damage. The next scheduled inspection is due in September 2025.`}if(lowerQuery.includes('plumber')&& lowerQuery.includes('fast')){return `Analysis of 127 plumbing jobs shows that AquaFix Plumbing resolves drain issues 30% faster than the average(2.3 hours vs 3.3 hours). They also have a 98% first-time fix rate. PowerDrain Plumbing is second fastest at 2.8 hours average.`}if(lowerQuery.includes('maintenance')&& lowerQuery.includes('cost')){return `This month's maintenance costs are $18,420,which is 12% below the monthly average of $20,932. HVAC repairs account for 35% of costs,followed by plumbing at 28%. I've identified an opportunity to save ~$2,400/month by bundling recurring maintenance tasks.`}return `I can help you search maintenance records,analyze vendor performance,track costs,and identify patterns. Try asking specific questions like "What's the repair history for unit 203?" or "Which vendor handles electrical issues fastest?"`};const updateOrderStatus =(orderId,newStatus)=>{setWorkOrders(prev => prev.map(order => order.id === orderId ?{...order,status:newStatus,updated:new Date().toISOString()}:order));if(newStatus === 'completed'){setTimeout(()=> requestTenantFeedback(orderId),300000)}};const requestTenantFeedback =(orderId)=>{const order = workOrders.find(o => o.id === orderId);if(order && order.tenant){}};const triageNewOrders =()=>{const newOrders = workOrders.filter(o => o.status === 'new');newOrders.forEach(order =>{setTimeout(()=>{updateOrderStatus(order.id,'triaging');setTimeout(()=>{updateOrderStatus(order.id,'assigned')},2000)},1000)})};const getTimeAgo =(dateString)=>{const date = new Date(dateString);const now = new Date();const diff = now - date;const hours = Math.floor(diff /(1000 * 60 * 60));if(hours < 1)return 'Just now';if(hours < 24)return `${hours}h ago`;const days = Math.floor(hours / 24);return `${days}d ago`};const formatDateTime =(dateString)=>{const date = new Date(dateString);return date.toLocaleDateString()+ ' ' + date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})};const formatTime =(date)=>{return date.toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})};return React.createElement('div',{className:'maintenance-command'},[ React.createElement('div',{key:'header',className:'command-header'},[ React.createElement('div',{key:'title-section'},[ React.createElement('h1',{key:'title'},'Maintenance Command Center'),React.createElement('p',{key:'subtitle'},'Complete visibility and AI-powered insights')]),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'chat',className:'btn btn-secondary',onClick:()=> setShowChatInterface(true)},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),' AI Assistant' ]),React.createElement('button',{key:'new',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),' New Request' ])])]),React.createElement('div',{key:'tabs',className:'view-tabs'},[{id:'kanban',label:'Kanban Board',icon:'fa-columns'},{id:'timeline',label:'Timeline',icon:'fa-stream'},{id:'analytics',label:'Analytics',icon:'fa-chart-bar'},{id:'history',label:'History',icon:'fa-history'}].map(tab => React.createElement('button',{key:tab.id,className:`view-tab ${view === tab.id ? 'active':''}`,onClick:()=> setView(tab.id)},[ React.createElement('i',{key:'icon',className:`fas ${tab.icon}`}),' ',tab.label ]))),React.createElement('div',{key:'content',className:'command-content'},view === 'kanban' ? KanbanView():view === 'timeline' ? TimelineView():React.createElement('div',{className:'coming-soon'},'Coming soon...')),selectedOrder && React.createElement(WorkOrderDetail,{key:'detail',order:selectedOrder,onClose:()=> setSelectedOrder(null),onUpdate:(updatedOrder)=>{setWorkOrders(prev => prev.map(o => o.id === updatedOrder.id ? updatedOrder:o));setSelectedOrder(updatedOrder)}}),showChatInterface && AIChatInterface()])};const WorkOrderDetail =({order,onClose,onUpdate})=>{const [activeTab,setActiveTab] = React.useState('conversation');return React.createElement('div',{className:'work-order-detail-modal'},[ React.createElement('div',{key:'backdrop',className:'modal-backdrop',onClick:onClose}),React.createElement('div',{key:'content',className:'modal-content'},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title'},order.title),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},React.createElement('i',{className:'fas fa-times'}))]),React.createElement('div',{key:'tabs',className:'detail-tabs'},['conversation','details','history','costs'].map(tab => React.createElement('button',{key:tab,className:`detail-tab ${activeTab === tab ? 'active':''}`,onClick:()=> setActiveTab(tab)},tab.charAt(0).toUpperCase()+ tab.slice(1)))),React.createElement('div',{key:'tab-content',className:'tab-content'},activeTab === 'conversation' && order.conversation ? React.createElement('div',{className:'conversation-log'},order.conversation.map((msg,idx)=> React.createElement('div',{key:idx,className:`conversation-message ${msg.type}`},[ React.createElement('div',{key:'avatar',className:'msg-avatar'},React.createElement('i',{className:`fas fa-${msg.type === 'tenant' ? 'user':msg.type === 'vendor' ? 'hard-hat':'robot'}`})),React.createElement('div',{key:'content'},[ React.createElement('div',{key:'text',className:'msg-text'},msg.message),React.createElement('div',{key:'time',className:'msg-time'},new Date(msg.timestamp).toLocaleString())])]))):React.createElement('div',{className:'empty-state'},'No data available'))])])};window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceCommand = MaintenanceCommand;

// PropertiesV2.jsx
const PropertiesV2 = ComponentFactory.createComponent('PropertiesV2',{privateHelpers:{calculateOccupancy:(properties)=>{if(!properties.length)return 0;const totalUnits = properties.reduce((sum,p)=> sum +(p.total_units || 0),0);const occupiedUnits = properties.reduce((sum,p)=> sum +(p.occupied_units || 0),0);return totalUnits > 0 ? Math.round((occupiedUnits / totalUnits)* 100):0},calculateRevenue:(properties)=>{return properties.reduce((sum,p)=> sum +(p.monthly_revenue || 0),0)},formatRevenue:(amount)=>{if(amount >= 1000000)return `${(amount / 1000000).toFixed(1)}M`;if(amount >= 1000)return `${(amount / 1000).toFixed(1)}K`;return amount.toString()},filterProperties:(properties,filters)=>{return properties.filter(property =>{if(filters.search){const searchTerm = filters.search.toLowerCase();const searchText = `${property.name}${property.address}${property.description || ''}`.toLowerCase();if(!searchText.includes(searchTerm))return false}if(filters.type !== 'all' && property.property_type !== filters.type){return false}if(filters.status !== 'all' && property.status !== filters.status){return false}const occupancyRate = property.occupancy?.rate || 0;if(occupancyRate < filters.occupancyRange[0] || occupancyRate > filters.occupancyRange[1]){return false}return true})},generateMockInsights:()=> [{type:'alert',icon:'fa-exclamation-triangle',title:'3 Properties Need Attention',description:'High vacancy rates detected',actionable:true},{type:'success',icon:'fa-chart-line',title:'Revenue Up 12%',description:'Compared to last month',actionable:false},{type:'info',icon:'fa-lightbulb',title:'Optimization Available',description:'2 properties below market rent',actionable:true}],generatePropertyInsights:(property)=>{const insights = [];if(property.occupancy?.rate < 70){insights.push({icon:'fa-exclamation-triangle',message:'Low occupancy - consider marketing review',type:'warning'})}if(property.average_rent < 2500){insights.push({icon:'fa-arrow-up',message:'Rent increase opportunity identified',type:'info'})}if(property.maintenance?.open > 5){insights.push({icon:'fa-wrench',message:'High maintenance backlog',type:'warning'})}return insights}},defaultProps:{showInsights:true,defaultView:'grid'},withPerformanceTracking:true,withErrorBoundary:true})((props,helpers)=>{const{useLocalState,useAsyncState,formatCurrency,formatDate,classNames,calculateOccupancy,calculateRevenue,formatRevenue,filterProperties,generateMockInsights,generatePropertyInsights}= helpers;const [state,updateState] = useLocalState({view:props.defaultView,filters:{search:'',type:'all',status:'all',occupancyRange:[0,100]},expandedCards:new Set()});const propertiesData = useAsyncState(async()=>{try{const response = await window.PropertyService.getProperties();return response.properties.map(property =>({...property,metrics:{occupancyRate:property.occupancy?.rate || 0,monthlyRevenue:property.monthly_revenue || 0,revenueChange:Math.random()* 20 - 10},insights:generatePropertyInsights(property),recentActivity:[{timestamp:new Date(Date.now()- Math.random()* 86400000),description:'New lease signed'},{timestamp:new Date(Date.now()- Math.random()* 172800000),description:'Maintenance completed'}],upcomingLeaseExpirations:Math.floor(Math.random()* 5),scheduledMaintenance:Math.floor(Math.random()* 8)}))}catch(error){console.error('Failed to load properties:',error);return []}},[]);const properties = propertiesData.data || [];const filteredProperties = filterProperties(properties,state.filters);const insights = generateMockInsights();const updateFilter =(key,value)=>{updateState({filters:{...state.filters,[key]:value}})};const handlePropertyAction =(action,propertyId)=>{switch(action){case 'view':break;case 'edit':break;case 'reports':break}};const toggleCardExpansion =(propertyId)=>{const newExpanded = new Set(state.expandedCards);if(newExpanded.has(propertyId)){newExpanded.delete(propertyId)}else{newExpanded.add(propertyId)}updateState({expandedCards:newExpanded})};const renderInsightsBar =()=>{if(!props.showInsights)return null;return React.createElement('div',{className:'insights-bar'},insights.map((insight,index)=> React.createElement('div',{key:index,className:`insight-card ${insight.type}`},[ React.createElement('i',{key:'icon',className:`fas ${insight.icon}`}),React.createElement('div',{key:'content'},[ React.createElement('strong',{key:'title'},insight.title),React.createElement('p',{key:'desc'},insight.description)]),insight.actionable && React.createElement('button',{key:'action',className:'btn-link'},'View')])))};const renderHeader =()=>{const occupancy = calculateOccupancy(properties);const revenue = calculateRevenue(properties);return React.createElement('div',{className:'page-header-v2'},[ React.createElement('div',{key:'main',className:'header-main'},[ React.createElement('h1',{key:'title'},'Properties'),React.createElement('div',{key:'stats',className:'header-stats'},[ React.createElement('span',{key:'total',className:'stat'},[ React.createElement('strong',{key:'val'},properties.length),' Total' ]),React.createElement('span',{key:'occupied',className:'stat'},[ React.createElement('strong',{key:'val'},`${occupancy}%`),' Occupied' ]),React.createElement('span',{key:'revenue',className:'stat'},[ React.createElement('strong',{key:'val'},`$${formatRevenue(revenue)}`),' Monthly' ])])]),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'import',className:'btn btn-outline'},[ React.createElement('i',{key:'icon',className:'fas fa-file-import'}),' Import' ]),React.createElement('button',{key:'add',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),' Add Property' ])])])};const renderFiltersBar =()=>{return React.createElement('div',{className:'filters-bar-v2'},[ React.createElement('div',{key:'search',className:'search-box-v2'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search properties,addresses,units...',value:state.filters.search,onChange:(e)=> updateFilter('search',e.target.value)}),state.filters.search && React.createElement('span',{key:'results',className:'search-results'},`${filteredProperties.length}results`)]),React.createElement('div',{key:'chips',className:'filter-chips'},[ React.createElement('select',{key:'type',value:state.filters.type,onChange:(e)=> updateFilter('type',e.target.value),className:'filter-select'},[ React.createElement('option',{key:'all',value:'all'},'All Types'),React.createElement('option',{key:'res',value:'residential'},'Residential'),React.createElement('option',{key:'com',value:'commercial'},'Commercial'),React.createElement('option',{key:'mixed',value:'mixed'},'Mixed Use')]),React.createElement('select',{key:'status',value:state.filters.status,onChange:(e)=> updateFilter('status',e.target.value),className:'filter-select'},[ React.createElement('option',{key:'all',value:'all'},'All Status'),React.createElement('option',{key:'active',value:'active'},'Active'),React.createElement('option',{key:'maint',value:'maintenance'},'Maintenance'),React.createElement('option',{key:'inactive',value:'inactive'},'Inactive')])]),React.createElement('div',{key:'views',className:'view-toggles'},[ React.createElement('button',{key:'grid',className:classNames('view-btn',state.view === 'grid' && 'active'),onClick:()=> updateState({view:'grid'})},React.createElement('i',{className:'fas fa-th'})),React.createElement('button',{key:'table',className:classNames('view-btn',state.view === 'table' && 'active'),onClick:()=> updateState({view:'table'})},React.createElement('i',{className:'fas fa-list'})),React.createElement('button',{key:'map',className:classNames('view-btn',state.view === 'map' && 'active'),onClick:()=> updateState({view:'map'})},React.createElement('i',{className:'fas fa-map'}))])])};const renderPropertyCard =(property)=>{const isExpanded = state.expandedCards.has(property.id);const occupancyStatus = property.metrics.occupancyRate >= 90 ? 'excellent':property.metrics.occupancyRate >= 70 ? 'good':'needs-attention';return React.createElement('div',{key:property.id,className:`property-card-v2 ${occupancyStatus}`},[ React.createElement('div',{key:'actions',className:'quick-actions'},[ React.createElement('button',{key:'view',className:'action-btn',onClick:()=> handlePropertyAction('view',property.id),title:'View Details'},React.createElement('i',{className:'fas fa-eye'})),React.createElement('button',{key:'edit',className:'action-btn',onClick:()=> handlePropertyAction('edit',property.id),title:'Edit'},React.createElement('i',{className:'fas fa-edit'})),React.createElement('button',{key:'reports',className:'action-btn',onClick:()=> handlePropertyAction('reports',property.id),title:'Reports'},React.createElement('i',{className:'fas fa-chart-bar'}))]),React.createElement('div',{key:'header',className:'property-header'},[ React.createElement('h3',{key:'name'},property.name),React.createElement('span',{key:'status',className:`status-badge ${property.status}`},property.status)]),React.createElement('div',{key:'metrics',className:'property-metrics'},[ React.createElement('div',{key:'units',className:'metric'},[ React.createElement('span',{key:'val',className:'metric-value'},property.total_units),React.createElement('span',{key:'label',className:'metric-label'},'Units')]),React.createElement('div',{key:'occ',className:`metric ${occupancyStatus}`},[ React.createElement('span',{key:'val',className:'metric-value'},`${property.metrics.occupancyRate}%`),React.createElement('span',{key:'label',className:'metric-label'},'Occupied')]),React.createElement('div',{key:'rev',className:'metric'},[ React.createElement('span',{key:'val',className:'metric-value'},`$${formatRevenue(property.metrics.monthlyRevenue)}`),React.createElement('span',{key:'label',className:'metric-label'},'Revenue')])]),property.insights && property.insights.length > 0 && React.createElement('div',{key:'insights',className:'property-insights'},[ React.createElement('div',{key:'insight',className:'insight'},[ React.createElement('i',{key:'icon',className:`fas ${property.insights[0].icon}`}),React.createElement('span',{key:'msg'},property.insights[0].message)])]),React.createElement('button',{key:'expand',className:'expand-btn',onClick:()=> toggleCardExpansion(property.id)},[ isExpanded ? 'Less':'More',' Details ',React.createElement('i',{key:'icon',className:`fas fa-chevron-${isExpanded ? 'up':'down'}`})]),isExpanded && React.createElement('div',{key:'details',className:'expanded-details'},[ React.createElement('div',{key:'activity',className:'detail-section'},[ React.createElement('h4',{key:'title'},'Recent Activity'),React.createElement('ul',{key:'list',className:'activity-list'},property.recentActivity.map((activity,idx)=> React.createElement('li',{key:idx},[ React.createElement('span',{key:'time',className:'activity-time'},formatDate(activity.timestamp)),React.createElement('span',{key:'text',className:'activity-text'},activity.description)])))]),React.createElement('div',{key:'upcoming',className:'detail-section'},[ React.createElement('h4',{key:'title'},'Upcoming'),React.createElement('ul',{key:'list',className:'upcoming-list'},[ React.createElement('li',{key:'leases'},[ React.createElement('i',{key:'icon',className:'fas fa-calendar'}),` ${property.upcomingLeaseExpirations}lease expirations` ]),React.createElement('li',{key:'maint'},[ React.createElement('i',{key:'icon',className:'fas fa-wrench'}),` ${property.scheduledMaintenance}maintenance tasks` ])])])])])};const renderContent =()=>{if(propertiesData.loading){return React.createElement('div',{className:'loading-state'},[ React.createElement('div',{key:'spinner',className:'spinner'}),React.createElement('p',{key:'text'},'Loading properties...')])}if(propertiesData.error){return React.createElement('div',{className:'error-state'},[ React.createElement('h3',{key:'title'},'Error Loading Properties'),React.createElement('p',{key:'message'},propertiesData.error)])}return React.createElement('div',{className:'properties-content'},[ state.view === 'grid' && React.createElement('div',{key:'grid',className:'properties-grid-v2'},filteredProperties.map(renderPropertyCard)),state.view === 'table' && React.createElement('div',{key:'table',className:'properties-table-v2'},'Table view coming soon...'),state.view === 'map' && React.createElement('div',{key:'map',className:'properties-map'},'Map view coming soon...')])};return React.createElement('div',{className:'properties-v2'},[ renderInsightsBar(),renderHeader(),renderFiltersBar(),renderContent()])});window.AppModules = window.AppModules ||{};window.AppModules.PropertiesV2 = PropertiesV2;

// Units.jsx
const Units =()=>{const [units,setUnits] = React.useState([]);const [properties,setProperties] = React.useState([]);const [selectedProperty,setSelectedProperty] = React.useState('all');const [viewMode,setViewMode] = React.useState('grid');const [filters,setFilters] = React.useState({search:'',status:'all',type:'all'});const [showAddUnit,setShowAddUnit] = React.useState(false);const [viewingUnit,setViewingUnit] = React.useState(null);const [editingUnit,setEditingUnit] = React.useState(null);const mockUnits = [{id:1,unit_number:'101',property_id:1,property_name:'Sunset Apartments',status:'occupied',bedrooms:2,bathrooms:2,square_feet:950,rent_amount:2200,market_rent:2400,tenant_name:'John Smith',lease_end_date:'2024-10-15',floor:1},{id:2,unit_number:'102',property_id:1,property_name:'Sunset Apartments',status:'vacant',bedrooms:1,bathrooms:1,square_feet:750,rent_amount:1800,market_rent:1850,days_vacant:15,floor:1},{id:3,unit_number:'201',property_id:1,property_name:'Sunset Apartments',status:'maintenance',bedrooms:3,bathrooms:2,square_feet:1200,rent_amount:2800,market_rent:2900,floor:2},{id:4,unit_number:'202',property_id:1,property_name:'Sunset Apartments',status:'occupied',bedrooms:2,bathrooms:2,square_feet:950,rent_amount:2250,market_rent:2400,tenant_name:'Sarah Johnson',lease_end_date:'2025-03-20',floor:2},{id:5,unit_number:'A1',property_id:2,property_name:'Downtown Office Plaza',status:'vacant',bedrooms:0,bathrooms:2,square_feet:2500,rent_amount:5000,market_rent:5200,days_vacant:45,floor:1}];const mockProperties = [{id:1,name:'Sunset Apartments',total_units:24},{id:2,name:'Downtown Office Plaza',total_units:8},{id:3,name:'Garden View Townhomes',total_units:16}];React.useEffect(()=>{setUnits(mockUnits);setProperties(mockProperties)},[]);const calculateOccupancy =(unitsList)=>{if(!unitsList.length)return 0;const occupied = unitsList.filter(u => u.status === 'occupied').length;return Math.round((occupied / unitsList.length)* 100)};const countVacant =(unitsList)=>{return unitsList.filter(u => u.status === 'vacant').length};const calculateAvgRent =(unitsList)=>{if(!unitsList.length)return '$0';const total = unitsList.reduce((sum,u)=> sum +(u.rent_amount || 0),0);return `$${Math.round(total / unitsList.length).toLocaleString()}`};const countByStatus =(unitsList,status)=>{return unitsList.filter(u => u.status === status).length};const daysBetween =(date1,date2)=>{const oneDay = 24 * 60 * 60 * 1000;return Math.round(Math.abs((date1 - date2)/ oneDay))};const formatDate =(dateString)=>{if(!dateString)return '';const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};const filteredUnits = units.filter(unit =>{if(selectedProperty !== 'all' && unit.property_id !== parseInt(selectedProperty)){return false}if(filters.status !== 'all' && unit.status !== filters.status){return false}if(filters.search){const searchLower = filters.search.toLowerCase();const searchableText = `${unit.unit_number}${unit.property_name}${unit.tenant_name || ''}`.toLowerCase();if(!searchableText.includes(searchLower)){return false}}return true});return(<div className="units-page">{}<div className="insights-bar"><InsightCard type="alert" icon="fa-door-open" title="5 Units Vacant > 30 Days" subtitle="Potential revenue loss:$7,500/mo" action="View Units" onClick={()=> setFilters({...filters,status:'vacant'})}/><InsightCard type="warning" icon="fa-tools" title="3 Units Need Maintenance" subtitle="Schedule repairs to avoid vacancies" action="Schedule" /><InsightCard type="success" icon="fa-dollar-sign" title="Market Rent Opportunity" subtitle="12 units below market rate" action="Analyze" /></div>{}<div className="page-header"><div className="header-content"><h1>Units Management</h1><div className="header-stats"><StatBadge label="Total Units" value={units.length}icon="fa-door-open" /><StatBadge label="Occupied" value={`${calculateOccupancy(units)}%`}icon="fa-users" trend="+2.3%" trendUp={true}/><StatBadge label="Available Now" value={countVacant(units)}icon="fa-key" /><StatBadge label="Avg Rent" value={calculateAvgRent(units)}icon="fa-dollar-sign" trend="+$45" trendUp={true}/></div></div><div className="header-actions"><button className="btn btn-secondary"><i className="fas fa-upload"></i> Import Units </button><button className="btn btn-primary" onClick={()=> setShowAddUnit(true)}><i className="fas fa-plus"></i> Add Unit </button></div></div>{}<div className="filters-bar"><div className="property-selector"><select value={selectedProperty}onChange={(e)=> setSelectedProperty(e.target.value)}className="property-dropdown" ><option value="all">All Properties</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}({prop.total_units}units)</option>))}</select></div><div className="search-box"><i className="fas fa-search"></i><input type="text" placeholder="Search unit number,tenant,features..." value={filters.search}onChange={(e)=> setFilters({...filters,search:e.target.value})}/></div><div className="filter-pills"><FilterPill label="All Status" active={filters.status === 'all'}onClick={()=> setFilters({...filters,status:'all'})}count={units.length}/><FilterPill label="Vacant" active={filters.status === 'vacant'}onClick={()=> setFilters({...filters,status:'vacant'})}count={countByStatus(units,'vacant')}color="success" /><FilterPill label="Occupied" active={filters.status === 'occupied'}onClick={()=> setFilters({...filters,status:'occupied'})}count={countByStatus(units,'occupied')}color="primary" /><FilterPill label="Maintenance" active={filters.status === 'maintenance'}onClick={()=> setFilters({...filters,status:'maintenance'})}count={countByStatus(units,'maintenance')}color="warning" /></div><div className="view-toggle"><button className={`view-btn ${viewMode === 'grid' ? 'active':''}`}onClick={()=> setViewMode('grid')}><i className="fas fa-th"></i></button><button className={`view-btn ${viewMode === 'list' ? 'active':''}`}onClick={()=> setViewMode('list')}><i className="fas fa-list"></i></button><button className={`view-btn ${viewMode === 'floor' ? 'active':''}`}onClick={()=> setViewMode('floor')}><i className="fas fa-building"></i></button></div></div>{}{viewMode === 'grid' &&(<div className="units-grid">{filteredUnits.map(unit =>(<UnitCard key={unit.id}unit={unit}onView={()=> setViewingUnit(unit)}onEdit={()=> setEditingUnit(unit)}daysBetween={daysBetween}formatDate={formatDate}/>))}</div>)}{viewMode === 'list' &&(<UnitsTable units={filteredUnits}onView={setViewingUnit}onEdit={setEditingUnit}/>)}{viewMode === 'floor' &&(<FloorPlanView units={filteredUnits}onUnitClick={setViewingUnit}/>)}</div>)};const InsightCard =({type,icon,title,subtitle,action,onClick})=>{return(<div className={`insight-card ${type}`}><div className={`insight-icon ${type}`}><i className={`fas ${icon}`}></i></div><div className="insight-content"><h4>{title}</h4><p>{subtitle}</p></div>{action &&(<button className="insight-action" onClick={onClick}>{action}</button>)}</div>)};const StatBadge =({label,value,icon,trend,trendUp})=>{return(<div className="stat-badge"><i className={`fas ${icon}`}></i><div className="stat-content"><span className="stat-value">{value}</span><span className="stat-label">{label}</span>{trend &&(<span className={`stat-trend ${trendUp ? 'up':'down'}`}><i className={`fas fa-arrow-${trendUp ? 'up':'down'}`}></i>{trend}</span>)}</div></div>)};const FilterPill =({label,active,onClick,count,color})=>{return(<button className={`filter-pill ${active ? 'active':''}${color || ''}`}onClick={onClick}>{label}({count})</button>)};const UnitCard =({unit,onView,onEdit,daysBetween,formatDate})=>{const statusColors ={vacant:'success',occupied:'primary',maintenance:'warning'};const isAvailableSoon = unit.status === 'occupied' && unit.lease_end_date && daysBetween(new Date(),new Date(unit.lease_end_date))<= 60;return(<div className={`unit-card ${unit.status}`}>{}<div className="unit-actions"><button className="action-btn" onClick={onView}><i className="fas fa-eye"></i></button><button className="action-btn" onClick={onEdit}><i className="fas fa-edit"></i></button>{unit.status === 'vacant' &&(<button className="action-btn primary"><i className="fas fa-user-plus"></i></button>)}</div>{}<div className="unit-header"><h3 className="unit-number">{unit.unit_number}</h3><span className={`status-badge ${statusColors[unit.status]}`}>{unit.status}</span></div>{}<p className="unit-property"><i className="fas fa-building"></i>{unit.property_name}</p>{}<div className="unit-details"><div className="detail"><i className="fas fa-bed"></i><span>{unit.bedrooms}bed</span></div><div className="detail"><i className="fas fa-bath"></i><span>{unit.bathrooms}bath</span></div><div className="detail"><i className="fas fa-ruler-combined"></i><span>{unit.square_feet}sqft</span></div></div>{}{unit.status === 'occupied' &&(<div className="tenant-info"><div className="tenant-avatar">{unit.tenant_name?.charAt(0)}</div><div><p className="tenant-name">{unit.tenant_name}</p><p className="lease-info"> Lease ends:{formatDate(unit.lease_end_date)}{isAvailableSoon &&(<span className="badge warning">Ending Soon</span>)}</p></div></div>)}{unit.status === 'vacant' &&(<div className="vacancy-info"><p className="days-vacant"><i className="fas fa-calendar-times"></i> Vacant for{unit.days_vacant}days </p><p className="potential-loss"> Lost revenue:${Math.round(unit.days_vacant *(unit.rent_amount / 30))}</p></div>)}{}<div className="rent-section"><div className="rent-amount"><span className="amount">${unit.rent_amount}</span><span className="period">/month</span></div>{unit.market_rent && unit.rent_amount < unit.market_rent &&(<div className="market-comparison"><i className="fas fa-chart-line"></i> Below market by ${unit.market_rent - unit.rent_amount}</div>)}</div>{}<div className="unit-footer">{unit.status === 'vacant' &&(<><button className="btn-small primary"><i className="fas fa-bullhorn"></i> List Unit </button><button className="btn-small secondary"><i className="fas fa-calendar"></i> Schedule Tour </button></>)}{unit.status === 'occupied' &&(<><button className="btn-small secondary"><i className="fas fa-tools"></i> Maintenance </button><button className="btn-small secondary"><i className="fas fa-envelope"></i> Message </button></>)}</div></div>)};const UnitsTable =({units,onView,onEdit})=>{return(<div className="units-table-container"><table className="units-table"><thead><tr><th>Unit</th><th>Property</th><th>Type</th><th>Status</th><th>Tenant</th><th>Rent</th><th>Actions</th></tr></thead><tbody>{units.map(unit =>(<tr key={unit.id}><td className="unit-number">{unit.unit_number}</td><td>{unit.property_name}</td><td>{unit.bedrooms}BR/{unit.bathrooms}BA</td><td><span className={`status-badge ${unit.status}`}>{unit.status}</span></td><td>{unit.tenant_name || '-'}</td><td>${unit.rent_amount}</td><td><button className="action-btn" onClick={()=> onView(unit)}><i className="fas fa-eye"></i></button><button className="action-btn" onClick={()=> onEdit(unit)}><i className="fas fa-edit"></i></button></td></tr>))}</tbody></table></div>)};const FloorPlanView =({units,onUnitClick})=>{const floors = [...new Set(units.map(u => u.floor))].sort();return(<div className="floor-plan-container">{floors.map(floor =>(<div key={floor}className="floor-section"><h3>Floor{floor}</h3><div className="floor-units">{units .filter(u => u.floor === floor).map(unit =>(<div key={unit.id}className={`floor-unit ${unit.status}`}onClick={()=> onUnitClick(unit)}><span className="unit-label">{unit.unit_number}</span><span className="unit-type">{unit.bedrooms}BR</span></div>))}</div></div>))}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.Units = Units;

// AIVendorMatching.jsx
const AIVendorMatching =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{weekday:'short',month:'short',day:'numeric',year:'numeric'})},formatTime:(date)=>{return new Date(date).toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('AIVendorMatching')((props,helpers)=>{const{useLocalState,formatCurrency,formatDate,formatTime}= helpers;const{workOrder,vendors,tenantSchedule,onMatch}= props;const [state,updateState] = useLocalState({matchingResults:[],selectedVendor:null,proposedSchedule:[],aiRecommendation:null,matchingInProgress:true,confidenceScore:0,alternativeOptions:[],schedulingConflicts:[]});React.useEffect(()=>{performAIMatching()},[workOrder,vendors]);const performAIMatching = async()=>{updateState({matchingInProgress:true});await new Promise(resolve => setTimeout(resolve,1500));const matches = vendors.map(vendor =>{const score = calculateVendorScore(vendor,workOrder);const availability = checkVendorAvailability(vendor,workOrder);const estimatedCost = estimateJobCost(vendor,workOrder);const reasons = generateMatchReasons(vendor,workOrder,score);return{vendor,score,availability,estimatedCost,reasons,responseTime:vendor.avgResponseTime || 30,completionTime:estimateCompletionTime(vendor,workOrder)}}).sort((a,b)=> b.score - a.score);const topMatch = matches[0];const aiRecommendation = generateAIRecommendation(topMatch,workOrder,tenantSchedule);const proposedSchedule = generateScheduleOptions(topMatch,workOrder,tenantSchedule);updateState({matchingResults:matches,aiRecommendation,proposedSchedule,selectedVendor:topMatch.vendor,confidenceScore:topMatch.score,alternativeOptions:matches.slice(1,4),matchingInProgress:false})};const calculateVendorScore =(vendor,workOrder)=>{let score = 0;const weights ={expertise:0.25,availability:0.20,proximity:0.15,rating:0.15,cost:0.15,responseTime:0.10};if(vendor.specialties.some(s => s.toLowerCase().includes(workOrder.category))){score += 100 * weights.expertise}if(vendor.availability === 'high'){score += 100 * weights.availability}else if(vendor.availability === 'medium'){score += 60 * weights.availability}else{score += 20 * weights.availability}score +=(vendor.rating / 5)* 100 * weights.rating;const responseScore = Math.max(0,100 -(vendor.avgResponseTime * 2));score += responseScore * weights.responseTime;if(vendor.pricing === 'budget'){score += 80 * weights.cost}else if(vendor.pricing === 'competitive'){score += 60 * weights.cost}else{score += 40 * weights.cost}const distance = Math.random()* 20;const proximityScore = Math.max(0,100 -(distance * 5));score += proximityScore * weights.proximity;if(workOrder.priority === 'urgent' && vendor.availability === 'high'){score += 10}if(vendor.preferred){score += 5}if(vendor.completedSimilarJobs > 10){score += 5}return Math.min(100,Math.round(score))};const checkVendorAvailability =(vendor,workOrder)=>{const availability ={today:vendor.currentJobs < 3,tomorrow:vendor.currentJobs < 4,thisWeek:true,nextAvailable:new Date(Date.now()+(vendor.currentJobs * 24 * 60 * 60 * 1000))};return availability};const estimateJobCost =(vendor,workOrder)=>{const baseCost = workOrder.estimatedCost || 150;const pricingMultiplier ={budget:0.8,competitive:1.0,premium:1.3};return baseCost *(pricingMultiplier[vendor.pricing] || 1.0)};const estimateCompletionTime =(vendor,workOrder)=>{const baseTime = workOrder.estimatedDuration || 2;const efficiencyFactor = vendor.rating >= 4.5 ? 0.9:1.1;return Math.round(baseTime * efficiencyFactor * 10)/ 10};const generateMatchReasons =(vendor,workOrder,score)=>{const reasons = [];if(vendor.specialties.some(s => s.toLowerCase().includes(workOrder.category))){reasons.push({type:'expertise',text:`Specializes in ${workOrder.category}`,importance:'high'})}if(vendor.availability === 'high'){reasons.push({type:'availability',text:'Available immediately',importance:'high'})}if(vendor.rating >= 4.8){reasons.push({type:'quality',text:`Excellent rating(${vendor.rating}stars)`,importance:'medium'})}if(vendor.avgResponseTime <= 15){reasons.push({type:'responsive',text:`Fast response(${vendor.avgResponseTime}min avg)`,importance:'medium'})}if(vendor.pricing === 'budget' && workOrder.priority !== 'urgent'){reasons.push({type:'cost',text:'Cost-effective option',importance:'low'})}if(vendor.preferred){reasons.push({type:'preferred',text:'Preferred vendor',importance:'medium'})}return reasons};const generateAIRecommendation =(topMatch,workOrder,tenantSchedule)=>{const confidence = topMatch.score;let recommendation = '';if(confidence >= 90){recommendation = `Excellent match! ${topMatch.vendor.companyName}is highly qualified for this ${workOrder.category}job with immediate availability.`}else if(confidence >= 75){recommendation = `Good match. ${topMatch.vendor.companyName}has the right expertise and can complete the job efficiently.`}else{recommendation = `${topMatch.vendor.companyName}can handle this job,though you may want to review alternative options.`}return{vendorName:topMatch.vendor.companyName,confidence,recommendation,estimatedArrival:topMatch.responseTime,estimatedCompletion:topMatch.completionTime,estimatedCost:topMatch.estimatedCost}};const generateScheduleOptions =(topMatch,workOrder,tenantSchedule)=>{const options = [];const now = new Date();const tenantAvailability = parseTenantAvailability(workOrder.tenant?.availability);const earliest = new Date(now);earliest.setHours(earliest.getHours()+ 2);if(isTimeSlotAvailable(earliest,tenantAvailability)){options.push({id:1,type:'earliest',date:earliest,label:'Earliest Available',tenantHome:true,vendorAvailable:true,recommended:workOrder.priority === 'urgent'})}if(tenantAvailability.preferred){const preferred = new Date(now);preferred.setDate(preferred.getDate()+ 1);preferred.setHours(tenantAvailability.preferred.hour);options.push({id:2,type:'preferred',date:preferred,label:'Tenant Preferred Time',tenantHome:true,vendorAvailable:checkVendorSlot(topMatch.vendor,preferred),recommended:true})}const efficient = new Date(now);efficient.setDate(efficient.getDate()+ 1);efficient.setHours(10);options.push({id:3,type:'efficient',date:efficient,label:'Optimized Route Time',tenantHome:checkTenantAvailability(efficient,tenantAvailability),vendorAvailable:true,recommended:false,note:'Vendor has other jobs nearby at this time'});return options};const parseTenantAvailability =(availabilityString)=>{if(!availabilityString)return{allDay:true};const lower = availabilityString.toLowerCase();if(lower.includes('after 3pm')){return{weekdays:{start:15,end:20},preferred:{hour:15},flexible:false}}else if(lower.includes('flexible')|| lower.includes('work from home')){return{allDay:true,flexible:true,preferred:{hour:10}}}return{allDay:true}};const isTimeSlotAvailable =(date,availability)=>{const hour = date.getHours();if(availability.allDay)return true;if(availability.weekdays && date.getDay()>= 1 && date.getDay()<= 5){return hour >= availability.weekdays.start && hour <= availability.weekdays.end}return true};const checkTenantAvailability =(date,availability)=>{return isTimeSlotAvailable(date,availability)};const checkVendorSlot =(vendor,date)=>{return Math.random()> 0.3};return React.createElement('div',{className:'ai-vendor-matching'},[ React.createElement('div',{key:'header',className:'matching-header'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),'AI Vendor Matching & Scheduling' ]),React.createElement('div',{key:'order-info',className:'work-order-info'},[ React.createElement('span',{key:'id'},`Work Order #${workOrder.id}`),React.createElement('span',{key:'category',className:'category-badge'},workOrder.category),React.createElement('span',{key:'priority',className:`priority-badge ${workOrder.priority}`},workOrder.priority)])]),state.matchingInProgress && React.createElement('div',{key:'loading',className:'matching-loading'},[ React.createElement('div',{key:'spinner',className:'ai-spinner'}),React.createElement('h3',{key:'text'},'AI is analyzing vendors and schedules...'),React.createElement('p',{key:'desc'},'Considering expertise,availability,cost,and tenant preferences')]),!state.matchingInProgress && React.createElement('div',{key:'results',className:'matching-results'},[ state.aiRecommendation && React.createElement('div',{key:'recommendation',className:'ai-recommendation-box'},[ React.createElement('div',{key:'header',className:'recommendation-header'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-star'}),'AI Recommendation' ]),React.createElement('div',{key:'confidence',className:'confidence-score'},[ React.createElement('span',{key:'label'},'Confidence:'),React.createElement('div',{key:'bar',className:'confidence-bar'},React.createElement('div',{className:'confidence-fill',style:{width:`${state.aiRecommendation.confidence}%`}})),React.createElement('span',{key:'percent'},`${state.aiRecommendation.confidence}%`)])]),React.createElement('p',{key:'text',className:'recommendation-text'},state.aiRecommendation.recommendation),React.createElement('div',{key:'details',className:'recommendation-details'},[ React.createElement('div',{key:'arrival'},[ React.createElement('i',{className:'fas fa-clock'}),React.createElement('span',{},`Response time:${state.aiRecommendation.estimatedArrival}minutes`)]),React.createElement('div',{key:'duration'},[ React.createElement('i',{className:'fas fa-hourglass-half'}),React.createElement('span',{},`Completion:${state.aiRecommendation.estimatedCompletion}hours`)]),React.createElement('div',{key:'cost'},[ React.createElement('i',{className:'fas fa-dollar-sign'}),React.createElement('span',{},`Estimated cost:${formatCurrency(state.aiRecommendation.estimatedCost)}`)])])]),React.createElement('div',{key:'schedule',className:'schedule-options'},[ React.createElement('h3',{key:'title'},'Suggested Appointment Times'),React.createElement('div',{key:'options',className:'schedule-grid'},state.proposedSchedule.map(option => React.createElement('div',{key:option.id,className:`schedule-option ${option.recommended ? 'recommended':''}`},[ option.recommended && React.createElement('span',{key:'badge',className:'recommended-badge'},'Recommended'),React.createElement('h4',{key:'label'},option.label),React.createElement('div',{key:'datetime',className:'option-datetime'},[ React.createElement('i',{key:'icon',className:'fas fa-calendar'}),React.createElement('span',{key:'date'},formatDate(option.date)),React.createElement('span',{key:'time'},formatTime(option.date))]),React.createElement('div',{key:'availability',className:'availability-status'},[ React.createElement('div',{key:'tenant',className:`status-item ${option.tenantHome ? 'available':'unavailable'}`},[ React.createElement('i',{className:`fas fa-${option.tenantHome ? 'check':'times'}`}),React.createElement('span',{},'Tenant available')]),React.createElement('div',{key:'vendor',className:`status-item ${option.vendorAvailable ? 'available':'unavailable'}`},[ React.createElement('i',{className:`fas fa-${option.vendorAvailable ? 'check':'times'}`}),React.createElement('span',{},'Vendor available')])]),option.note && React.createElement('p',{key:'note',className:'option-note'},option.note),React.createElement('button',{key:'select',className:'btn btn-primary',onClick:()=> selectSchedule(option)},'Select This Time')])))]),state.selectedVendor && React.createElement('div',{key:'vendor-details',className:'selected-vendor-details'},[ React.createElement('h3',{key:'title'},'Selected Vendor Details'),React.createElement(VendorMatchCard,{key:'card',vendor:state.selectedVendor,match:state.matchingResults[0],onSelect:()=> confirmVendorSelection()})]),state.alternativeOptions.length > 0 && React.createElement('div',{key:'alternatives',className:'alternative-vendors'},[ React.createElement('h3',{key:'title'},'Alternative Vendors'),React.createElement('div',{key:'list',className:'alternatives-list'},state.alternativeOptions.map((match,idx)=> React.createElement(VendorMatchCard,{key:match.vendor.id,vendor:match.vendor,match:match,compact:true,onSelect:()=> selectAlternativeVendor(match.vendor)})))])])]);function selectSchedule(option){if(onMatch){onMatch({vendor:state.selectedVendor,schedule:option,confidence:state.confidenceScore})}}function confirmVendorSelection(){}function selectAlternativeVendor(vendor){updateState({selectedVendor:vendor});const match = state.matchingResults.find(m => m.vendor.id === vendor.id);const proposedSchedule = generateScheduleOptions(match,workOrder,tenantSchedule);updateState({proposedSchedule})}})})();const VendorMatchCard = ComponentFactory.createComponent('VendorMatchCard')((props,helpers)=>{const{vendor,match,compact = false,onSelect}= props;const{formatCurrency}= helpers;return React.createElement('div',{className:`vendor-match-card ${compact ? 'compact':''}`,onClick:onSelect},[ React.createElement('div',{key:'header',className:'vendor-header'},[ React.createElement('div',{key:'info'},[ React.createElement('h4',{key:'name'},vendor.companyName),React.createElement('div',{key:'stats',className:'vendor-stats'},[ React.createElement('span',{key:'rating'},[ React.createElement('i',{className:'fas fa-star'}),`${vendor.rating}` ]),React.createElement('span',{key:'jobs'},`${vendor.totalJobs}jobs`),vendor.preferred && React.createElement('span',{key:'preferred',className:'preferred-badge'},'Preferred')])]),React.createElement('div',{key:'score',className:'match-score'},[ React.createElement('span',{key:'number',className:'score-number'},`${match.score}%`),React.createElement('span',{key:'label',className:'score-label'},'match')])]),!compact && React.createElement('div',{key:'reasons',className:'match-reasons'},match.reasons.map((reason,idx)=> React.createElement('div',{key:idx,className:`reason-item ${reason.importance}`},[ React.createElement('i',{key:'icon',className:'fas fa-check-circle'}),React.createElement('span',{key:'text'},reason.text)]))),React.createElement('div',{key:'details',className:'match-details'},[ React.createElement('div',{key:'response',className:'detail-item'},[ React.createElement('i',{className:'fas fa-bolt'}),React.createElement('span',{},`${match.responseTime}min response`)]),React.createElement('div',{key:'cost',className:'detail-item'},[ React.createElement('i',{className:'fas fa-dollar-sign'}),React.createElement('span',{},formatCurrency(match.estimatedCost))]),React.createElement('div',{key:'availability',className:'detail-item'},[ React.createElement('i',{className:'fas fa-calendar-check'}),React.createElement('span',{},match.availability.today ? 'Available today':'Next available tomorrow')])])])});window.AppModules = window.AppModules ||{};window.AppModules.AIVendorMatching = AIVendorMatching;window.AppModules.VendorMatchCard = VendorMatchCard;

// ELeaseSigningSystem.jsx
const ELeaseSigningSystem =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'long',day:'numeric',year:'numeric'})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('ELeaseSigningSystem')((props,helpers)=>{const{useLocalState,formatCurrency,formatDate}= helpers;const [state,updateState] = useLocalState({activeView:'dashboard',selectedTemplate:null,leaseData:{},aiSuggestions:[],showAICoPilot:false,aiCommand:'',generatingLease:false,previewMode:false,signingProgress:null,templates:[],recentLeases:[],pendingSignatures:[]});React.useEffect(()=>{loadTemplates();loadRecentActivity()},[]);const loadTemplates = async()=>{const templates = [{id:'standard-residential',name:'Standard Residential Lease',description:'12-month residential lease agreement',clauses:['rent','security','maintenance','termination'],popularAddons:['pet','parking','utilities']},{id:'month-to-month',name:'Month-to-Month Agreement',description:'Flexible monthly rental agreement',clauses:['rent','notice','security','rules'],popularAddons:['storage','guest']},{id:'corporate-housing',name:'Corporate Housing Lease',description:'Short-term furnished rental',clauses:['rent','furnishings','services','early-termination'],popularAddons:['cleaning','internet']}];updateState({templates})};const loadRecentActivity = async()=>{const recentLeases = [{id:'L001',tenant:'Sarah Johnson',unit:'3B',status:'signed',createdDate:'2025-01-10',signedDate:'2025-01-11'},{id:'L002',tenant:'Mike Chen',unit:'5A',status:'pending',createdDate:'2025-01-12',expiresIn:'48 hours'}];const pendingSignatures = recentLeases.filter(l => l.status === 'pending');updateState({recentLeases,pendingSignatures})};return React.createElement('div',{className:'elease-signing-system'},[ React.createElement('div',{key:'header',className:'elease-header'},[ React.createElement('h1',{key:'title'},'E-Lease Management'),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'new-lease',className:'btn btn-primary',onClick:()=> updateState({activeView:'create'})},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'Create New Lease' ]),React.createElement('button',{key:'ai-copilot',className:`btn btn-ai ${state.showAICoPilot ? 'active':''}`,onClick:()=> updateState({showAICoPilot:!state.showAICoPilot})},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),'AI CoPilot' ])])]),React.createElement('div',{key:'content',className:'elease-content'},[ state.activeView === 'dashboard' && renderDashboard(),state.activeView === 'create' && renderLeaseCreation(),state.activeView === 'preview' && renderLeasePreview(),state.activeView === 'signing' && renderSigningProcess()]),state.showAICoPilot && React.createElement(AICoPilotPanel,{key:'ai-copilot',command:state.aiCommand,onCommandChange:(command)=> updateState({aiCommand:command}),onExecuteCommand:executeAICommand,suggestions:state.aiSuggestions})]);function renderDashboard(){return React.createElement('div',{className:'elease-dashboard'},[ React.createElement('div',{key:'stats',className:'dashboard-stats'},[{label:'Active Leases',value:'47',icon:'fa-file-contract',color:'primary'},{label:'Pending Signatures',value:state.pendingSignatures.length,icon:'fa-clock',color:'warning'},{label:'Expiring Soon',value:'3',icon:'fa-calendar-times',color:'danger'},{label:'Templates',value:state.templates.length,icon:'fa-file-alt',color:'info'}].map((stat,idx)=> React.createElement('div',{key:idx,className:`stat-card ${stat.color}`},[ React.createElement('i',{key:'icon',className:`fas ${stat.icon}`}),React.createElement('div',{key:'content',className:'stat-content'},[ React.createElement('span',{key:'value',className:'stat-value'},stat.value),React.createElement('span',{key:'label',className:'stat-label'},stat.label)])]))),React.createElement('div',{key:'templates',className:'template-section'},[ React.createElement('h2',{key:'title'},'Lease Templates'),React.createElement('div',{key:'grid',className:'template-grid'},state.templates.map(template => React.createElement('div',{key:template.id,className:'template-card',onClick:()=>{updateState({selectedTemplate:template,activeView:'create'})}},[ React.createElement('div',{key:'header',className:'template-header'},[ React.createElement('i',{key:'icon',className:'fas fa-file-alt'}),React.createElement('h3',{key:'name'},template.name)]),React.createElement('p',{key:'desc',className:'template-description'},template.description),React.createElement('div',{key:'footer',className:'template-footer'},[ React.createElement('span',{key:'clauses'},`${template.clauses.length}standard clauses`),React.createElement('button',{key:'use',className:'use-template-btn'},'Use Template')])])))]),React.createElement('div',{key:'activity',className:'recent-activity'},[ React.createElement('h2',{key:'title'},'Recent Leases'),React.createElement('div',{key:'list',className:'lease-list'},state.recentLeases.map(lease => React.createElement('div',{key:lease.id,className:`lease-item ${lease.status}`},[ React.createElement('div',{key:'info',className:'lease-info'},[ React.createElement('h4',{key:'tenant'},lease.tenant),React.createElement('p',{key:'unit'},`Unit ${lease.unit}`),React.createElement('span',{key:'date',className:'lease-date'},formatDate(lease.createdDate))]),React.createElement('div',{key:'status',className:'lease-status'},[ React.createElement('span',{key:'badge',className:`status-badge ${lease.status}`},lease.status),lease.expiresIn && React.createElement('span',{key:'expires',className:'expires-in'},`Expires in ${lease.expiresIn}`)]),React.createElement('button',{key:'action',className:'lease-action-btn'},lease.status === 'pending' ? 'Send Reminder':'View')])))])])}function renderLeaseCreation(){return React.createElement('div',{className:'lease-creation'},[ React.createElement('div',{key:'header',className:'creation-header'},[ React.createElement('button',{key:'back',className:'back-btn',onClick:()=> updateState({activeView:'dashboard'})},[ React.createElement('i',{key:'icon',className:'fas fa-arrow-left'}),'Back' ]),React.createElement('h2',{key:'title'},state.selectedTemplate ? `Creating ${state.selectedTemplate.name}`:'Create New Lease')]),React.createElement(LeaseBuilder,{key:'builder',template:state.selectedTemplate,leaseData:state.leaseData,onUpdateLease:(data)=> updateState({leaseData:data}),onGenerateLease:generateLease})])}function renderLeasePreview(){return React.createElement('div',{className:'lease-preview'},[ React.createElement('div',{key:'header',className:'preview-header'},[ React.createElement('button',{key:'back',className:'back-btn',onClick:()=> updateState({activeView:'create'})},'Back to Edit'),React.createElement('h2',{key:'title'},'Lease Preview'),React.createElement('button',{key:'send',className:'btn btn-primary',onClick:()=> updateState({activeView:'signing'})},[ React.createElement('i',{key:'icon',className:'fas fa-paper-plane'}),'Send for Signature' ])]),React.createElement('div',{key:'document',className:'lease-document'},React.createElement(LeaseDocument,{leaseData:state.leaseData,template:state.selectedTemplate}))])}function renderSigningProcess(){return React.createElement('div',{className:'signing-process'},[ React.createElement('h2',{key:'title'},'DocuSign Integration'),React.createElement(DocuSignFlow,{key:'docusign',leaseData:state.leaseData,onComplete:(signedLease)=>{window.Toast?.success('Lease signed successfully!');updateState({activeView:'dashboard'})}})])}async function executeAICommand(command){updateState({generatingLease:true});try{const parsed = await parseAICommand(command);if(parsed.action === 'create_lease'){const leaseData = await generateLeaseFromCommand(parsed);updateState({leaseData,selectedTemplate:parsed.template,activeView:'preview',generatingLease:false});window.Toast?.success('Lease generated! Please review.')}else if(parsed.action === 'add_clause'){const updatedLease = await addAIClause(state.leaseData,parsed.clause);updateState({leaseData:updatedLease,generatingLease:false});window.Toast?.success(`${parsed.clause}clause added!`)}}catch(error){window.Toast?.error('Could not understand command. Try again.');updateState({generatingLease:false})}}async function parseAICommand(command){const lowerCommand = command.toLowerCase();if(lowerCommand.includes('create')|| lowerCommand.includes('generate')){const unitMatch = lowerCommand.match(/unit\s+(\w+)/);const tenantMatch = lowerCommand.match(/for\s+([^,]+)/);return{action:'create_lease',unit:unitMatch ? unitMatch[1]:null,tenant:tenantMatch ? tenantMatch[1].trim():null,template:lowerCommand.includes('month')? 'month-to-month':'standard-residential',addons:[]}}if(lowerCommand.includes('add')&& lowerCommand.includes('clause')){const clauseTypes = ['pet','parking','early termination','subletting'];const foundClause = clauseTypes.find(c => lowerCommand.includes(c));return{action:'add_clause',clause:foundClause || 'custom'}}throw new Error('Command not recognized')}async function generateLeaseFromCommand(parsed){await new Promise(resolve => setTimeout(resolve,2000));return{tenant:{name:parsed.tenant || 'John Doe',email:'tenant@example.com',phone:'(555)123-4567'},property:{address:'123 Main St',unit:parsed.unit || '101',city:'San Francisco',state:'CA',zip:'94105'},terms:{startDate:new Date().toISOString().split('T')[0],endDate:new Date(Date.now()+ 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],rentAmount:2500,securityDeposit:2500,paymentDue:1},clauses:{standard:true,pet:parsed.addons?.includes('pet'),parking:parsed.addons?.includes('parking'),utilities:true,maintenance:true}}}async function generateLease(leaseData){updateState({generatingLease:true});const enrichedLease = await enrichLeaseWithAI(leaseData);updateState({leaseData:enrichedLease,activeView:'preview',generatingLease:false})}async function enrichLeaseWithAI(leaseData){const enriched ={...leaseData};const moveInDay = new Date(leaseData.terms.startDate).getDate();if(moveInDay !== 1){enriched.clauses.proration ={enabled:true,amount:(leaseData.terms.rentAmount / 30)*(30 - moveInDay + 1),text:`First month's rent shall be prorated from ${formatDate(leaseData.terms.startDate)}at a daily rate of ${formatCurrency(leaseData.terms.rentAmount / 30)}.`}}const moveInMonth = new Date(leaseData.terms.startDate).getMonth();if(moveInMonth >= 10 || moveInMonth <= 2){enriched.clauses.winterization ={enabled:true,text:'Tenant agrees to maintain heating at minimum 55°F to prevent pipe freezing during winter months.'}}return enriched}})})();const LeaseBuilder = ComponentFactory.createComponent('LeaseBuilder')((props,helpers)=>{const{template,leaseData,onUpdateLease,onGenerateLease}= props;const{formatCurrency}= helpers;const [activeSection,setActiveSection] = React.useState('tenant');const sections = [{id:'tenant',title:'Tenant Information',icon:'fa-user'},{id:'property',title:'Property Details',icon:'fa-home'},{id:'terms',title:'Lease Terms',icon:'fa-calendar'},{id:'clauses',title:'Clauses & Addendums',icon:'fa-file-contract'}];const updateSection =(section,field,value)=>{onUpdateLease({...leaseData,[section]:{...leaseData[section],[field]:value}})};return React.createElement('div',{className:'lease-builder'},[ React.createElement('div',{key:'nav',className:'section-nav'},sections.map(section => React.createElement('button',{key:section.id,className:`section-btn ${activeSection === section.id ? 'active':''}`,onClick:()=> setActiveSection(section.id)},[ React.createElement('i',{key:'icon',className:`fas ${section.icon}`}),React.createElement('span',{key:'title'},section.title)]))),React.createElement('div',{key:'content',className:'section-content'},[ activeSection === 'tenant' && renderTenantSection(),activeSection === 'property' && renderPropertySection(),activeSection === 'terms' && renderTermsSection(),activeSection === 'clauses' && renderClausesSection()]),React.createElement('div',{key:'actions',className:'builder-actions'},[ React.createElement('button',{key:'save-draft',className:'btn btn-secondary'},'Save as Draft'),React.createElement('button',{key:'generate',className:'btn btn-primary',onClick:()=> onGenerateLease(leaseData)},[ React.createElement('i',{key:'icon',className:'fas fa-magic'}),'Generate Lease with AI' ])])]);function renderTenantSection(){const tenant = leaseData.tenant ||{};return React.createElement('div',{className:'form-section'},[ React.createElement('h3',{key:'title'},'Tenant Information'),React.createElement('div',{key:'grid',className:'form-grid'},[ React.createElement('div',{key:'name',className:'form-group'},[ React.createElement('label',{},'Full Name'),React.createElement('input',{type:'text',value:tenant.name || '',onChange:(e)=> updateSection('tenant','name',e.target.value)})]),React.createElement('div',{key:'email',className:'form-group'},[ React.createElement('label',{},'Email Address'),React.createElement('input',{type:'email',value:tenant.email || '',onChange:(e)=> updateSection('tenant','email',e.target.value)})]),React.createElement('div',{key:'phone',className:'form-group'},[ React.createElement('label',{},'Phone Number'),React.createElement('input',{type:'tel',value:tenant.phone || '',onChange:(e)=> updateSection('tenant','phone',e.target.value)})])])])}function renderPropertySection(){const property = leaseData.property ||{};return React.createElement('div',{className:'form-section'},[ React.createElement('h3',{key:'title'},'Property Details'),React.createElement('div',{key:'grid',className:'form-grid'},[ React.createElement('div',{key:'address',className:'form-group full-width'},[ React.createElement('label',{},'Property Address'),React.createElement('input',{type:'text',value:property.address || '',onChange:(e)=> updateSection('property','address',e.target.value)})]),React.createElement('div',{key:'unit',className:'form-group'},[ React.createElement('label',{},'Unit Number'),React.createElement('input',{type:'text',value:property.unit || '',onChange:(e)=> updateSection('property','unit',e.target.value)})]),React.createElement('div',{key:'city',className:'form-group'},[ React.createElement('label',{},'City'),React.createElement('input',{type:'text',value:property.city || '',onChange:(e)=> updateSection('property','city',e.target.value)})])])])}function renderTermsSection(){const terms = leaseData.terms ||{};return React.createElement('div',{className:'form-section'},[ React.createElement('h3',{key:'title'},'Lease Terms'),terms.startDate && new Date(terms.startDate).getDate()!== 1 && React.createElement('div',{key:'ai-suggestion',className:'ai-suggestion-box'},[ React.createElement('i',{key:'icon',className:'fas fa-lightbulb'}),React.createElement('p',{},'AI detected mid-month move-in. A proration clause will be automatically added.')]),React.createElement('div',{key:'grid',className:'form-grid'},[ React.createElement('div',{key:'start',className:'form-group'},[ React.createElement('label',{},'Lease Start Date'),React.createElement('input',{type:'date',value:terms.startDate || '',onChange:(e)=> updateSection('terms','startDate',e.target.value)})]),React.createElement('div',{key:'end',className:'form-group'},[ React.createElement('label',{},'Lease End Date'),React.createElement('input',{type:'date',value:terms.endDate || '',onChange:(e)=> updateSection('terms','endDate',e.target.value)})]),React.createElement('div',{key:'rent',className:'form-group'},[ React.createElement('label',{},'Monthly Rent'),React.createElement('input',{type:'number',value:terms.rentAmount || '',onChange:(e)=> updateSection('terms','rentAmount',parseFloat(e.target.value))})]),React.createElement('div',{key:'deposit',className:'form-group'},[ React.createElement('label',{},'Security Deposit'),React.createElement('input',{type:'number',value:terms.securityDeposit || '',onChange:(e)=> updateSection('terms','securityDeposit',parseFloat(e.target.value))})])])])}function renderClausesSection(){const clauses = leaseData.clauses ||{};return React.createElement('div',{className:'form-section'},[ React.createElement('h3',{key:'title'},'Clauses & Addendums'),React.createElement('div',{key:'standard',className:'clause-group'},[ React.createElement('h4',{},'Standard Clauses'),React.createElement('p',{className:'clause-description'},'These clauses are automatically included based on your template and local regulations.'),['Rent Payment','Security Deposit','Maintenance Responsibilities','Termination'].map(clause => React.createElement('div',{key:clause,className:'clause-item included'},[ React.createElement('i',{key:'check',className:'fas fa-check-circle'}),React.createElement('span',{},clause)]))]),React.createElement('div',{key:'optional',className:'clause-group'},[ React.createElement('h4',{},'Optional Addendums'),[{id:'pet',label:'Pet Addendum',description:'Allows pets with deposit'},{id:'parking',label:'Parking Space',description:'Assigns specific parking'},{id:'utilities',label:'Utilities Inclusion',description:'Specifies included utilities'},{id:'earlyTermination',label:'Early Termination',description:'Allows early exit with penalty'}].map(addon => React.createElement('div',{key:addon.id,className:'addon-option'},[ React.createElement('label',{className:'addon-label'},[ React.createElement('input',{type:'checkbox',checked:clauses[addon.id] || false,onChange:(e)=> updateSection('clauses',addon.id,e.target.checked)}),React.createElement('div',{className:'addon-info'},[ React.createElement('span',{className:'addon-title'},addon.label),React.createElement('span',{className:'addon-desc'},addon.description)])])]))])])}});const AICoPilotPanel = ComponentFactory.createComponent('AICoPilotPanel')((props,helpers)=>{const{command,onCommandChange,onExecuteCommand,suggestions}= props;const exampleCommands = [ 'Generate a lease for Unit 101 with a pet addendum','Create month-to-month agreement for John Smith','Add early termination clause to current lease','Generate lease for 3B starting March 15th with parking' ];return React.createElement('div',{className:'ai-copilot-panel'},[ React.createElement('div',{key:'header',className:'copilot-header'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),React.createElement('h3',{key:'title'},'AI Lease Assistant')]),React.createElement('div',{key:'input',className:'copilot-input'},[ React.createElement('input',{type:'text',placeholder:'Type a command...',value:command,onChange:(e)=> onCommandChange(e.target.value),onKeyPress:(e)=>{if(e.key === 'Enter' && command.trim()){onExecuteCommand(command)}}}),React.createElement('button',{onClick:()=> command.trim()&& onExecuteCommand(command),disabled:!command.trim()},React.createElement('i',{className:'fas fa-paper-plane'}))]),React.createElement('div',{key:'examples',className:'copilot-examples'},[ React.createElement('p',{key:'label'},'Try these commands:'),exampleCommands.map((example,idx)=> React.createElement('button',{key:idx,className:'example-command',onClick:()=> onCommandChange(example)},example))]),suggestions.length > 0 && React.createElement('div',{key:'suggestions',className:'copilot-suggestions'},[ React.createElement('h4',{},'AI Suggestions:'),suggestions.map((suggestion,idx)=> React.createElement('div',{key:idx,className:'suggestion-item'},[ React.createElement('i',{key:'icon',className:'fas fa-lightbulb'}),React.createElement('span',{},suggestion)]))])])});const DocuSignFlow = ComponentFactory.createComponent('DocuSignFlow')((props,helpers)=>{const{leaseData,onComplete}= props;const [signingStatus,setSigningStatus] = React.useState('preparing');const [signingUrl,setSigningUrl] = React.useState(null);React.useEffect(()=>{initiateDocuSign()},[]);const initiateDocuSign = async()=>{setSigningStatus('preparing');try{await new Promise(resolve => setTimeout(resolve,2000));const mockSigningUrl = 'https:setSigningUrl(mockSigningUrl);setSigningStatus('ready');setTimeout(()=>{setSigningStatus('completed');onComplete({...leaseData,signedDate:new Date()})},10000)}catch(error){setSigningStatus('error')}};return React.createElement('div',{className:'docusign-flow'},[ signingStatus === 'preparing' && React.createElement('div',{key:'preparing',className:'signing-status preparing'},[ React.createElement('div',{key:'spinner',className:'signing-spinner'}),React.createElement('h3',{},'Preparing Document for Signing...'),React.createElement('p',{},'Uploading lease to DocuSign and configuring signature fields')]),signingStatus === 'ready' && React.createElement('div',{key:'ready',className:'signing-status ready'},[ React.createElement('i',{key:'icon',className:'fas fa-file-signature'}),React.createElement('h3',{},'Document Ready for Signing'),React.createElement('p',{},'The lease has been sent to all parties for electronic signature.'),React.createElement('div',{key:'actions',className:'signing-actions'},[ React.createElement('button',{key:'preview',className:'btn btn-secondary'},'Preview Document'),React.createElement('button',{key:'track',className:'btn btn-primary'},'Track Signing Status')]),React.createElement('div',{key:'embed',className:'docusign-embed'},React.createElement('p',{},'DocuSign embedded signing would appear here'))]),signingStatus === 'completed' && React.createElement('div',{key:'completed',className:'signing-status completed'},[ React.createElement('i',{key:'icon',className:'fas fa-check-circle'}),React.createElement('h3',{},'Lease Signed Successfully!'),React.createElement('p',{},'All parties have signed the lease agreement.'),React.createElement('button',{key:'download',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-download'}),'Download Signed Lease' ])])])});window.AppModules = window.AppModules ||{};window.AppModules.ELeaseSigningSystem = ELeaseSigningSystem;window.AppModules.LeaseBuilder = LeaseBuilder;window.AppModules.AICoPilotPanel = AICoPilotPanel;window.AppModules.DocuSignFlow = DocuSignFlow;

// MaintenanceRedirect.jsx
const MaintenanceRedirect =()=>{return React.createElement(window.AppModules.MaintenanceEcosystem ||(()=>{return React.createElement('div',{style:{padding:'40px',textAlign:'center'}},[ React.createElement('h2',{key:'title'},'Loading Maintenance Ecosystem...'),React.createElement('p',{key:'desc'},'The AI-powered maintenance system is loading.')])}))};window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceNew = MaintenanceRedirect;

// MaintenanceEcosystem.jsx
const MaintenanceEcosystem =()=>{const [activeView,setActiveView] = React.useState('dashboard');const [currentRequest,setCurrentRequest] = React.useState(null);const [aiConversation,setAiConversation] = React.useState([]);const [maintenanceData,setMaintenanceData] = React.useState({tickets:[],vendors:[],analytics:{}});const AITriageEngine ={categories:{electrical:{icon:'⚡',color:'#f59e0b',questions:[{id:'scope',question:'Is the issue affecting one outlet,one room,or multiple rooms?',options:['One outlet','One room','Multiple rooms','Entire unit'],followUp:{'One outlet':{solution:'Try resetting the GFCI outlet. Look for a small "Reset" button on the outlet itself or nearby outlets(often in bathrooms/kitchens). Press it firmly.',canResolve:true,priority:20},'One room':{question:'Have you checked your circuit breaker panel?',priority:40},'Multiple rooms':{escalate:true,priority:80,vendorType:'electrical'},'Entire unit':{escalate:true,priority:95,emergency:true,vendorType:'electrical'}}}]},plumbing:{icon:'🚿',color:'#3b82f6',questions:[{id:'type',question:'What type of plumbing issue are you experiencing?',options:['Leak/Water damage','Clogged drain','No hot water','Low water pressure'],followUp:{'Leak/Water damage':{question:'How severe is the leak?',options:['Dripping','Steady stream','Flooding'],priority:{'Dripping':60,'Steady stream':85,'Flooding':100},emergency:{'Flooding':true}},'Clogged drain':{solution:'Try using a plunger first. For sinks,ensure the overflow hole is covered. For tough clogs,try 1/2 cup baking soda followed by 1/2 cup vinegar,wait 30 min,then flush with hot water.',canResolve:true,priority:30}}}]},hvac:{icon:'❄️',color:'#ef4444',questions:[{id:'issue',question:'What\'s wrong with your heating/cooling?',options:['Not cooling','Not heating','Strange noise','Bad smell'],followUp:{'Not cooling':{question:'Have you checked if the thermostat is set to "Cool" and the temperature is set below room temperature?',solution:'Also check:1)Air filter(replace if dirty),2)Circuit breaker for AC unit,3)Ensure all vents are open',canResolve:true,priority:70}}}]},appliance:{icon:'🔧',color:'#10b981',questions:[{id:'appliance',question:'Which appliance needs repair?',options:['Refrigerator','Dishwasher','Washer/Dryer','Oven/Stove'],followUp:{'Refrigerator':{question:'What\'s the issue?',options:['Not cooling','Making noise','Leaking water','Ice maker broken']}}}]},general:{icon:'🏠',color:'#6b7280',questions:[]}},calculatePriority(category,answers){let basePriority = 50;if(answers.includes('Flooding')|| answers.includes('Entire unit')){return 100}if(answers.includes('Multiple rooms')|| answers.includes('Steady stream')){return 85}const hour = new Date().getHours();if(hour < 7 || hour > 22)basePriority += 10;return Math.min(basePriority,100)},generateTicket(category,description,priority,photos = []){return{id:Date.now(),category,description,priority,status:'pending_assignment',created:new Date().toISOString(),tenant:{name:'Current Tenant',unit:'101'},photos,aiNotes:aiConversation,estimatedCost:this.estimateCost(category,priority)}},estimateCost(category,priority){const baseCosts ={electrical:{min:75,max:300},plumbing:{min:100,max:500},hvac:{min:150,max:800},appliance:{min:80,max:400},general:{min:50,max:200}};const range = baseCosts[category] || baseCosts.general;return{min:range.min,max:priority > 80 ? range.max * 1.5:range.max}}};const VendorMatchingEngine ={vendors:[{id:1,name:"ProElectric Solutions",specialties:['electrical'],rating:4.8,responseTime:2,availability:'available',preferred:true,rates:{hourly:85,emergency:150},certifications:['Licensed Electrician','EPA Certified']},{id:2,name:"QuickFix Plumbing",specialties:['plumbing'],rating:4.6,responseTime:1,availability:'24/7',preferred:false,rates:{hourly:95,emergency:180}},{id:3,name:"AllTemp HVAC",specialties:['hvac'],rating:4.9,responseTime:4,availability:'business_hours',preferred:true,rates:{hourly:110,emergency:200},certifications:['NATE Certified','EPA 608']}],matchVendor(ticket){const eligibleVendors = this.vendors.filter(v => v.specialties.includes(ticket.category));const scoredVendors = eligibleVendors.map(vendor =>{let score = 0;if(vendor.preferred)score += 30;score += vendor.rating * 10;score += Math.max(0,20 - vendor.responseTime * 5);if(vendor.availability === '24/7')score += 20;else if(vendor.availability === 'available')score += 10;const costScore = 100 - vendor.rates.hourly;score += costScore * 0.2;if(ticket.priority > 80 && vendor.availability === '24/7'){score += 25}return{...vendor,matchScore:score}});return scoredVendors.sort((a,b)=> b.matchScore - a.matchScore)}};const renderDashboard =()=>(<div className="maintenance-dashboard"><div className="dashboard-header"><h1>AI-Powered Maintenance Hub</h1><div className="dashboard-stats"><div className="stat-card urgent"><div className="stat-icon">🚨</div><div className="stat-content"><div className="stat-value">3</div><div className="stat-label">Urgent Issues</div></div></div><div className="stat-card pending"><div className="stat-icon">⏳</div><div className="stat-content"><div className="stat-value">12</div><div className="stat-label">Pending</div></div></div><div className="stat-card resolved"><div className="stat-icon">✅</div><div className="stat-content"><div className="stat-value">89%</div><div className="stat-label">Resolution Rate</div></div></div><div className="stat-card ai-resolved"><div className="stat-icon">🤖</div><div className="stat-content"><div className="stat-value">42%</div><div className="stat-label">AI Resolved</div></div></div></div></div><div className="dashboard-content"><div className="quick-actions"><button className="action-btn tenant-request" onClick={()=> setActiveView('tenant-request')}><i className="fas fa-plus-circle"></i> Tenant Request Portal </button><button className="action-btn vendor-portal" onClick={()=> setActiveView('vendor-dashboard')}><i className="fas fa-tools"></i> Vendor Dashboard </button><button className="action-btn preferences" onClick={()=> setActiveView('preferences')}><i className="fas fa-cog"></i> Vendor Preferences </button></div><div className="tickets-overview"><h2>Active Maintenance Tickets</h2><div className="tickets-grid">{renderTicketCards()}</div></div></div></div>);const renderTenantRequest =()=>{const [step,setStep] = React.useState('category');const [selectedCategory,setSelectedCategory] = React.useState(null);const [currentQuestionIndex,setCurrentQuestionIndex] = React.useState(0);const [answers,setAnswers] = React.useState([]);const [description,setDescription] = React.useState('');const [photos,setPhotos] = React.useState([]);const handleCategorySelect =(category)=>{setSelectedCategory(category);setStep('ai-triage');setAiConversation([{type:'ai',message:`I'll help you with your ${category}issue. Let me ask a few questions to see if we can resolve this quickly.`}])};const handleAnswer =(answer)=>{const newAnswers = [...answers,answer];setAnswers(newAnswers);const question = AITriageEngine.categories[selectedCategory].questions[currentQuestionIndex];const followUp = question.followUp[answer];if(followUp && followUp.canResolve){setAiConversation([...aiConversation,{type:'ai',message:followUp.solution}]);setStep('ai-solution')}else if(followUp && followUp.escalate){const priority = AITriageEngine.calculatePriority(selectedCategory,newAnswers);setCurrentRequest({category:selectedCategory,priority,emergency:followUp.emergency});setStep('details')}else{if(currentQuestionIndex < AITriageEngine.categories[selectedCategory].questions.length - 1){setCurrentQuestionIndex(currentQuestionIndex + 1)}else{setStep('details')}}};if(step === 'category'){return(<div className="tenant-maintenance-request"><div className="request-step"><h2>What type of issue are you experiencing?</h2><p>Select a category to get started</p><div className="category-grid">{Object.entries(AITriageEngine.categories).map(([key,cat])=>(<div key={key}className="category-card" style={{'--category-color':cat.color}}onClick={()=> handleCategorySelect(key)}><div className="category-icon" style={{color:cat.color}}>{cat.icon}</div><div className="category-name">{key.charAt(0).toUpperCase()+ key.slice(1)}</div></div>))}</div></div></div>)}if(step === 'ai-triage' && selectedCategory){const question = AITriageEngine.categories[selectedCategory].questions[currentQuestionIndex];return(<div className="tenant-maintenance-request"><div className="request-step"><div className="ai-assistant"><div className="ai-avatar">🤖</div><div className="ai-content"><h3>AI Maintenance Assistant</h3><p>I'm here to help resolve your issue quickly</p></div></div><div className="ai-question"><h4>{question.question}</h4><div className="answer-options">{question.options.map(option =>(<button key={option}className="option-btn" onClick={()=> handleAnswer(option)}>{option}</button>))}</div></div></div></div>)}if(step === 'ai-solution'){return(<div className="tenant-maintenance-request"><div className="request-step"><div className="ai-resolution"><h4>💡 Try This Solution</h4><p>{aiConversation[aiConversation.length - 1].message}</p><div className="resolution-actions"><button className="btn-success"><i className="fas fa-check"></i> This Worked! </button><button className="btn-secondary" onClick={()=> setStep('details')}> Still Need Help </button></div></div></div></div>)}if(step === 'details'){return(<div className="tenant-maintenance-request"><div className="request-step"><h2>Additional Details</h2><p>Help us understand the issue better</p><div className="form-group"><label>Describe the issue in detail</label><textarea value={description}onChange={(e)=> setDescription(e.target.value)}placeholder="Please provide any additional information..." /></div><div className="form-group"><label>How urgent is this?</label><div className="urgency-options"><button className="urgency-btn">Can wait</button><button className="urgency-btn">Soon please</button><button className="urgency-btn selected">Urgent</button><button className="urgency-btn">Emergency</button></div></div><div className="form-group"><label>Add Photos(Optional but helpful)</label><div className="photo-upload"><i className="fas fa-camera" style={{fontSize:'48px',color:'#9ca3af'}}></i><p>Click to upload photos</p><input type="file" accept="image/*" multiple hidden /></div></div><button className="btn-primary btn-block" onClick={()=> handleSubmitRequest()}> Submit Request </button></div></div>)}if(step === 'success'){return(<div className="tenant-maintenance-request"><div className="request-step success"><div style={{fontSize:'64px',marginBottom:'24px'}}>✅</div><h2>Request Submitted Successfully!</h2><p>Ticket #MW-2024-{Math.floor(Math.random()* 9999)}</p><div className="success-details"><p><strong>Priority Score:</strong>{currentRequest?.priority || 75}/100</p><p><strong>Estimated Response:</strong> Within 2-4 hours</p><p><strong>Matched Vendor:</strong> ProElectric Solutions</p></div><button className="btn-primary" onClick={()=> setActiveView('dashboard')}> Back to Dashboard </button></div></div>)}};const renderVendorDashboard =()=>(<div className="vendor-portal"><div className="vendor-dashboard"><div className="vendor-header"><div className="vendor-info"><h1>ProElectric Solutions Dashboard</h1><p>Licensed Electrical Contractor • 4.8★ Rating</p></div><div className="vendor-quick-stats"><div className="stat-card"><div className="stat-value">5</div><div className="stat-label">Today's Jobs</div></div><div className="stat-card"><div className="stat-value">2</div><div className="stat-label">Urgent</div></div><div className="stat-card"><div className="stat-value">98%</div><div className="stat-label">On-Time</div></div></div></div></div><div className="vendor-jobs"><h2>Assigned Work Orders</h2><div className="jobs-list">{renderVendorJobs()}</div></div></div>);const renderPreferences =()=>(<div className="vendor-preferences"><div className="preferences-header"><h2>Vendor Management & Preferences</h2><p>Configure your preferred vendors and auto-assignment rules</p></div><div className="vendor-categories">{Object.entries(AITriageEngine.categories).map(([category,config])=>(<div key={category}className="category-section"><h3>{config.icon}{category}Vendors</h3><div className="vendor-grid">{VendorMatchingEngine.vendors .filter(v => v.specialties.includes(category)).map(vendor =>(<div key={vendor.id}className="vendor-preference-card"><div className="vendor-info"><h4>{vendor.name}</h4><div className="vendor-details"><span>⭐{vendor.rating}</span><span>⏱️{vendor.responseTime}hr response</span><span>💵 ${vendor.rates.hourly}/hr</span></div></div><div className="preference-controls"><select defaultValue={vendor.preferred ? 'preferred':'approved'}><option value="preferred">Preferred</option><option value="approved">Approved</option><option value="backup">Backup Only</option><option value="blocked">Do Not Use</option></select></div></div>))}</div></div>))}</div><div className="auto-assignment-section"><h3>Auto-Assignment Rules</h3><div className="rules-config"><div className="rule-group"><input type="checkbox" id="auto-assign" defaultChecked /><label htmlFor="auto-assign"> Automatically assign vendors for requests under </label><select defaultValue="500"><option value="200">$200</option><option value="500">$500</option><option value="1000">$1,000</option></select></div><div className="rule-group"><input type="checkbox" id="emergency-rules" defaultChecked /><label htmlFor="emergency-rules"> For emergencies,authorize up to </label><select defaultValue="2000"><option value="1000">$1,000</option><option value="2000">$2,000</option><option value="5000">$5,000</option></select></div><div className="rule-group"><input type="checkbox" id="tenant-coordination" defaultChecked /><label htmlFor="tenant-coordination"> Enable AI-powered 3-way coordination chat </label></div></div></div><div className="preferences-actions"><button className="btn-primary"> Save Preferences </button></div></div>);const renderTicketCards =()=>{const mockTickets = [{id:1,category:'plumbing',priority:95,status:'in_progress',description:'Water leak in Unit 203 bathroom',tenant:'Sarah Johnson',assignedVendor:'QuickFix Plumbing',created:'2 hours ago'},{id:2,category:'electrical',priority:40,status:'pending_assignment',description:'Outlet not working in bedroom',tenant:'Mike Chen',aiStatus:'AI suggested GFCI reset',created:'4 hours ago'},{id:3,category:'hvac',priority:70,status:'scheduled',description:'AC not cooling properly',tenant:'Lisa Park',assignedVendor:'AllTemp HVAC',scheduledFor:'Tomorrow 2:00 PM',created:'1 day ago'}];return mockTickets.map(ticket =>(<div key={ticket.id}className={`ticket-card priority-${ticket.priority > 80 ? 'high':ticket.priority > 50 ? 'medium':'low'}`}><div className="ticket-header"><span className={`ticket-category ${ticket.category}`}>{AITriageEngine.categories[ticket.category].icon}{ticket.category}</span><span className="ticket-priority"> Priority:{ticket.priority}</span></div><h4>{ticket.description}</h4><div className="ticket-meta"><span><i className="fas fa-user"></i>{ticket.tenant}</span><span><i className="fas fa-clock"></i>{ticket.created}</span></div>{ticket.assignedVendor &&(<div className="ticket-assignment"><i className="fas fa-tools"></i>{ticket.assignedVendor}{ticket.scheduledFor && <span> •{ticket.scheduledFor}</span>}</div>)}{ticket.aiStatus &&(<div className="ticket-ai-status"><i className="fas fa-robot"></i>{ticket.aiStatus}</div>)}</div>))};const renderVendorJobs =()=>{const jobs = [{id:1,priority:95,address:'123 Main St,Unit 203',issue:'Electrical outlet sparking',tenant:'John Smith',phone:'(555)123-4567',timeWindow:'2:00 PM - 4:00 PM',status:'accepted'},{id:2,priority:40,address:'456 Oak Ave,Unit 105',issue:'Bedroom outlet not working',tenant:'Jane Doe',phone:'(555)987-6543',timeWindow:'Flexible',status:'pending'}];return jobs.map(job =>(<div key={job.id}className="vendor-job-card"><div className="job-priority"><span className={`priority-badge ${job.priority > 80 ? 'high':'medium'}`}> Priority:{job.priority}</span></div><h4>{job.issue}</h4><div className="job-details"><p><i className="fas fa-map-marker-alt"></i>{job.address}</p><p><i className="fas fa-user"></i>{job.tenant}•{job.phone}</p><p><i className="fas fa-clock"></i>{job.timeWindow}</p></div><div className="job-actions">{job.status === 'pending' ?(<><button className="btn-success">Accept Job</button><button className="btn-secondary">Decline</button></>):(<><button className="btn-primary">Start Navigation</button><button className="btn-secondary">Update Status</button></>)}</div></div>))};const handleSubmitRequest =()=>{const priority = currentRequest?.priority || AITriageEngine.calculatePriority(selectedCategory,answers);const ticket = AITriageEngine.generateTicket(selectedCategory,description,priority,photos);const matchedVendors = VendorMatchingEngine.matchVendor(ticket);setStep('success')};return(<div className="maintenance-ecosystem">{activeView === 'dashboard' && renderDashboard()}{activeView === 'tenant-request' && renderTenantRequest()}{activeView === 'vendor-dashboard' && renderVendorDashboard()}{activeView === 'preferences' && renderPreferences()}</div>)};window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceEcosystem = MaintenanceEcosystem;

// MaintenanceEcosystemPro.jsx
const MaintenanceEcosystemPro =()=>{const [activeView,setActiveView] = React.useState('dashboard');const [currentRequest,setCurrentRequest] = React.useState(null);const [aiConversation,setAiConversation] = React.useState([]);const [selectedProperty,setSelectedProperty] = React.useState('all');const [showVendorModal,setShowVendorModal] = React.useState(false);const [showRequestModal,setShowRequestModal] = React.useState(false);const [activeFilter,setActiveFilter] = React.useState('all');const [maintenanceData,setMaintenanceData] = React.useState({stats:{openTickets:23,inProgress:8,completedToday:5,avgResponseTime:'2.3 hrs',vendorRating:4.8,monthlySpend:45280},tickets:[{id:'MNT-2024-001',title:'Water leak in bathroom',property:'Sunset Apartments',unit:'203',tenant:'Sarah Johnson',category:'plumbing',priority:'high',status:'in_progress',created:'2025-01-14T08:30:00',vendor:'AquaFix Plumbing',estimatedCost:350,aiScore:85,photos:2},{id:'MNT-2024-002',title:'AC not cooling properly',property:'Downtown Plaza',unit:'1205',tenant:'Michael Chen',category:'hvac',priority:'medium',status:'open',created:'2025-01-14T10:15:00',vendor:null,estimatedCost:null,aiScore:65,photos:1},{id:'MNT-2024-003',title:'Electrical outlet sparking',property:'Garden Complex',unit:'405',tenant:'Emily Davis',category:'electrical',priority:'urgent',status:'open',created:'2025-01-14T11:45:00',vendor:null,estimatedCost:null,aiScore:95,photos:3}],vendors:[{id:1,name:'AquaFix Plumbing',category:'plumbing',rating:4.9,jobs:127,avgResponse:'45 min',avgCost:285,available:true,license:'CA-PLM-98765'},{id:2,name:'PowerPro Electric',category:'electrical',rating:4.8,jobs:89,avgResponse:'1.2 hrs',avgCost:425,available:true,license:'CA-ELC-54321'},{id:3,name:'CoolBreeze HVAC',category:'hvac',rating:4.7,jobs:156,avgResponse:'2 hrs',avgCost:520,available:false,license:'CA-HVC-12345'}]});const maintenanceCategories ={plumbing:{icon:'fa-faucet',color:'#3b82f6',label:'Plumbing',bgColor:'rgba(59,130,246,0.1)'},electrical:{icon:'fa-bolt',color:'#f59e0b',label:'Electrical',bgColor:'rgba(245,158,11,0.1)'},hvac:{icon:'fa-snowflake',color:'#ef4444',label:'HVAC',bgColor:'rgba(239,68,68,0.1)'},appliance:{icon:'fa-blender',color:'#10b981',label:'Appliance',bgColor:'rgba(16,185,129,0.1)'},general:{icon:'fa-hammer',color:'#8b5cf6',label:'General',bgColor:'rgba(139,92,246,0.1)'}};const priorityConfig ={low:{color:'#10b981',label:'Low',icon:'fa-circle'},medium:{color:'#f59e0b',label:'Medium',icon:'fa-circle'},high:{color:'#ef4444',label:'High',icon:'fa-circle'},urgent:{color:'#dc2626',label:'Urgent',icon:'fa-exclamation-circle'}};const statusConfig ={open:{color:'#3b82f6',label:'Open',icon:'fa-inbox'},in_progress:{color:'#f59e0b',label:'In Progress',icon:'fa-clock'},pending_vendor:{color:'#8b5cf6',label:'Pending Vendor',icon:'fa-user-clock'},completed:{color:'#10b981',label:'Completed',icon:'fa-check-circle'},cancelled:{color:'#6b7280',label:'Cancelled',icon:'fa-times-circle'}};const DashboardView =()=>{return React.createElement('div',{className:'maintenance-dashboard-pro'},[ React.createElement('div',{key:'stats',className:'stats-grid'},[ React.createElement('div',{key:'open',className:'stat-card'},[ React.createElement('div',{key:'icon',className:'stat-icon-wrapper blue'},React.createElement('i',{className:'fas fa-tools'})),React.createElement('div',{key:'content',className:'stat-content'},[ React.createElement('h3',{key:'value'},maintenanceData.stats.openTickets),React.createElement('p',{key:'label'},'Open Tickets'),React.createElement('span',{key:'trend',className:'stat-trend up'},[ React.createElement('i',{key:'icon',className:'fas fa-arrow-up'}),' 12% vs last week' ])])]),React.createElement('div',{key:'progress',className:'stat-card'},[ React.createElement('div',{key:'icon',className:'stat-icon-wrapper orange'},React.createElement('i',{className:'fas fa-spinner'})),React.createElement('div',{key:'content',className:'stat-content'},[ React.createElement('h3',{key:'value'},maintenanceData.stats.inProgress),React.createElement('p',{key:'label'},'In Progress'),React.createElement('span',{key:'subtitle',className:'stat-subtitle'},'3 vendors on-site')])]),React.createElement('div',{key:'response',className:'stat-card'},[ React.createElement('div',{key:'icon',className:'stat-icon-wrapper green'},React.createElement('i',{className:'fas fa-clock'})),React.createElement('div',{key:'content',className:'stat-content'},[ React.createElement('h3',{key:'value'},maintenanceData.stats.avgResponseTime),React.createElement('p',{key:'label'},'Avg Response Time'),React.createElement('span',{key:'trend',className:'stat-trend down'},[ React.createElement('i',{key:'icon',className:'fas fa-arrow-down'}),' 18% improvement' ])])]),React.createElement('div',{key:'spend',className:'stat-card'},[ React.createElement('div',{key:'icon',className:'stat-icon-wrapper purple'},React.createElement('i',{className:'fas fa-dollar-sign'})),React.createElement('div',{key:'content',className:'stat-content'},[ React.createElement('h3',{key:'value'},`$${(maintenanceData.stats.monthlySpend / 1000).toFixed(1)}K`),React.createElement('p',{key:'label'},'Monthly Spend'),React.createElement('span',{key:'subtitle',className:'stat-subtitle'},'Budget:$50K')])])]),React.createElement('div',{key:'recent',className:'recent-tickets-section'},[ React.createElement('div',{key:'header',className:'section-header'},[ React.createElement('h2',{key:'title'},'Recent Maintenance Requests'),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'view-all',className:'btn-text',onClick:()=> setActiveView('tickets')},'View All')])]),React.createElement('div',{key:'tickets',className:'tickets-list'},maintenanceData.tickets.slice(0,5).map(ticket => React.createElement('div',{key:ticket.id,className:'ticket-card'},[ React.createElement('div',{key:'header',className:'ticket-header'},[ React.createElement('div',{key:'info',className:'ticket-info'},[ React.createElement('h4',{key:'title'},ticket.title),React.createElement('div',{key:'meta',className:'ticket-meta'},[ React.createElement('span',{key:'id',className:'ticket-id'},ticket.id),React.createElement('span',{key:'dot1',className:'meta-separator'},'•'),React.createElement('span',{key:'property'},ticket.property),React.createElement('span',{key:'dot2',className:'meta-separator'},'•'),React.createElement('span',{key:'unit'},`Unit ${ticket.unit}`)])]),React.createElement('div',{key:'badges',className:'ticket-badges'},[ React.createElement('span',{key:'category',className:'category-badge',style:{backgroundColor:maintenanceCategories[ticket.category].bgColor,color:maintenanceCategories[ticket.category].color}},[ React.createElement('i',{key:'icon',className:`fas ${maintenanceCategories[ticket.category].icon}`}),' ',maintenanceCategories[ticket.category].label ]),React.createElement('span',{key:'priority',className:'priority-badge',style:{color:priorityConfig[ticket.priority].color}},[ React.createElement('i',{key:'icon',className:`fas ${priorityConfig[ticket.priority].icon}`}),' ',priorityConfig[ticket.priority].label ]),React.createElement('span',{key:'status',className:'status-badge',style:{color:statusConfig[ticket.status].color}},[ React.createElement('i',{key:'icon',className:`fas ${statusConfig[ticket.status].icon}`}),' ',statusConfig[ticket.status].label ])])]),React.createElement('div',{key:'footer',className:'ticket-footer'},[ React.createElement('div',{key:'tenant',className:'tenant-info'},[ React.createElement('i',{key:'icon',className:'fas fa-user'}),' ',ticket.tenant ]),ticket.vendor && React.createElement('div',{key:'vendor',className:'vendor-info'},[ React.createElement('i',{key:'icon',className:'fas fa-hard-hat'}),' ',ticket.vendor ]),React.createElement('div',{key:'time',className:'time-info'},getTimeAgo(ticket.created))])])))]),React.createElement('div',{key:'insights',className:'ai-insights-section'},[ React.createElement('div',{key:'header',className:'section-header'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),' AI Insights & Predictions' ])]),React.createElement('div',{key:'insights-grid',className:'insights-grid'},[ React.createElement('div',{key:'insight1',className:'insight-card warning'},[ React.createElement('div',{key:'icon',className:'insight-icon'},React.createElement('i',{className:'fas fa-exclamation-triangle'})),React.createElement('div',{key:'content',className:'insight-content'},[ React.createElement('h4',{key:'title'},'HVAC System Alert'),React.createElement('p',{key:'desc'},'3 units in Building A showing similar AC issues. Recommend preventive maintenance check.'),React.createElement('button',{key:'action',className:'insight-action'},'Schedule Inspection')])]),React.createElement('div',{key:'insight2',className:'insight-card success'},[ React.createElement('div',{key:'icon',className:'insight-icon'},React.createElement('i',{className:'fas fa-chart-line'})),React.createElement('div',{key:'content',className:'insight-content'},[ React.createElement('h4',{key:'title'},'Cost Optimization'),React.createElement('p',{key:'desc'},'Bundle 5 pending plumbing tasks in Sunset Apartments to save ~$450 on service calls.'),React.createElement('button',{key:'action',className:'insight-action'},'View Details')])])])])])};const TicketsView =()=>{const filteredTickets = maintenanceData.tickets.filter(ticket =>{if(activeFilter === 'all')return true;return ticket.status === activeFilter});return React.createElement('div',{className:'tickets-view-pro'},[ React.createElement('div',{key:'header',className:'view-header'},[ React.createElement('div',{key:'title-section',className:'title-section'},[ React.createElement('h1',{key:'title'},'Maintenance Tickets'),React.createElement('div',{key:'stats',className:'header-stats'},[ React.createElement('span',{key:'total'},[ React.createElement('strong',{},maintenanceData.tickets.length),' TOTAL' ]),React.createElement('span',{key:'open'},[ React.createElement('strong',{},maintenanceData.tickets.filter(t => t.status === 'open').length),' OPEN' ]),React.createElement('span',{key:'progress'},[ React.createElement('strong',{},maintenanceData.tickets.filter(t => t.status === 'in_progress').length),' IN PROGRESS' ])])]),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'filter',className:'btn btn-secondary'},[ React.createElement('i',{key:'icon',className:'fas fa-filter'}),' Filter' ]),React.createElement('button',{key:'new',className:'btn btn-primary',onClick:()=> setShowRequestModal(true)},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),' New Request' ])])]),React.createElement('div',{key:'filters',className:'filter-tabs'},['all','open','in_progress','completed'].map(filter => React.createElement('button',{key:filter,className:`filter-tab ${activeFilter === filter ? 'active':''}`,onClick:()=> setActiveFilter(filter)},filter.charAt(0).toUpperCase()+ filter.slice(1).replace('_',' ')))),React.createElement('div',{key:'grid',className:'tickets-grid'},filteredTickets.map(ticket => React.createElement('div',{key:ticket.id,className:'ticket-card-pro',onClick:()=> setCurrentRequest(ticket)},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('div',{key:'title-row',className:'title-row'},[ React.createElement('h3',{key:'title'},ticket.title),React.createElement('span',{key:'priority',className:`priority-indicator ${ticket.priority}`,style:{backgroundColor:priorityConfig[ticket.priority].color}})]),React.createElement('div',{key:'id',className:'ticket-id'},ticket.id)]),React.createElement('div',{key:'body',className:'card-body'},[ React.createElement('div',{key:'property-info',className:'info-row'},[ React.createElement('i',{key:'icon',className:'fas fa-building'}),' ',React.createElement('span',{key:'text'},`${ticket.property}- Unit ${ticket.unit}`)]),React.createElement('div',{key:'tenant-info',className:'info-row'},[ React.createElement('i',{key:'icon',className:'fas fa-user'}),' ',React.createElement('span',{key:'text'},ticket.tenant)]),ticket.vendor && React.createElement('div',{key:'vendor-info',className:'info-row'},[ React.createElement('i',{key:'icon',className:'fas fa-hard-hat'}),' ',React.createElement('span',{key:'text'},ticket.vendor)])]),React.createElement('div',{key:'footer',className:'card-footer'},[ React.createElement('div',{key:'category',className:'category-tag'},[ React.createElement('i',{key:'icon',className:`fas ${maintenanceCategories[ticket.category].icon}`,style:{color:maintenanceCategories[ticket.category].color}}),' ',maintenanceCategories[ticket.category].label ]),React.createElement('div',{key:'meta',className:'meta-info'},[ ticket.photos > 0 && React.createElement('span',{key:'photos',className:'photo-count'},[ React.createElement('i',{key:'icon',className:'fas fa-camera'}),' ',ticket.photos ]),React.createElement('span',{key:'time',className:'time-ago'},getTimeAgo(ticket.created))])])])))])};const VendorsView =()=>{return React.createElement((window.AppModules && window.AppModules.VendorManagementSystem)||(()=> React.createElement('div',{className:'vendors-view-pro'},'Loading vendor management system...')))};const getTimeAgo =(dateString)=>{const date = new Date(dateString);const now = new Date();const diff = now - date;const hours = Math.floor(diff /(1000 * 60 * 60));if(hours < 1){const minutes = Math.floor(diff /(1000 * 60));return `${minutes}min ago`}else if(hours < 24){return `${hours}hrs ago`}else{const days = Math.floor(hours / 24);return `${days}${days === 1 ? 'day':'days'}ago`}};return React.createElement('div',{className:'maintenance-ecosystem-pro'},[ React.createElement('div',{key:'nav',className:'ecosystem-nav'},[ React.createElement('div',{key:'nav-items',className:'nav-items'},[ React.createElement('button',{key:'dashboard',className:`nav-item ${activeView === 'dashboard' ? 'active':''}`,onClick:()=> setActiveView('dashboard')},[ React.createElement('i',{key:'icon',className:'fas fa-tachometer-alt'}),' Dashboard' ]),React.createElement('button',{key:'tickets',className:`nav-item ${activeView === 'tickets' ? 'active':''}`,onClick:()=> setActiveView('tickets')},[ React.createElement('i',{key:'icon',className:'fas fa-ticket-alt'}),' Tickets' ]),React.createElement('button',{key:'vendors',className:`nav-item ${activeView === 'vendors' ? 'active':''}`,onClick:()=> setActiveView('vendors')},[ React.createElement('i',{key:'icon',className:'fas fa-hard-hat'}),' Vendors' ]),React.createElement('button',{key:'ai-triage',className:`nav-item ${activeView === 'ai-triage' ? 'active':''}`,onClick:()=> setActiveView('ai-triage')},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),' AI Triage' ]),React.createElement('button',{key:'analytics',className:`nav-item ${activeView === 'analytics' ? 'active':''}`,onClick:()=> setActiveView('analytics')},[ React.createElement('i',{key:'icon',className:'fas fa-chart-bar'}),' Analytics' ])]),React.createElement('div',{key:'property-selector',className:'property-selector'},[ React.createElement('label',{key:'label'},'Property:'),React.createElement('select',{key:'select',value:selectedProperty,onChange:(e)=> setSelectedProperty(e.target.value),className:'property-select'},[ React.createElement('option',{key:'all',value:'all'},'All Properties'),React.createElement('option',{key:'sunset',value:'sunset'},'Sunset Apartments'),React.createElement('option',{key:'downtown',value:'downtown'},'Downtown Plaza'),React.createElement('option',{key:'garden',value:'garden'},'Garden Complex')])])]),React.createElement('div',{key:'content',className:'ecosystem-content'},activeView === 'dashboard' ? DashboardView():activeView === 'tickets' ? React.createElement((window.AppModules && window.AppModules.MaintenanceCommand)||(()=> React.createElement('div',{},'Loading Maintenance Command Center...'))):activeView === 'vendors' ? VendorsView():activeView === 'ai-triage' ? React.createElement((window.AppModules && window.AppModules.TenantMaintenanceChat)||(()=> React.createElement('div',{},'Loading AI Triage...')),{property:selectedProperty === 'all' ? 'All Properties':selectedProperty,unit:'Demo',tenant:{first_name:'Demo',last_name:'User'}}):React.createElement('div',{className:'coming-soon'},[ React.createElement('i',{key:'icon',className:'fas fa-hard-hat fa-3x'}),React.createElement('h2',{key:'title'},'Coming Soon'),React.createElement('p',{key:'desc'},'This feature is under development')]))])};window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceEcosystemPro = MaintenanceEcosystemPro;

// FinancialModulesPlaceholder.jsx
const FinancialStatementsModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Financial Statements'),React.createElement('p',{key:'desc'},'Income Statement,Balance Sheet,and Cash Flow Statement'),React.createElement('div',{key:'info',className:'placeholder-info'},`Period:${props.period?.start}to ${props.period?.end}| Basis:${props.basisType}`)])}})();const AccountsReceivableModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Accounts Receivable'),React.createElement('p',{key:'desc'},'Rent Roll & AR Aging Reports'),React.createElement('div',{key:'info',className:'placeholder-info'},`As of:${props.asOfDate}`)])}})();const AccountsPayableModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Accounts Payable'),React.createElement('p',{key:'desc'},'Vendor Bills & AP Aging Reports'),React.createElement('div',{key:'info',className:'placeholder-info'},`As of:${props.asOfDate}`)])}})();const BankReconciliationModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Bank Reconciliation'),React.createElement('p',{key:'desc'},'Bank Feed Matching & Clearing'),React.createElement('div',{key:'info',className:'placeholder-info'},`Period:${props.period?.start}to ${props.period?.end}`)])}})();const BudgetingModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Budgeting & Forecasting'),React.createElement('p',{key:'desc'},'Budget vs Actual Analysis'),React.createElement('div',{key:'info',className:'placeholder-info'},`Property:${props.property?.name || 'All Properties'}`)])}})();const OwnerStatementsModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Owner Statements'),React.createElement('p',{key:'desc'},'Owner Equity & Distributions'),React.createElement('div',{key:'info',className:'placeholder-info'},`Entity:${props.entity?.name || 'All Entities'}`)])}})();const TaxComplianceModule =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Tax & Compliance'),React.createElement('p',{key:'desc'},'1099s,Sales Tax,Regulatory Reports'),React.createElement('div',{key:'info',className:'placeholder-info'},`Tax Year:${props.taxYear}`)])}})();const AIFinancialInsights =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'AI Financial Insights'),React.createElement('p',{key:'desc'},'ML Predictions & Anomaly Detection'),React.createElement('div',{key:'coming-soon',className:'coming-soon-badge'},React.createElement('i',{className:'fas fa-robot'}),' AI Analysis Coming Soon')])}})();const FinancialIntegrations =(()=>{return(props)=>{return React.createElement('div',{className:'content-placeholder'},[ React.createElement('h2',{key:'title'},'Integrations'),React.createElement('p',{key:'desc'},'QuickBooks,Banks,APIs'),React.createElement('div',{key:'integrations',className:'integration-list'},[ React.createElement('div',{key:'qb',className:'integration-item'},[ React.createElement('i',{key:'icon',className:'fas fa-plug'}),' QuickBooks Online' ]),React.createElement('div',{key:'plaid',className:'integration-item'},[ React.createElement('i',{key:'icon',className:'fas fa-university'}),' Plaid Bank Feeds' ]),React.createElement('div',{key:'api',className:'integration-item'},[ React.createElement('i',{key:'icon',className:'fas fa-code'}),' REST API' ])])])}})();window.AppModules = window.AppModules ||{};window.AppModules.FinancialStatementsModule = FinancialStatementsModule;window.AppModules.AccountsReceivableModule = AccountsReceivableModule;window.AppModules.AccountsPayableModule = AccountsPayableModule;window.AppModules.BankReconciliationModule = BankReconciliationModule;window.AppModules.BudgetingModule = BudgetingModule;window.AppModules.OwnerStatementsModule = OwnerStatementsModule;window.AppModules.TaxComplianceModule = TaxComplianceModule;window.AppModules.AIFinancialInsights = AIFinancialInsights;window.AppModules.FinancialIntegrations = FinancialIntegrations;

// GeneralLedgerModule.jsx
const GeneralLedgerModule =(()=>{const ComponentFactory ={createComponent:(name,options ={})=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:true,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);const refetch = async()=>{try{setState({loading:true,data:state.data,error:null});const data = await asyncFunc();setState({loading:false,data,error:null})}catch(error){setState({loading:false,data:null,error})}};return{...state,refetch}},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('GeneralLedgerModule',{})((props,helpers)=>{const{period,filters}= props;const{useLocalState,useAsyncState,formatCurrency}= helpers;const [state,updateState] = useLocalState({selectedAccount:null,showJournalEntry:false,newJEData:{},searchQuery:'',sortBy:'date',sortOrder:'desc'});const glData = useAsyncState(async()=>{await new Promise(resolve => setTimeout(resolve,800));return{transactions:[{je_number:'JE202501-0001',je_date:'2025-01-15',memo:'January Rent Collection',source_module:'AR',lines:[{account:'1100 - Cash',debit:125000,credit:0,property:'Sunset Apartments'},{account:'4100 - Rental Income',debit:0,credit:125000,property:'Sunset Apartments'}]},{je_number:'JE202501-0002',je_date:'2025-01-10',memo:'Property Management Fee',source_module:'AP',lines:[{account:'6100 - Management Fees',debit:20000,credit:0,property:'All Properties'},{account:'2100 - Accounts Payable',debit:0,credit:20000,property:'All Properties'}]},{je_number:'JE202501-0003',je_date:'2025-01-08',memo:'Maintenance and Repairs',source_module:'AP',lines:[{account:'6200 - Maintenance',debit:5500,credit:0,property:'Downtown Plaza'},{account:'1100 - Cash',debit:0,credit:5500,property:'Downtown Plaza'}]}]}},[period,filters,state.searchQuery,state.sortBy,state.sortOrder]);const chartOfAccounts = useAsyncState(async()=>{await new Promise(resolve => setTimeout(resolve,500));return [{id:'1100',name:'1100 - Cash',type:'Asset'},{id:'1200',name:'1200 - Accounts Receivable',type:'Asset'},{id:'2100',name:'2100 - Accounts Payable',type:'Liability'},{id:'3100',name:'3100 - Owner Equity',type:'Equity'},{id:'4100',name:'4100 - Rental Income',type:'Revenue'},{id:'6100',name:'6100 - Management Fees',type:'Expense'},{id:'6200',name:'6200 - Maintenance',type:'Expense'}]},[]);const createJournalEntry = async(jeData)=>{try{await new Promise(resolve => setTimeout(resolve,1000));updateState({showJournalEntry:false,newJEData:{}});glData.refetch();window.Toast && window.Toast.success('Journal entry created successfully')}catch(error){window.Toast && window.Toast.error('Failed to create journal entry:' + error.message)}};return React.createElement('div',{className:'general-ledger-module'},[ React.createElement('div',{key:'controls',className:'gl-controls'},[ React.createElement('div',{key:'search',className:'gl-search'},React.createElement('input',{type:'text',placeholder:'Search transactions...',value:state.searchQuery,onChange:(e)=> updateState({searchQuery:e.target.value})})),React.createElement('button',{key:'new-je',className:'btn btn-primary',onClick:()=> updateState({showJournalEntry:true})},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'New Journal Entry' ])]),React.createElement('div',{key:'transactions',className:'gl-transactions'},glData.loading ? React.createElement('div',{className:'loading'},'Loading transactions...'):React.createElement(GLTransactionList,{transactions:glData.data?.transactions || [],accounts:chartOfAccounts.data || [],onTransactionClick:(transaction)=> updateState({selectedTransaction:transaction})})),state.showJournalEntry && React.createElement(JournalEntryModal,{key:'je-modal',accounts:chartOfAccounts.data || [],onSave:createJournalEntry,onClose:()=> updateState({showJournalEntry:false})})])})})();const GLTransactionList =(()=>{return(props)=>{const{transactions,onTransactionClick}= props;const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)};return React.createElement('div',{className:'transaction-list'},transactions.map((transaction,index)=> React.createElement('div',{key:index,className:'transaction-item',onClick:()=> onTransactionClick && onTransactionClick(transaction)},[ React.createElement('div',{key:'date',className:'transaction-date'},transaction.je_date),React.createElement('div',{key:'info',className:'transaction-info'},[ React.createElement('div',{key:'number',className:'transaction-number'},transaction.je_number),React.createElement('div',{key:'desc',className:'transaction-description'},transaction.memo),React.createElement('div',{key:'source',className:'transaction-source'},`Source:${transaction.source_module}`)]),React.createElement('div',{key:'lines',className:'transaction-lines'},transaction.lines.map((line,lineIndex)=> React.createElement('div',{key:lineIndex,className:'line-item'},[ React.createElement('span',{key:'account',className:'line-account'},line.account),line.debit > 0 && React.createElement('span',{key:'debit',className:'amount-debit'},formatCurrency(line.debit)),line.credit > 0 && React.createElement('span',{key:'credit',className:'amount-credit'},formatCurrency(line.credit)),React.createElement('span',{key:'property',className:'line-property'},line.property)]))),React.createElement('div',{key:'actions',className:'transaction-actions'},[ React.createElement('button',{key:'view',className:'action-btn'},React.createElement('i',{className:'fas fa-eye'})),React.createElement('button',{key:'print',className:'action-btn'},React.createElement('i',{className:'fas fa-print'}))])])))}})();const JournalEntryModal =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('JournalEntryModal')((props,helpers)=>{const{accounts,onSave,onClose}= props;const [state,updateState] = helpers.useLocalState({date:new Date().toISOString().split('T')[0],memo:'',lines:[{account:'',debit:0,credit:0,description:''},{account:'',debit:0,credit:0,description:''}]});const addLine =()=>{updateState({lines:[...state.lines,{account:'',debit:0,credit:0,description:''}]})};const updateLine =(index,field,value)=>{const newLines = [...state.lines];newLines[index][field] = value;updateState({lines:newLines})};const removeLine =(index)=>{const newLines = state.lines.filter((_,i)=> i !== index);updateState({lines:newLines})};const getTotalDebits =()=>{return state.lines.reduce((sum,line)=> sum + parseFloat(line.debit || 0),0)};const getTotalCredits =()=>{return state.lines.reduce((sum,line)=> sum + parseFloat(line.credit || 0),0)};const isBalanced =()=>{return Math.abs(getTotalDebits()- getTotalCredits())< 0.01};const handleSave =()=>{if(!isBalanced()){alert('Journal entry must be balanced!');return}onSave({je_date:state.date,memo:state.memo,lines:state.lines})};return React.createElement('div',{className:'modal-overlay',onClick:onClose},React.createElement('div',{className:'modal-content journal-entry-modal',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title'},'New Journal Entry'),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'body',className:'modal-body'},[ React.createElement('div',{key:'form-row',className:'form-row'},[ React.createElement('div',{key:'date',className:'form-group'},[ React.createElement('label',{key:'label'},'Date'),React.createElement('input',{key:'input',type:'date',value:state.date,onChange:(e)=> updateState({date:e.target.value})})]),React.createElement('div',{key:'memo',className:'form-group flex-grow'},[ React.createElement('label',{key:'label'},'Memo'),React.createElement('input',{key:'input',type:'text',value:state.memo,onChange:(e)=> updateState({memo:e.target.value}),placeholder:'Enter description...'})])]),React.createElement('div',{key:'lines',className:'je-lines'},[ React.createElement('table',{key:'table',className:'je-lines-table'},[ React.createElement('thead',{key:'thead'},React.createElement('tr',{},[ React.createElement('th',{key:'account'},'Account'),React.createElement('th',{key:'desc'},'Description'),React.createElement('th',{key:'debit'},'Debit'),React.createElement('th',{key:'credit'},'Credit'),React.createElement('th',{key:'actions'},'')])),React.createElement('tbody',{key:'tbody'},state.lines.map((line,index)=> React.createElement('tr',{key:index},[ React.createElement('td',{key:'account'},React.createElement('select',{value:line.account,onChange:(e)=> updateLine(index,'account',e.target.value)},[ React.createElement('option',{key:'empty',value:''},'Select account...'),...accounts.map(account => React.createElement('option',{key:account.id,value:account.name},account.name))])),React.createElement('td',{key:'desc'},React.createElement('input',{type:'text',value:line.description,onChange:(e)=> updateLine(index,'description',e.target.value)})),React.createElement('td',{key:'debit'},React.createElement('input',{type:'number',value:line.debit || '',onChange:(e)=> updateLine(index,'debit',parseFloat(e.target.value)|| 0),min:'0',step:'0.01'})),React.createElement('td',{key:'credit'},React.createElement('input',{type:'number',value:line.credit || '',onChange:(e)=> updateLine(index,'credit',parseFloat(e.target.value)|| 0),min:'0',step:'0.01'})),React.createElement('td',{key:'actions'},state.lines.length > 2 && React.createElement('button',{className:'remove-line-btn',onClick:()=> removeLine(index)},'×'))])))]),React.createElement('button',{key:'add-line',className:'add-line-btn',onClick:addLine},'+ Add Line')]),React.createElement('div',{key:'totals',className:'je-totals'},[ React.createElement('div',{key:'debit',className:'total-item'},[ React.createElement('span',{key:'label'},'Total Debits:'),React.createElement('span',{key:'value'},`$${getTotalDebits().toFixed(2)}`)]),React.createElement('div',{key:'credit',className:'total-item'},[ React.createElement('span',{key:'label'},'Total Credits:'),React.createElement('span',{key:'value'},`$${getTotalCredits().toFixed(2)}`)]),React.createElement('div',{key:'balance',className:`total-item ${isBalanced()? 'balanced':'unbalanced'}`},[ React.createElement('span',{key:'label'},'Status:'),React.createElement('span',{key:'value'},isBalanced()? 'Balanced':'Unbalanced')])])]),React.createElement('div',{key:'footer',className:'modal-footer'},[ React.createElement('button',{key:'cancel',className:'btn btn-secondary',onClick:onClose},'Cancel'),React.createElement('button',{key:'save',className:'btn btn-primary',onClick:handleSave,disabled:!isBalanced()},'Save Journal Entry')])]))})})();window.AppModules = window.AppModules ||{};window.AppModules.GeneralLedgerModule = GeneralLedgerModule;

// UnitsWorldClass.jsx
const UnitsWorldClass =()=>{const [units,setUnits] = React.useState([]);const [view,setView] = React.useState('grid');const [selectedUnits,setSelectedUnits] = React.useState([]);const [filters,setFilters] = React.useState({search:'',properties:[],status:[],bedrooms:[],priceRange:{min:null,max:null},amenities:[],availability:'all'});const [sortBy,setSortBy] = React.useState('unit');const [sortOrder,setSortOrder] = React.useState('asc');const [showFilters,setShowFilters] = React.useState(true);const [bulkAction,setBulkAction] = React.useState('');const [customColumns,setCustomColumns] = React.useState([ 'unit','property','status','tenant','rent','market','bedrooms','sqft','available' ]);React.useEffect(()=>{loadUnits()},[filters,sortBy,sortOrder]);const loadUnits = async()=>{setUnits(generateMockUnits())};const generateMockUnits =()=>{const properties = [ 'Sunset Apartments','Downtown Plaza','Garden Complex','Riverside Tower','Park View Residences' ];const statuses = ['occupied','vacant','maintenance','reserved'];const units = [];for(let i = 0;i < 150;i++){const property = properties[Math.floor(Math.random()* properties.length)];const status = statuses[Math.floor(Math.random()* statuses.length)];const bedrooms = Math.floor(Math.random()* 4)+ 1;const baseRent = 1000 +(bedrooms * 500)+(Math.random()* 1000);units.push({id:i + 1,unit:`${Math.floor(i / 50)+ 1}${String(i % 50 + 1).padStart(2,'0')}`,property,building:`Building ${String.fromCharCode(65 + Math.floor(i / 50))}`,floor:Math.floor((i % 50)/ 10)+ 1,status,tenant:status === 'occupied' ? `Tenant ${i + 1}`:null,bedrooms,bathrooms:bedrooms > 1 ? 2:1,sqft:600 +(bedrooms * 200)+ Math.floor(Math.random()* 200),rent:Math.round(baseRent),marketRent:Math.round(baseRent *(0.95 + Math.random()* 0.15)),deposit:Math.round(baseRent * 1.5),leaseStart:status === 'occupied' ? '2024-01-01':null,leaseEnd:status === 'occupied' ? '2025-01-01':null,moveIn:status === 'occupied' ? '2024-01-01':null,lastRenovation:'2023-06-15',amenities:['Parking','Storage','Balcony','In-Unit Laundry'] .filter(()=> Math.random()> 0.5),utilities:['Water','Trash','Gas'].filter(()=> Math.random()> 0.3),petsAllowed:Math.random()> 0.5,furnished:Math.random()> 0.8,daysVacant:status === 'vacant' ? Math.floor(Math.random()* 60):0,turnoverCost:status === 'vacant' ? Math.round(Math.random()* 2000):0,maintenanceRequests:Math.floor(Math.random()* 5),paymentStatus:status === 'occupied' ?(Math.random()> 0.1 ? 'current':'late'):null,notes:''})}return units};const calculateMetrics =()=>{const total = units.length;const occupied = units.filter(u => u.status === 'occupied').length;const vacant = units.filter(u => u.status === 'vacant').length;const maintenance = units.filter(u => u.status === 'maintenance').length;const reserved = units.filter(u => u.status === 'reserved').length;const totalRent = units .filter(u => u.status === 'occupied').reduce((sum,u)=> sum + u.rent,0);const potentialRent = units.reduce((sum,u)=> sum + u.marketRent,0);const avgDaysVacant = vacant > 0 ? units.filter(u => u.status === 'vacant').reduce((sum,u)=> sum + u.daysVacant,0)/ vacant:0;return{total,occupied,vacant,maintenance,reserved,occupancyRate:((occupied / total)* 100).toFixed(1),vacancyRate:((vacant / total)* 100).toFixed(1),totalRent,potentialRent,rentLoss:potentialRent - totalRent,avgDaysVacant:avgDaysVacant.toFixed(0),economicOccupancy:((totalRent / potentialRent)* 100).toFixed(1)}};const metrics = calculateMetrics();const filteredUnits = React.useMemo(()=>{return units.filter(unit =>{if(filters.search){const search = filters.search.toLowerCase();if(!unit.unit.toLowerCase().includes(search)&& !unit.property.toLowerCase().includes(search)&& !(unit.tenant && unit.tenant.toLowerCase().includes(search))){return false}}if(filters.properties.length > 0 && !filters.properties.includes(unit.property)){return false}if(filters.status.length > 0 && !filters.status.includes(unit.status)){return false}if(filters.bedrooms.length > 0 && !filters.bedrooms.includes(unit.bedrooms)){return false}if(filters.priceRange.min && unit.rent < filters.priceRange.min)return false;if(filters.priceRange.max && unit.rent > filters.priceRange.max)return false;return true}).sort((a,b)=>{const aVal = a[sortBy];const bVal = b[sortBy];const modifier = sortOrder === 'asc' ? 1:-1;if(typeof aVal === 'string'){return aVal.localeCompare(bVal)* modifier}return(aVal - bVal)* modifier})},[units,filters,sortBy,sortOrder]);const Header =()=>{return React.createElement('div',{className:'units-header-pro'},[ React.createElement('div',{key:'title-section',className:'header-title-section'},[ React.createElement('h1',{key:'title'},'Units'),React.createElement('p',{key:'subtitle',className:'header-subtitle'},`${filteredUnits.length}of ${units.length}units shown`)]),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'filters',className:'btn-icon',onClick:()=> setShowFilters(!showFilters),title:'Toggle Filters'},[ React.createElement('i',{key:'icon',className:'fas fa-filter'}),showFilters && React.createElement('span',{key:'dot',className:'active-dot'})]),React.createElement('div',{key:'view-toggle',className:'view-toggle'},['grid','list','map','analytics'].map(v => React.createElement('button',{key:v,className:`view-btn ${view === v ? 'active':''}`,onClick:()=> setView(v)},[ React.createElement('i',{key:'icon',className:`fas fa-${v === 'grid' ? 'th':v === 'list' ? 'list':v === 'map' ? 'map-marked-alt':'chart-bar'}`})]))),React.createElement('button',{key:'export',className:'btn btn-secondary'},[ React.createElement('i',{key:'icon',className:'fas fa-download'}),' Export' ]),React.createElement('button',{key:'add',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),' Add Unit' ])])])};const MetricsCards =()=>{const cards = [{title:'Occupancy Rate',value:`${metrics.occupancyRate}%`,subtitle:`${metrics.occupied}of ${metrics.total}units`,icon:'fa-home',color:'#10b981',trend:'+2.3%',trendUp:true},{title:'Vacant Units',value:metrics.vacant,subtitle:`${metrics.avgDaysVacant}avg days`,icon:'fa-door-open',color:'#f59e0b',trend:metrics.vacant > 0 ? `$${(metrics.rentLoss / 1000).toFixed(1)}K lost`:'No loss',trendUp:false},{title:'Monthly Revenue',value:`$${(metrics.totalRent / 1000).toFixed(1)}K`,subtitle:`of $${(metrics.potentialRent / 1000).toFixed(1)}K potential`,icon:'fa-dollar-sign',color:'#3b82f6',trend:'+5.2%',trendUp:true},{title:'Maintenance',value:metrics.maintenance,subtitle:'Units under repair',icon:'fa-tools',color:'#ef4444',trend:'2 scheduled today',trendUp:null}];return React.createElement('div',{className:'metrics-cards-grid'},cards.map((card,idx)=> React.createElement('div',{key:idx,className:'metric-card-pro'},[ React.createElement('div',{key:'header',className:'metric-card-header'},[ React.createElement('div',{key:'icon',className:'metric-icon',style:{backgroundColor:`${card.color}20`,color:card.color}},React.createElement('i',{className:`fas ${card.icon}`})),React.createElement('div',{key:'menu',className:'metric-menu'},React.createElement('i',{className:'fas fa-ellipsis-h'}))]),React.createElement('div',{key:'value',className:'metric-value'},card.value),React.createElement('div',{key:'title',className:'metric-title'},card.title),React.createElement('div',{key:'subtitle',className:'metric-subtitle'},card.subtitle),card.trend && React.createElement('div',{key:'trend',className:`metric-trend ${card.trendUp ? 'up':card.trendUp === false ? 'down':''}`},[ card.trendUp !== null && React.createElement('i',{key:'icon',className:`fas fa-arrow-${card.trendUp ? 'up':'down'}`}),' ',card.trend ])])))};const FiltersPanel =()=>{if(!showFilters)return null;return React.createElement('div',{className:'filters-panel-pro'},[ React.createElement('div',{key:'search',className:'filter-section'},[ React.createElement('div',{key:'search-box',className:'search-box-pro'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search units,properties,tenants...',value:filters.search,onChange:(e)=> setFilters({...filters,search:e.target.value})})])]),React.createElement('div',{key:'filters',className:'filters-row'},[ React.createElement('div',{key:'status',className:'filter-group'},[ React.createElement('label',{key:'label'},'Status'),React.createElement('div',{key:'options',className:'filter-options'},['occupied','vacant','maintenance','reserved'].map(status => React.createElement('button',{key:status,className:`filter-chip ${filters.status.includes(status)? 'active':''}`,onClick:()=>{const newStatus = filters.status.includes(status)? filters.status.filter(s => s !== status):[...filters.status,status];setFilters({...filters,status:newStatus})}},[ React.createElement('span',{key:'dot',className:`status-dot ${status}`}),status.charAt(0).toUpperCase()+ status.slice(1)])))]),React.createElement('div',{key:'bedrooms',className:'filter-group'},[ React.createElement('label',{key:'label'},'Bedrooms'),React.createElement('div',{key:'options',className:'filter-options'},[1,2,3,4].map(num => React.createElement('button',{key:num,className:`filter-chip ${filters.bedrooms.includes(num)? 'active':''}`,onClick:()=>{const newBedrooms = filters.bedrooms.includes(num)? filters.bedrooms.filter(b => b !== num):[...filters.bedrooms,num];setFilters({...filters,bedrooms:newBedrooms})}},`${num}BR`)))]),React.createElement('div',{key:'price',className:'filter-group'},[ React.createElement('label',{key:'label'},'Rent Range'),React.createElement('div',{key:'inputs',className:'range-inputs'},[ React.createElement('input',{key:'min',type:'number',placeholder:'Min',value:filters.priceRange.min || '',onChange:(e)=> setFilters({...filters,priceRange:{...filters.priceRange,min:e.target.value ? parseInt(e.target.value):null}})}),React.createElement('span',{key:'dash'},'-'),React.createElement('input',{key:'max',type:'number',placeholder:'Max',value:filters.priceRange.max || '',onChange:(e)=> setFilters({...filters,priceRange:{...filters.priceRange,max:e.target.value ? parseInt(e.target.value):null}})})])]),React.createElement('button',{key:'clear',className:'btn-text',onClick:()=> setFilters({search:'',properties:[],status:[],bedrooms:[],priceRange:{min:null,max:null},amenities:[],availability:'all'})},'Clear All')])])};const GridView =()=>{return React.createElement('div',{className:'units-grid-pro'},filteredUnits.map(unit => React.createElement('div',{key:unit.id,className:`unit-card-pro ${unit.status}`,onClick:()=>},[ React.createElement('div',{key:'header',className:'unit-card-header'},[ React.createElement('div',{key:'unit-info'},[ React.createElement('h3',{key:'unit'},unit.unit),React.createElement('p',{key:'property'},unit.property)]),React.createElement('div',{key:'status',className:`unit-status ${unit.status}`},unit.status)]),React.createElement('div',{key:'details',className:'unit-details'},[ React.createElement('div',{key:'specs',className:'unit-specs'},[ React.createElement('span',{key:'bed'},[ React.createElement('i',{key:'icon',className:'fas fa-bed'}),` ${unit.bedrooms}` ]),React.createElement('span',{key:'bath'},[ React.createElement('i',{key:'icon',className:'fas fa-bath'}),` ${unit.bathrooms}` ]),React.createElement('span',{key:'sqft'},`${unit.sqft}sqft`)]),unit.status === 'occupied' && React.createElement('div',{key:'tenant',className:'unit-tenant'},[ React.createElement('i',{key:'icon',className:'fas fa-user'}),' ',unit.tenant ]),React.createElement('div',{key:'rent',className:'unit-rent'},[ React.createElement('span',{key:'amount',className:'rent-amount'},`$${unit.rent.toLocaleString()}`),React.createElement('span',{key:'month'},'/mo'),unit.marketRent > unit.rent && React.createElement('span',{key:'market',className:'market-rent'},`Market:$${unit.marketRent.toLocaleString()}`)])]),React.createElement('div',{key:'footer',className:'unit-card-footer'},[ unit.status === 'vacant' && React.createElement('span',{key:'vacant',className:'vacant-days'},`Vacant ${unit.daysVacant}days`),React.createElement('div',{key:'actions',className:'unit-actions'},[ React.createElement('button',{key:'view',className:'btn-icon-small',onClick:(e)=>{e.stopPropagation()}},React.createElement('i',{className:'fas fa-eye'})),React.createElement('button',{key:'edit',className:'btn-icon-small',onClick:(e)=>{e.stopPropagation()}},React.createElement('i',{className:'fas fa-edit'}))])])])))};const ListView =()=>{const columns = [{key:'unit',label:'Unit',sortable:true},{key:'property',label:'Property',sortable:true},{key:'status',label:'Status',sortable:true},{key:'tenant',label:'Tenant',sortable:true},{key:'bedrooms',label:'Bed',sortable:true},{key:'bathrooms',label:'Bath',sortable:true},{key:'sqft',label:'Sq Ft',sortable:true},{key:'rent',label:'Rent',sortable:true},{key:'marketRent',label:'Market',sortable:true},{key:'available',label:'Available',sortable:false}];return React.createElement('div',{className:'units-list-pro'},[ selectedUnits.length > 0 && React.createElement('div',{key:'bulk-actions',className:'bulk-actions-bar'},[ React.createElement('span',{key:'count'},`${selectedUnits.length}units selected`),React.createElement('div',{key:'actions',className:'bulk-actions'},[ React.createElement('button',{key:'email',className:'btn-text'},'Email Tenants'),React.createElement('button',{key:'export',className:'btn-text'},'Export Selected'),React.createElement('button',{key:'update',className:'btn-text'},'Bulk Update')])]),React.createElement('div',{key:'table-wrapper',className:'table-wrapper'},React.createElement('table',{className:'units-table'},[ React.createElement('thead',{key:'head'},React.createElement('tr',{},[ React.createElement('th',{key:'checkbox'},React.createElement('input',{type:'checkbox',checked:selectedUnits.length === filteredUnits.length,onChange:(e)=>{if(e.target.checked){setSelectedUnits(filteredUnits.map(u => u.id))}else{setSelectedUnits([])}}})),...columns.filter(col => customColumns.includes(col.key)).map(col => React.createElement('th',{key:col.key,className:col.sortable ? 'sortable':'',onClick:col.sortable ?()=>{if(sortBy === col.key){setSortOrder(sortOrder === 'asc' ? 'desc':'asc')}else{setSortBy(col.key);setSortOrder('asc')}}:undefined},[ col.label,col.sortable && sortBy === col.key && React.createElement('i',{key:'sort',className:`fas fa-sort-${sortOrder === 'asc' ? 'up':'down'}`})])),React.createElement('th',{key:'actions'},'Actions')])),React.createElement('tbody',{key:'body'},filteredUnits.map(unit => React.createElement('tr',{key:unit.id,className:selectedUnits.includes(unit.id)? 'selected':''},[ React.createElement('td',{key:'checkbox'},React.createElement('input',{type:'checkbox',checked:selectedUnits.includes(unit.id),onChange:(e)=>{if(e.target.checked){setSelectedUnits([...selectedUnits,unit.id])}else{setSelectedUnits(selectedUnits.filter(id => id !== unit.id))}}})),customColumns.includes('unit')&& React.createElement('td',{key:'unit',className:'unit-cell'},unit.unit),customColumns.includes('property')&& React.createElement('td',{key:'property'},unit.property),customColumns.includes('status')&& React.createElement('td',{key:'status'},React.createElement('span',{className:`status-badge ${unit.status}`},unit.status)),customColumns.includes('tenant')&& React.createElement('td',{key:'tenant'},unit.tenant || '-'),customColumns.includes('bedrooms')&& React.createElement('td',{key:'bedrooms'},unit.bedrooms),customColumns.includes('bathrooms')&& React.createElement('td',{key:'bathrooms'},unit.bathrooms),customColumns.includes('sqft')&& React.createElement('td',{key:'sqft'},unit.sqft.toLocaleString()),customColumns.includes('rent')&& React.createElement('td',{key:'rent',className:'rent-cell'},`$${unit.rent.toLocaleString()}`),customColumns.includes('market')&& React.createElement('td',{key:'market'},`$${unit.marketRent.toLocaleString()}`),customColumns.includes('available')&& React.createElement('td',{key:'available'},unit.leaseEnd || 'Now'),React.createElement('td',{key:'actions',className:'actions-cell'},[ React.createElement('button',{key:'view',className:'btn-icon-small',title:'View Details'},React.createElement('i',{className:'fas fa-eye'})),React.createElement('button',{key:'edit',className:'btn-icon-small',title:'Edit'},React.createElement('i',{className:'fas fa-edit'})),React.createElement('button',{key:'more',className:'btn-icon-small',title:'More Actions'},React.createElement('i',{className:'fas fa-ellipsis-v'}))])])))]))])};return React.createElement('div',{className:'units-world-class'},[ Header(),MetricsCards(),FiltersPanel(),React.createElement('div',{key:'content',className:'units-content'},view === 'grid' ? GridView():view === 'list' ? ListView():view === 'map' ? React.createElement('div',{className:'map-view'},'Map View Coming Soon'):React.createElement('div',{className:'analytics-view'},'Analytics View Coming Soon'))])};window.AppModules = window.AppModules ||{};window.AppModules.UnitsWorldClass = UnitsWorldClass;

// FinancialAccountingEngine.jsx
const FinancialAccountingEngine =(()=>{const ComponentFactory ={createComponent:(name,options ={})=>(componentFunc)=>{const Component =(props)=>{const [error,setError] = React.useState(null);if(error && options.withErrorBoundary){return React.createElement('div',{className:'error-boundary'},React.createElement('h3',{},'Error in ' + name),React.createElement('p',{},error.message))}try{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:true,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);const refetch = async()=>{try{setState({loading:true,data:state.data,error:null});const data = await asyncFunc();setState({loading:false,data,error:null})}catch(error){setState({loading:false,data:null,error})}};return{...state,refetch}},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatPercentage:(value)=>{return new Intl.NumberFormat('en-US',{style:'percent',minimumFractionDigits:1,maximumFractionDigits:1}).format(value || 0)}};return componentFunc(props,helpers)}catch(err){if(options.withErrorBoundary){setError(err);return null}throw err}};Component.displayName = name;return Component}};const Engine = ComponentFactory.createComponent('FinancialAccountingEngine',{withPerformanceTracking:true,withErrorBoundary:true})((props,helpers)=>{const{useLocalState,useAsyncState,formatCurrency,formatPercentage}= helpers;const [state,updateState] = useLocalState({activeModule:'dashboard',selectedPeriod:{start:'2025-01-01',end:'2025-01-31'},basisType:'accrual',selectedEntity:null,selectedProperty:null,reportFilters:{},realTimeUpdates:true});const FinancialControls =({selectedPeriod,basisType,selectedEntity,selectedProperty,onPeriodChange,onBasisChange,onEntityChange,onPropertyChange})=>{return React.createElement('div',{style:{background:'rgba(255,255,255,0.95)',backdropFilter:'blur(20px)',borderBottom:'1px solid rgba(255,255,255,0.2)',padding:'16px 30px',position:'sticky',top:'0',zIndex:'100',boxShadow:'0 4px 20px rgba(0,0,0,0.1)',display:'flex',flexDirection:'row',justifyContent:'space-between',alignItems:'center',width:'100%',minHeight:'60px',}},[ React.createElement('div',{key:'period',style:{display:'flex',flexDirection:'row',alignItems:'center',gap:'8px',flex:'1',}},[ React.createElement('label',{key:'label',className:'control-label'},'Period'),React.createElement('select',{key:'select',value:`${selectedPeriod.start}_${selectedPeriod.end}`,onChange:(e)=>{const [start,end] = e.target.value.split('_');onPeriodChange({start,end})},className:'control-select'},[ React.createElement('option',{key:'jan',value:'2025-01-01_2025-01-31'},'January 2025'),React.createElement('option',{key:'q1',value:'2025-01-01_2025-03-31'},'Q1 2025'),React.createElement('option',{key:'ytd',value:'2025-01-01_2025-12-31'},'Year to Date'),React.createElement('option',{key:'custom',value:'custom'},'Custom Range...')])]),React.createElement('div',{key:'basis',style:{display:'flex',flexDirection:'row',alignItems:'center',gap:'8px',flex:'1',}},[ React.createElement('label',{key:'label',className:'control-label'},'Basis'),React.createElement('div',{key:'buttons',className:'basis-toggle-horizontal'},[ React.createElement('button',{key:'accrual',className:`basis-btn-horizontal ${basisType === 'accrual' ? 'active':''}`,onClick:()=> onBasisChange('accrual')},'Accrual'),React.createElement('button',{key:'cash',className:`basis-btn-horizontal ${basisType === 'cash' ? 'active':''}`,onClick:()=> onBasisChange('cash')},'Cash')])]),React.createElement('div',{key:'entity',style:{display:'flex',flexDirection:'row',alignItems:'center',gap:'8px',flex:'1',}},[ React.createElement('label',{key:'label',className:'control-label'},'Entity'),React.createElement('select',{key:'select',value:selectedEntity || '',onChange:(e)=> onEntityChange(e.target.value),className:'control-select'},[ React.createElement('option',{key:'all',value:''},'All Entities'),React.createElement('option',{key:'e1',value:'bdpms-llc'},'BDPMS LLC'),React.createElement('option',{key:'e2',value:'sunset-holdings'},'Sunset Holdings'),React.createElement('option',{key:'e3',value:'downtown-management'},'Downtown Management')])]),React.createElement('div',{key:'property',style:{display:'flex',flexDirection:'row',alignItems:'center',gap:'8px',flex:'1',}},[ React.createElement('label',{key:'label',className:'control-label'},'Property'),React.createElement('select',{key:'select',value:selectedProperty || '',onChange:(e)=> onPropertyChange(e.target.value),className:'control-select'},[ React.createElement('option',{key:'all',value:''},'All Properties'),React.createElement('option',{key:'p1',value:'sunset-apts'},'Sunset Apartments'),React.createElement('option',{key:'p2',value:'downtown-plaza'},'Downtown Plaza'),React.createElement('option',{key:'p3',value:'garden-complex'},'Garden Complex')])])])};const financialModules = [{id:'dashboard',title:'Financial Dashboard',icon:'fa-chart-line',description:'Real-time KPIs & Performance'},{id:'general-ledger',title:'General Ledger',icon:'fa-book',description:'Double-Entry GL & Journal Entries'},{id:'trial-balance',title:'Trial Balance',icon:'fa-balance-scale',description:'Account Balances & Verification'},{id:'financial-statements',title:'Financial Statements',icon:'fa-file-invoice-dollar',description:'P&L,Balance Sheet,Cash Flow'},{id:'accounts-receivable',title:'Accounts Receivable',icon:'fa-hand-holding-usd',description:'Rent Roll & AR Aging'},{id:'payment-processing',title:'Payment Processing',icon:'fa-credit-card',description:'Valor PayTech Integration'},{id:'accounts-payable',title:'Accounts Payable',icon:'fa-credit-card',description:'Vendor Bills & AP Aging'},{id:'bank-reconciliation',title:'Bank Reconciliation',icon:'fa-university',description:'Bank Feed Matching & Clearing'},{id:'budgeting',title:'Budgeting & Forecasting',icon:'fa-calendar-alt',description:'Budget vs Actual Analysis'},{id:'owner-statements',title:'Owner Statements',icon:'fa-user-tie',description:'Owner Equity & Distributions'},{id:'tax-compliance',title:'Tax & Compliance',icon:'fa-file-alt',description:'1099s,Sales Tax,Regulatory'},{id:'ai-insights',title:'AI Financial Insights',icon:'fa-brain',description:'ML Predictions & Anomaly Detection'},{id:'integrations',title:'Integrations',icon:'fa-plug',description:'QuickBooks,Banks,APIs'}];const renderFinancialDashboard =()=>{if(window.AppModules && window.AppModules.FinancialDashboard){return React.createElement(window.AppModules.FinancialDashboard,{period:state.selectedPeriod,basisType:state.basisType,entity:state.selectedEntity,property:state.selectedProperty})}return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Financial Dashboard'),React.createElement('p',{key:'desc'},'Financial dashboard module will be displayed here.')])};const renderGeneralLedger =()=>{const [ledgerData,setLedgerData] = React.useState({accounts:[],selectedAccount:null,transactions:[],loading:true});React.useEffect(()=>{loadLedgerData()},[]);const loadLedgerData = async()=>{try{const mockAccounts = [{code:'1000',name:'Cash - Operating',type:'Asset',balance:250000},{code:'1100',name:'Accounts Receivable',type:'Asset',balance:15000},{code:'1200',name:'Prepaid Expenses',type:'Asset',balance:5000},{code:'1500',name:'Property & Buildings',type:'Asset',balance:4200000},{code:'2000',name:'Accounts Payable',type:'Liability',balance:-12000},{code:'2200',name:'Security Deposits Held',type:'Liability',balance:-45000},{code:'2500',name:'Mortgage Payable',type:'Liability',balance:-2800000},{code:'3000',name:'Owner Equity',type:'Equity',balance:-1000000},{code:'4000',name:'Rental Income',type:'Revenue',balance:-125000},{code:'4100',name:'Late Fee Income',type:'Revenue',balance:-2500},{code:'5000',name:'Maintenance Expense',type:'Expense',balance:15000},{code:'5100',name:'Utilities Expense',type:'Expense',balance:8500},{code:'5200',name:'Management Fees',type:'Expense',balance:10456},{code:'5300',name:'Insurance Expense',type:'Expense',balance:4200},{code:'5400',name:'Property Tax',type:'Expense',balance:12000}];setLedgerData({accounts:mockAccounts,selectedAccount:null,transactions:[],loading:false})}catch(error){console.error('Error loading ledger data:',error);setLedgerData(prev =>({...prev,loading:false}))}};const loadAccountTransactions = async(accountCode)=>{const mockTransactions = [{date:'2025-07-14',description:'July Rent Collection - Unit A101',debit:accountCode.startsWith('4')? 0:1200,credit:accountCode.startsWith('4')? 1200:0},{date:'2025-07-13',description:'Maintenance - Plumbing Repair',debit:accountCode.startsWith('5')? 850:0,credit:accountCode.startsWith('5')? 0:850},{date:'2025-07-12',description:'Insurance Payment',debit:accountCode === '5300' ? 350:0,credit:accountCode === '5300' ? 0:350},{date:'2025-07-11',description:'Property Tax Payment',debit:accountCode === '5400' ? 1000:0,credit:accountCode === '5400' ? 0:1000},{date:'2025-07-10',description:'Late Fee Collection',debit:accountCode === '4100' ? 0:50,credit:accountCode === '4100' ? 50:0}];setLedgerData(prev =>({...prev,selectedAccount:accountCode,transactions:mockTransactions}))};if(ledgerData.loading){return React.createElement('div',{className:'loading-state'},[ React.createElement('i',{key:'spinner',className:'fas fa-spinner fa-spin'}),React.createElement('p',{key:'text'},'Loading general ledger...')])}return React.createElement('div',{className:'gl-module'},[ React.createElement('h3',{key:'title'},'General Ledger'),React.createElement('div',{key:'content',className:'gl-content'},[ React.createElement('div',{key:'accounts',className:'gl-accounts'},[ React.createElement('h4',{key:'title'},'Chart of Accounts'),React.createElement('table',{key:'table',className:'financial-table'},[ React.createElement('thead',{key:'head'},[ React.createElement('tr',{key:'row'},[ React.createElement('th',{key:'code'},'Code'),React.createElement('th',{key:'account'},'Account Name'),React.createElement('th',{key:'type'},'Type'),React.createElement('th',{key:'balance'},'Balance'),React.createElement('th',{key:'action'},'Action')])]),React.createElement('tbody',{key:'body'},ledgerData.accounts.map((account,index)=> React.createElement('tr',{key:index},[ React.createElement('td',{key:'code'},account.code),React.createElement('td',{key:'name'},account.name),React.createElement('td',{key:'type'},account.type),React.createElement('td',{key:'balance',className:'amount'},`$${Math.abs(account.balance).toLocaleString()}`),React.createElement('td',{key:'action'},React.createElement('button',{className:'btn-view-transactions',onClick:()=> loadAccountTransactions(account.code)},'View'))])))])]),ledgerData.selectedAccount && React.createElement('div',{key:'transactions',className:'gl-transactions'},[ React.createElement('h4',{key:'title'},`Transactions - ${ledgerData.selectedAccount}`),React.createElement('table',{key:'table',className:'financial-table'},[ React.createElement('thead',{key:'head'},[ React.createElement('tr',{key:'row'},[ React.createElement('th',{key:'date'},'Date'),React.createElement('th',{key:'desc'},'Description'),React.createElement('th',{key:'debit'},'Debit'),React.createElement('th',{key:'credit'},'Credit')])]),React.createElement('tbody',{key:'body'},ledgerData.transactions.map((trans,index)=> React.createElement('tr',{key:index},[ React.createElement('td',{key:'date'},new Date(trans.date).toLocaleDateString()),React.createElement('td',{key:'desc'},trans.description),React.createElement('td',{key:'debit',className:'amount'},trans.debit > 0 ? `$${trans.debit.toLocaleString()}`:''),React.createElement('td',{key:'credit',className:'amount'},trans.credit > 0 ? `$${trans.credit.toLocaleString()}`:'')])))])])])])};const renderTrialBalance =()=>{const [trialBalanceData,setTrialBalanceData] = React.useState({accounts:[],totals:{debits:0,credits:0,isBalanced:false},loading:true});React.useEffect(()=>{loadTrialBalanceData()},[]);const loadTrialBalanceData = async()=>{try{const mockAccounts = [{code:'1000',name:'Cash - Operating',type:'Asset',debit:250000,credit:0},{code:'1100',name:'Accounts Receivable',type:'Asset',debit:15000,credit:0},{code:'1200',name:'Prepaid Expenses',type:'Asset',debit:5000,credit:0},{code:'1500',name:'Property & Buildings',type:'Asset',debit:4200000,credit:0},{code:'1600',name:'Accumulated Depreciation',type:'Contra-Asset',debit:0,credit:180000},{code:'1700',name:'Equipment',type:'Asset',debit:25000,credit:0},{code:'2000',name:'Accounts Payable',type:'Liability',debit:0,credit:12000},{code:'2100',name:'Accrued Expenses',type:'Liability',debit:0,credit:8000},{code:'2200',name:'Security Deposits',type:'Liability',debit:0,credit:45000},{code:'2300',name:'Prepaid Rent',type:'Liability',debit:0,credit:15000},{code:'2500',name:'Mortgage Payable',type:'Liability',debit:0,credit:2800000},{code:'3000',name:'Owner Capital',type:'Equity',debit:0,credit:1000000},{code:'3100',name:'Retained Earnings',type:'Equity',debit:0,credit:385000},{code:'4000',name:'Rental Income',type:'Revenue',debit:0,credit:125000},{code:'4100',name:'Late Fee Income',type:'Revenue',debit:0,credit:2500},{code:'4200',name:'Other Income',type:'Revenue',debit:0,credit:3200},{code:'5000',name:'Maintenance Expense',type:'Expense',debit:15000,credit:0},{code:'5100',name:'Utilities Expense',type:'Expense',debit:8500,credit:0},{code:'5200',name:'Management Fees',type:'Expense',debit:10456,credit:0},{code:'5300',name:'Insurance Expense',type:'Expense',debit:4200,credit:0},{code:'5400',name:'Property Tax',type:'Expense',debit:12000,credit:0},{code:'5500',name:'Marketing Expense',type:'Expense',debit:2500,credit:0},{code:'5600',name:'Legal & Professional',type:'Expense',debit:1800,credit:0},{code:'5700',name:'Administrative',type:'Expense',debit:3200,credit:0},{code:'5800',name:'Depreciation Expense',type:'Expense',debit:8500,credit:0}];const totalDebits = mockAccounts.reduce((sum,acc)=> sum + acc.debit,0);const totalCredits = mockAccounts.reduce((sum,acc)=> sum + acc.credit,0);setTrialBalanceData({accounts:mockAccounts,totals:{debits:totalDebits,credits:totalCredits,isBalanced:Math.abs(totalDebits - totalCredits)< 0.01},loading:false})}catch(error){console.error('Error loading trial balance:',error);setTrialBalanceData(prev =>({...prev,loading:false}))}};if(trialBalanceData.loading){return React.createElement('div',{className:'loading-state'},[ React.createElement('i',{key:'spinner',className:'fas fa-spinner fa-spin'}),React.createElement('p',{key:'text'},'Loading trial balance...')])}const groupedAccounts ={'Assets':trialBalanceData.accounts.filter(acc => acc.type === 'Asset'),'Contra-Assets':trialBalanceData.accounts.filter(acc => acc.type === 'Contra-Asset'),'Liabilities':trialBalanceData.accounts.filter(acc => acc.type === 'Liability'),'Equity':trialBalanceData.accounts.filter(acc => acc.type === 'Equity'),'Revenue':trialBalanceData.accounts.filter(acc => acc.type === 'Revenue'),'Expenses':trialBalanceData.accounts.filter(acc => acc.type === 'Expense')};return React.createElement('div',{className:'tb-module'},[ React.createElement('h3',{key:'title'},'Trial Balance'),React.createElement('p',{key:'date'},`As of ${new Date().toLocaleDateString()}`),React.createElement('table',{key:'table',className:'financial-table trial-balance-table'},[ React.createElement('thead',{key:'head'},[ React.createElement('tr',{key:'row'},[ React.createElement('th',{key:'code'},'Account Code'),React.createElement('th',{key:'name'},'Account Name'),React.createElement('th',{key:'debit'},'Debit'),React.createElement('th',{key:'credit'},'Credit')])]),React.createElement('tbody',{key:'body'},[ ...Object.entries(groupedAccounts).map(([groupName,accounts])=> [ React.createElement('tr',{key:`header-${groupName}`,className:'group-header'},[ React.createElement('td',{key:'header',colSpan:4},groupName)]),...accounts.map((account,index)=> React.createElement('tr',{key:`${groupName}-${index}`},[ React.createElement('td',{key:'code'},account.code),React.createElement('td',{key:'name'},account.name),React.createElement('td',{key:'debit',className:'amount'},account.debit > 0 ? `$${account.debit.toLocaleString()}`:''),React.createElement('td',{key:'credit',className:'amount'},account.credit > 0 ? `$${account.credit.toLocaleString()}`:'')]))]).flat(),React.createElement('tr',{key:'totals',className:'totals-row'},[ React.createElement('td',{key:'empty1'},''),React.createElement('td',{key:'total-label'},React.createElement('strong',{},'TOTALS')),React.createElement('td',{key:'total-debit',className:'amount total'},React.createElement('strong',{},`$${trialBalanceData.totals.debits.toLocaleString()}`)),React.createElement('td',{key:'total-credit',className:'amount total'},React.createElement('strong',{},`$${trialBalanceData.totals.credits.toLocaleString()}`))])])]),React.createElement('div',{key:'verification',className:'balance-verification'},[ React.createElement('div',{key:'status',className:`balance-status ${trialBalanceData.totals.isBalanced ? 'balanced':'unbalanced'}`},[ React.createElement('i',{key:'icon',className:`fas ${trialBalanceData.totals.isBalanced ? 'fa-check-circle':'fa-exclamation-triangle'}`}),React.createElement('span',{key:'text'},trialBalanceData.totals.isBalanced ? 'Trial Balance is in balance':`Out of balance by $${Math.abs(trialBalanceData.totals.debits - trialBalanceData.totals.credits).toLocaleString()}`)])])])};const renderFinancialStatements =()=>{return React.createElement((window.AppModules && window.AppModules.FinancialStatementsHub)||(()=> React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Financial Statements'),React.createElement('p',{key:'desc'},'Loading Financial Statements module...')])))};const renderAccountsReceivable =()=>{const [arData,setArData] = React.useState({rentRoll:[],aging:{current:0,days30:0,days60:0,days90:0},totalReceivable:0,loading:true});React.useEffect(()=>{loadARData()},[]);const loadARData = async()=>{try{const mockRentRoll = [{tenant:'John Smith',unit:'A101',rentAmount:1200,balance:0,status:'Current'},{tenant:'Mary Johnson',unit:'B205',rentAmount:1400,balance:1400,status:'30 Days'},{tenant:'David Wilson',unit:'C304',rentAmount:1100,balance:2200,status:'60 Days'},{tenant:'Sarah Davis',unit:'A203',rentAmount:1300,balance:0,status:'Current'},{tenant:'Mike Brown',unit:'B102',rentAmount:1250,balance:1250,status:'30 Days'}];const aging ={current:mockRentRoll.filter(t => t.status === 'Current').reduce((sum,t)=> sum + t.balance,0),days30:mockRentRoll.filter(t => t.status === '30 Days').reduce((sum,t)=> sum + t.balance,0),days60:mockRentRoll.filter(t => t.status === '60 Days').reduce((sum,t)=> sum + t.balance,0),days90:mockRentRoll.filter(t => t.status === '90+ Days').reduce((sum,t)=> sum + t.balance,0)};setArData({rentRoll:mockRentRoll,aging,totalReceivable:aging.days30 + aging.days60 + aging.days90,loading:false})}catch(error){console.error('Error loading AR data:',error);setArData(prev =>({...prev,loading:false}))}};if(arData.loading){return React.createElement('div',{className:'loading-state'},[ React.createElement('i',{key:'spinner',className:'fas fa-spinner fa-spin'}),React.createElement('p',{key:'text'},'Loading AR data...')])}return React.createElement('div',{className:'ar-module'},[ React.createElement('h3',{key:'title'},'Accounts Receivable'),React.createElement('div',{key:'summary',className:'ar-summary'},[ React.createElement('div',{key:'card1',className:'ar-card'},[ React.createElement('h4',{key:'title'},'Total Receivable'),React.createElement('span',{key:'amount',className:'amount'},`$${arData.totalReceivable.toLocaleString()}`)]),React.createElement('div',{key:'card2',className:'ar-card'},[ React.createElement('h4',{key:'title'},'30 Days'),React.createElement('span',{key:'amount',className:'amount warning'},`$${arData.aging.days30.toLocaleString()}`)]),React.createElement('div',{key:'card3',className:'ar-card'},[ React.createElement('h4',{key:'title'},'60 Days'),React.createElement('span',{key:'amount',className:'amount danger'},`$${arData.aging.days60.toLocaleString()}`)]),React.createElement('div',{key:'card4',className:'ar-card'},[ React.createElement('h4',{key:'title'},'90+ Days'),React.createElement('span',{key:'amount',className:'amount critical'},`$${arData.aging.days90.toLocaleString()}`)])]),React.createElement('div',{key:'rentroll',className:'rent-roll-section'},[ React.createElement('h4',{key:'title'},'Current Rent Roll'),React.createElement('table',{key:'table',className:'financial-table'},[ React.createElement('thead',{key:'head'},[ React.createElement('tr',{key:'row'},[ React.createElement('th',{key:'tenant'},'Tenant'),React.createElement('th',{key:'unit'},'Unit'),React.createElement('th',{key:'rent'},'Monthly Rent'),React.createElement('th',{key:'balance'},'Balance'),React.createElement('th',{key:'status'},'Status')])]),React.createElement('tbody',{key:'body'},arData.rentRoll.map((tenant,index)=> React.createElement('tr',{key:index},[ React.createElement('td',{key:'tenant'},tenant.tenant),React.createElement('td',{key:'unit'},tenant.unit),React.createElement('td',{key:'rent'},`$${tenant.rentAmount.toLocaleString()}`),React.createElement('td',{key:'balance'},`$${tenant.balance.toLocaleString()}`),React.createElement('td',{key:'status'},React.createElement('span',{className:`status-badge ${tenant.status === 'Current' ? 'current':'overdue'}`},tenant.status))])))])])])};const renderPaymentProcessing =()=>{const [paymentData,setPaymentData] = React.useState({todayTotal:0,weekTotal:0,monthTotal:0,pendingCount:0,failedCount:0,recentPayments:[]});const formatCurrency =(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)};React.useEffect(()=>{loadPaymentData()},[]);const loadPaymentData = async()=>{try{if(window.ValorPayTechService){const today = new Date();const weekAgo = new Date(today.getTime()- 7 * 24 * 60 * 60 * 1000);const monthAgo = new Date(today.getTime()- 30 * 24 * 60 * 60 * 1000);const history = await window.ValorPayTechService.getPaymentHistory({limit:50,dateRange:`${monthAgo.toISOString()},${today.toISOString()}`});let todayTotal = 0,weekTotal = 0,monthTotal = 0;let pendingCount = 0,failedCount = 0;history.payments.forEach(payment =>{const paymentDate = new Date(payment.createdAt);if(payment.status === 'paid'){monthTotal += payment.amount;if(paymentDate >= weekAgo)weekTotal += payment.amount;if(paymentDate.toDateString()=== today.toDateString())todayTotal += payment.amount}else if(payment.status === 'pending'){pendingCount++}else if(payment.status === 'failed'){failedCount++}});setPaymentData({todayTotal,weekTotal,monthTotal,pendingCount,failedCount,recentPayments:history.payments.slice(0,10)})}else{setPaymentData({todayTotal:4850,weekTotal:28750,monthTotal:125640,pendingCount:3,failedCount:1,recentPayments:[{id:'1',createdAt:new Date().toISOString(),amount:1200,status:'paid',paymentMethod:'ACH',metadata:{tenant_name:'John Smith',property_name:'Sunset Apartments'}},{id:'2',createdAt:new Date(Date.now()- 24*60*60*1000).toISOString(),amount:1400,status:'paid',paymentMethod:'Credit Card',metadata:{tenant_name:'Mary Johnson',property_name:'Oak Grove'}},{id:'3',createdAt:new Date(Date.now()- 48*60*60*1000).toISOString(),amount:1100,status:'pending',paymentMethod:'ACH',metadata:{tenant_name:'David Wilson',property_name:'Riverside Plaza'}},{id:'4',createdAt:new Date(Date.now()- 72*60*60*1000).toISOString(),amount:1250,status:'paid',paymentMethod:'ACH',metadata:{tenant_name:'Sarah Davis',property_name:'Mountain View'}},{id:'5',createdAt:new Date(Date.now()- 96*60*60*1000).toISOString(),amount:800,status:'failed',paymentMethod:'Credit Card',metadata:{tenant_name:'Mike Brown',property_name:'Sunset Apartments'}}]})}}catch(error){console.error('Error loading payment data:',error);setPaymentData({todayTotal:4850,weekTotal:28750,monthTotal:125640,pendingCount:3,failedCount:1,recentPayments:[{id:'1',createdAt:new Date().toISOString(),amount:1200,status:'paid',paymentMethod:'ACH',metadata:{tenant_name:'John Smith',property_name:'Sunset Apartments'}},{id:'2',createdAt:new Date(Date.now()- 24*60*60*1000).toISOString(),amount:1400,status:'paid',paymentMethod:'Credit Card',metadata:{tenant_name:'Mary Johnson',property_name:'Oak Grove'}}]})}};return React.createElement('div',{key:'payment-processing',className:'payment-processing-module'},[ React.createElement('h3',{key:'title'},'Valor PayTech Payment Processing'),React.createElement('div',{key:'summary',className:'payment-summary-cards'},[ React.createElement('div',{key:'today',className:'summary-card'},[ React.createElement('h4',{key:'h4'},'Today'),React.createElement('p',{key:'amount',className:'amount'},formatCurrency(paymentData.todayTotal))]),React.createElement('div',{key:'week',className:'summary-card'},[ React.createElement('h4',{key:'h4'},'This Week'),React.createElement('p',{key:'amount',className:'amount'},formatCurrency(paymentData.weekTotal))]),React.createElement('div',{key:'month',className:'summary-card'},[ React.createElement('h4',{key:'h4'},'This Month'),React.createElement('p',{key:'amount',className:'amount'},formatCurrency(paymentData.monthTotal))]),React.createElement('div',{key:'pending',className:'summary-card warning'},[ React.createElement('h4',{key:'h4'},'Pending'),React.createElement('p',{key:'count',className:'count'},paymentData.pendingCount)]),React.createElement('div',{key:'failed',className:'summary-card danger'},[ React.createElement('h4',{key:'h4'},'Failed'),React.createElement('p',{key:'count',className:'count'},paymentData.failedCount)])]),React.createElement('div',{key:'recent',className:'recent-payments'},[ React.createElement('h4',{key:'title'},'Recent Payments'),React.createElement('table',{key:'table',className:'payments-table'},[ React.createElement('thead',{key:'thead'},React.createElement('tr',{},[ React.createElement('th',{key:'date'},'Date'),React.createElement('th',{key:'tenant'},'Tenant'),React.createElement('th',{key:'property'},'Property'),React.createElement('th',{key:'amount'},'Amount'),React.createElement('th',{key:'status'},'Status'),React.createElement('th',{key:'method'},'Method')])),React.createElement('tbody',{key:'tbody'},paymentData.recentPayments.map((payment,index)=> React.createElement('tr',{key:payment.id || index},[ React.createElement('td',{key:'date'},new Date(payment.createdAt).toLocaleDateString()),React.createElement('td',{key:'tenant'},payment.metadata?.tenant_name || 'Unknown'),React.createElement('td',{key:'property'},payment.metadata?.property_name || 'Unknown'),React.createElement('td',{key:'amount'},formatCurrency(payment.amount)),React.createElement('td',{key:'status'},React.createElement('span',{className:`status-badge ${payment.status}`},payment.status)),React.createElement('td',{key:'method'},payment.paymentMethod || 'Valor PayTech')])))])]),React.createElement('div',{key:'actions',className:'payment-actions'},[ React.createElement('button',{key:'run-cycle',className:'btn btn-primary',onClick:()=>{if(window.AppModules?.PaymentAutomationEngine){updateState({activeModule:'dashboard'});window.location.hash = '#payment-automation'}}},'Run Collection Cycle'),React.createElement('button',{key:'export',className:'btn btn-secondary'},'Export Report')])])};const renderAccountsPayable =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Accounts Payable'),React.createElement('p',{key:'desc'},'Vendor bills and AP aging reports will be displayed here.')])};const renderBankReconciliation =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Bank Reconciliation'),React.createElement('p',{key:'desc'},'Bank feed matching and reconciliation will be displayed here.')])};const renderBudgeting =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Budgeting & Forecasting'),React.createElement('p',{key:'desc'},'Budget vs actual analysis will be displayed here.')])};const renderOwnerStatements =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Owner Statements'),React.createElement('p',{key:'desc'},'Owner equity and distribution statements will be displayed here.')])};const renderTaxCompliance =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Tax & Compliance'),React.createElement('p',{key:'desc'},'1099s,sales tax,and regulatory compliance will be displayed here.')])};const renderAIInsights =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'AI Financial Insights'),React.createElement('p',{key:'desc'},'ML predictions and anomaly detection will be displayed here.')])};const renderIntegrations =()=>{return React.createElement('div',{className:'module-placeholder'},[ React.createElement('h3',{key:'title'},'Integrations'),React.createElement('p',{key:'desc'},'QuickBooks,bank,and API integrations will be displayed here.')])};const renderModuleContent =()=>{switch(state.activeModule){case 'dashboard':return renderFinancialDashboard();case 'general-ledger':return renderGeneralLedger();case 'trial-balance':return renderTrialBalance();case 'financial-statements':return renderFinancialStatements();case 'accounts-receivable':return renderAccountsReceivable();case 'payment-processing':return renderPaymentProcessing();case 'accounts-payable':return renderAccountsPayable();case 'bank-reconciliation':return renderBankReconciliation();case 'budgeting':return renderBudgeting();case 'owner-statements':return renderOwnerStatements();case 'tax-compliance':return renderTaxCompliance();case 'ai-insights':return renderAIInsights();case 'integrations':return renderIntegrations();default:return renderFinancialDashboard()}};return React.createElement('div',{className:'financial-accounting-engine'},[ React.createElement(FinancialControls,{key:'controls',selectedPeriod:state.selectedPeriod,basisType:state.basisType,selectedEntity:state.selectedEntity,selectedProperty:state.selectedProperty,onPeriodChange:(period)=> updateState({selectedPeriod:period}),onBasisChange:(basis)=> updateState({basisType:basis}),onEntityChange:(entity)=> updateState({selectedEntity:entity}),onPropertyChange:(property)=> updateState({selectedProperty:property})}),React.createElement('div',{key:'nav',className:'financial-modules-nav'},React.createElement('div',{className:'financial-modules-nav-container'},financialModules.map(module => React.createElement('button',{key:module.id,className:`financial-module-btn ${state.activeModule === module.id ? 'active':''}`,onClick:()=>{updateState({activeModule:module.id});window.scrollTo({top:0,behavior:'smooth'})},title:module.description},[ React.createElement('i',{key:'icon',className:`fas ${module.icon}`}),React.createElement('span',{key:'title'},module.title)])))),React.createElement('div',{key:'content',className:'financial-module-content'},renderModuleContent())])});return Engine})();window.AppModules = window.AppModules ||{};window.AppModules.FinancialAccountingEngine = FinancialAccountingEngine;

// SuperAdminPanel.jsx
const SuperAdminPanel =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})},formatBytes:(bytes)=>{if(bytes === 0)return '0 Bytes';const k = 1024;const sizes = ['Bytes','KB','MB','GB'];const i = Math.floor(Math.log(bytes)/ Math.log(k));return parseFloat((bytes / Math.pow(k,i)).toFixed(2))+ ' ' + sizes[i]}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('SuperAdminPanel')((props,helpers)=>{const{useLocalState,formatCurrency,formatDate,formatBytes}= helpers;const{superAdminId}= props;const [state,updateState] = useLocalState({activeView:'dashboard',clients:[],selectedClient:null,showClientModal:false,showUserModal:false,selectedUser:null,platformStats:{},systemHealth:{},aiUsageMetrics:{},billingData:{},searchQuery:'',filterPlan:'all',loading:true});React.useEffect(()=>{loadSuperAdminData();const interval = setInterval(loadSystemHealth,30000);return()=> clearInterval(interval)},[]);const loadSuperAdminData = async()=>{const mockClients = [{id:'CLIENT001',companyName:'Sunset Property Management',contactName:'John Smith',email:'john@sunsetpm.com',phone:'(555)123-4567',plan:'professional',status:'active',createdAt:'2024-06-15',properties:25,units:450,activeUsers:12,monthlyRevenue:2500,storageUsed:15000000000,aiCreditsUsed:8500,aiCreditsLimit:10000,features:['ai_maintenance','vendor_portal','tenant_portal','accounting'],customDomain:'portal.sunsetpm.com',lastActivity:new Date('2025-01-13T14:30:00')},{id:'CLIENT002',companyName:'Metro Realty Group',contactName:'Sarah Johnson',email:'sarah@metrorealty.com',phone:'(555)234-5678',plan:'enterprise',status:'active',createdAt:'2024-03-22',properties:75,units:1200,activeUsers:35,monthlyRevenue:7500,storageUsed:45000000000,aiCreditsUsed:25000,aiCreditsLimit:50000,features:['ai_maintenance','vendor_portal','tenant_portal','accounting','api_access','white_label'],customDomain:'manage.metrorealty.com',lastActivity:new Date('2025-01-13T16:00:00'),subsidiaries:[{id:'SUB001',name:'Metro East',units:400},{id:'SUB002',name:'Metro West',units:350},{id:'SUB003',name:'Metro Downtown',units:450}]},{id:'CLIENT003',companyName:'Green Leaf Properties',contactName:'Mike Chen',email:'mike@greenleaf.com',phone:'(555)345-6789',plan:'starter',status:'trial',createdAt:'2025-01-05',properties:5,units:85,activeUsers:3,monthlyRevenue:0,storageUsed:500000000,aiCreditsUsed:250,aiCreditsLimit:1000,features:['ai_maintenance','tenant_portal'],trialEndsAt:'2025-02-05',lastActivity:new Date('2025-01-12T10:00:00')}];const mockPlatformStats ={totalClients:156,activeClients:142,totalProperties:3500,totalUnits:45000,totalUsers:2800,monthlyRecurringRevenue:185000,averageRevenuePerClient:1185,clientGrowthRate:12.5,churnRate:2.1,nps:72};const mockSystemHealth ={apiUptime:99.98,avgResponseTime:145,activeConnections:342,queuedJobs:28,errorRate:0.02,storageUsed:2500000000000,storageTotal:10000000000000,lastBackup:new Date('2025-01-13T06:00:00')};const mockAIUsageMetrics ={totalRequests:450000,requestsToday:12500,averageProcessingTime:850,topFeatures:[{feature:'Maintenance AI',usage:35},{feature:'Lease Generation',usage:25},{feature:'Vendor Matching',usage:20},{feature:'Application Screening',usage:20}],costPerRequest:0.02,monthlyAICost:9000};updateState({clients:mockClients,platformStats:mockPlatformStats,systemHealth:mockSystemHealth,aiUsageMetrics:mockAIUsageMetrics,loading:false})};const loadSystemHealth = async()=>{const health ={...state.systemHealth,activeConnections:Math.floor(Math.random()* 100)+ 300,queuedJobs:Math.floor(Math.random()* 50),avgResponseTime:Math.floor(Math.random()* 50)+ 120};updateState({systemHealth:health})};return React.createElement('div',{className:'super-admin-panel'},[ React.createElement('header',{key:'header',className:'super-admin-header'},[ React.createElement('div',{key:'brand',className:'header-brand'},[ React.createElement('h1',{key:'title'},'Platform Admin'),React.createElement('span',{key:'label',className:'admin-badge'},'SUPER ADMIN')]),React.createElement('nav',{key:'nav',className:'admin-nav'},[{id:'dashboard',label:'Dashboard',icon:'fa-tachometer-alt'},{id:'clients',label:'Clients',icon:'fa-building'},{id:'billing',label:'Billing',icon:'fa-credit-card'},{id:'system',label:'System',icon:'fa-server'},{id:'analytics',label:'Analytics',icon:'fa-chart-line'},{id:'settings',label:'Settings',icon:'fa-cog'}].map(item => React.createElement('button',{key:item.id,className:`nav-item ${state.activeView === item.id ? 'active':''}`,onClick:()=> updateState({activeView:item.id})},[ React.createElement('i',{key:'icon',className:`fas ${item.icon}`}),React.createElement('span',{key:'label'},item.label)])))]),React.createElement('div',{key:'content',className:'super-admin-content'},[ state.activeView === 'dashboard' && renderDashboard(),state.activeView === 'clients' && renderClientsView(),state.activeView === 'billing' && renderBillingView(),state.activeView === 'system' && renderSystemView(),state.activeView === 'analytics' && renderAnalyticsView(),state.activeView === 'settings' && renderSettingsView()]),state.showClientModal && React.createElement(ClientDetailModal,{key:'client-modal',client:state.selectedClient,onClose:()=> updateState({showClientModal:false,selectedClient:null}),onUpdate:(clientData)=> updateClient(clientData),onManageUsers:(client)=> manageClientUsers(client)}),state.showUserModal && React.createElement(UserManagementModal,{key:'user-modal',client:state.selectedClient,user:state.selectedUser,onClose:()=> updateState({showUserModal:false,selectedUser:null}),onSave:(userData)=> saveUser(userData)})]);function renderDashboard(){return React.createElement('div',{className:'super-dashboard'},[ React.createElement('div',{key:'overview',className:'platform-overview'},[ React.createElement('h2',{key:'title'},'Platform Overview'),React.createElement('div',{key:'stats',className:'overview-stats'},[{label:'Total Clients',value:state.platformStats.totalClients,change:'+12',icon:'fa-building',color:'primary'},{label:'Active Users',value:state.platformStats.totalUsers,change:'+156',icon:'fa-users',color:'success'},{label:'MRR',value:formatCurrency(state.platformStats.monthlyRecurringRevenue),change:'+8.5%',icon:'fa-dollar-sign',color:'success'},{label:'Total Units',value:state.platformStats.totalUnits.toLocaleString(),change:'+2,500',icon:'fa-home',color:'info'}].map((stat,idx)=> React.createElement('div',{key:idx,className:`stat-card ${stat.color}`},[ React.createElement('i',{key:'icon',className:`fas ${stat.icon}`}),React.createElement('div',{key:'content'},[ React.createElement('span',{key:'value',className:'stat-value'},stat.value),React.createElement('span',{key:'label',className:'stat-label'},stat.label),React.createElement('span',{key:'change',className:'stat-change'},stat.change)])])))]),React.createElement('div',{key:'health',className:'system-health-widget'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-heartbeat'}),'System Health' ]),React.createElement('div',{key:'metrics',className:'health-metrics'},[ React.createElement('div',{key:'uptime',className:'metric'},[ React.createElement('label',{},'API Uptime'),React.createElement('div',{className:'metric-value'},[ React.createElement('span',{className:'value'},`${state.systemHealth.apiUptime}%`),React.createElement('div',{className:'progress'},React.createElement('div',{className:'progress-bar',style:{width:`${state.systemHealth.apiUptime}%`}}))])]),React.createElement('div',{key:'response',className:'metric'},[ React.createElement('label',{},'Avg Response Time'),React.createElement('span',{className:'value'},`${state.systemHealth.avgResponseTime}ms`)]),React.createElement('div',{key:'connections',className:'metric'},[ React.createElement('label',{},'Active Connections'),React.createElement('span',{className:'value'},state.systemHealth.activeConnections)]),React.createElement('div',{key:'storage',className:'metric'},[ React.createElement('label',{},'Storage Used'),React.createElement('div',{className:'metric-value'},[ React.createElement('span',{className:'value'},`${formatBytes(state.systemHealth.storageUsed)}/ ${formatBytes(state.systemHealth.storageTotal)}`),React.createElement('div',{className:'progress'},React.createElement('div',{className:'progress-bar',style:{width:`${(state.systemHealth.storageUsed / state.systemHealth.storageTotal)* 100}%`}}))])])])]),React.createElement('div',{key:'ai-usage',className:'ai-usage-widget'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),'AI Platform Usage' ]),React.createElement('div',{key:'stats',className:'ai-stats'},[ React.createElement('div',{key:'requests',className:'stat'},[ React.createElement('span',{className:'value'},state.aiUsageMetrics.requestsToday?.toLocaleString()),React.createElement('span',{className:'label'},'Requests Today')]),React.createElement('div',{key:'cost',className:'stat'},[ React.createElement('span',{className:'value'},formatCurrency(state.aiUsageMetrics.requestsToday * state.aiUsageMetrics.costPerRequest)),React.createElement('span',{className:'label'},'Today\'s AI Cost')])]),React.createElement('div',{key:'features',className:'ai-features'},state.aiUsageMetrics.topFeatures?.map((feature,idx)=> React.createElement('div',{key:idx,className:'feature-usage'},[ React.createElement('span',{key:'name'},feature.feature),React.createElement('div',{key:'bar',className:'usage-bar'},React.createElement('div',{className:'bar-fill',style:{width:`${feature.usage}%`}})),React.createElement('span',{key:'percent'},`${feature.usage}%`)])))]),React.createElement('div',{key:'activity',className:'recent-activity'},[ React.createElement('h2',{key:'title'},'Recent Client Activity'),React.createElement('div',{key:'list',className:'activity-list'},state.clients.slice(0,5).map(client => React.createElement('div',{key:client.id,className:'activity-item'},[ React.createElement('div',{key:'info'},[ React.createElement('h4',{},client.companyName),React.createElement('p',{},`Last active:${helpers.formatDate(client.lastActivity)}`)]),React.createElement('span',{key:'status',className:`status-badge ${client.status}`},client.status)])))])])}function renderClientsView(){const filteredClients = state.clients.filter(client =>{const matchesSearch = client.companyName.toLowerCase().includes(state.searchQuery.toLowerCase())|| client.contactName.toLowerCase().includes(state.searchQuery.toLowerCase());const matchesPlan = state.filterPlan === 'all' || client.plan === state.filterPlan;return matchesSearch && matchesPlan});return React.createElement('div',{className:'clients-view'},[ React.createElement('div',{key:'header',className:'view-header'},[ React.createElement('h2',{key:'title'},'Client Management'),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'add',className:'btn btn-primary',onClick:()=> createNewClient()},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'Add Client' ])])]),React.createElement('div',{key:'filters',className:'client-filters'},[ React.createElement('div',{key:'search',className:'search-box'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search clients...',value:state.searchQuery,onChange:(e)=> updateState({searchQuery:e.target.value})})]),React.createElement('select',{key:'plan',value:state.filterPlan,onChange:(e)=> updateState({filterPlan:e.target.value})},[ React.createElement('option',{key:'all',value:'all'},'All Plans'),React.createElement('option',{key:'starter',value:'starter'},'Starter'),React.createElement('option',{key:'professional',value:'professional'},'Professional'),React.createElement('option',{key:'enterprise',value:'enterprise'},'Enterprise')])]),React.createElement('div',{key:'table',className:'clients-table'},React.createElement('table',{},[ React.createElement('thead',{key:'head'},React.createElement('tr',{},[ React.createElement('th',{key:'company'},'Company'),React.createElement('th',{key:'contact'},'Contact'),React.createElement('th',{key:'plan'},'Plan'),React.createElement('th',{key:'units'},'Units'),React.createElement('th',{key:'users'},'Users'),React.createElement('th',{key:'revenue'},'MRR'),React.createElement('th',{key:'status'},'Status'),React.createElement('th',{key:'actions'},'Actions')])),React.createElement('tbody',{key:'body'},filteredClients.map(client => React.createElement('tr',{key:client.id},[ React.createElement('td',{key:'company'},[ React.createElement('strong',{},client.companyName),client.subsidiaries && React.createElement('span',{className:'subsidiary-count'},`(${client.subsidiaries.length}subsidiaries)`)]),React.createElement('td',{key:'contact'},[ React.createElement('div',{},client.contactName),React.createElement('small',{},client.email)]),React.createElement('td',{key:'plan'},React.createElement('span',{className:`plan-badge ${client.plan}`},client.plan)),React.createElement('td',{key:'units'},client.units),React.createElement('td',{key:'users'},client.activeUsers),React.createElement('td',{key:'revenue'},formatCurrency(client.monthlyRevenue)),React.createElement('td',{key:'status'},React.createElement('span',{className:`status-badge ${client.status}`},client.status)),React.createElement('td',{key:'actions',className:'client-actions'},[ React.createElement('button',{key:'view',className:'action-btn',title:'View Details',onClick:()=> updateState({selectedClient:client,showClientModal:true})},React.createElement('i',{className:'fas fa-eye'})),React.createElement('button',{key:'users',className:'action-btn',title:'Manage Users',onClick:()=> manageClientUsers(client)},React.createElement('i',{className:'fas fa-users'})),React.createElement('button',{key:'login',className:'action-btn',title:'Login as Client',onClick:()=> loginAsClient(client)},React.createElement('i',{className:'fas fa-sign-in-alt'}))])])))]))])}function renderSystemView(){return React.createElement('div',{className:'system-view'},[ React.createElement('h2',{key:'title'},'System Management'),React.createElement('div',{key:'servers',className:'server-status'},[ React.createElement('h3',{},'Server Status'),React.createElement('div',{className:'server-grid'},[{name:'API Server 1',status:'online',load:35},{name:'API Server 2',status:'online',load:42},{name:'Database Primary',status:'online',load:28},{name:'Database Replica',status:'online',load:25},{name:'Redis Cache',status:'online',load:15},{name:'AI Processing',status:'online',load:68}].map((server,idx)=> React.createElement('div',{key:idx,className:`server-card ${server.status}`},[ React.createElement('div',{className:'server-header'},[ React.createElement('h4',{},server.name),React.createElement('span',{className:`status-indicator ${server.status}`})]),React.createElement('div',{className:'server-load'},[ React.createElement('span',{},`Load:${server.load}%`),React.createElement('div',{className:'load-bar'},React.createElement('div',{className:'load-fill',style:{width:`${server.load}%`}}))])])))]),React.createElement('div',{key:'features',className:'feature-flags'},[ React.createElement('h3',{},'Feature Flags'),React.createElement('div',{className:'feature-list'},[{name:'AI Maintenance Assistant',key:'ai_maintenance',enabled:true},{name:'Advanced Analytics',key:'advanced_analytics',enabled:true},{name:'Beta Features',key:'beta_features',enabled:false},{name:'New UI Dashboard',key:'new_dashboard',enabled:false}].map(feature => React.createElement('div',{key:feature.key,className:'feature-flag'},[ React.createElement('span',{},feature.name),React.createElement('label',{className:'toggle-switch'},[ React.createElement('input',{type:'checkbox',checked:feature.enabled,onChange:()=> toggleFeatureFlag(feature.key)}),React.createElement('span',{className:'toggle-slider'})])])))])])}function createNewClient(){updateState({selectedClient:{companyName:'',contactName:'',email:'',phone:'',plan:'starter',status:'pending'},showClientModal:true})}function manageClientUsers(client){updateState({selectedClient:client,showUserModal:true})}function loginAsClient(client){window.Toast?.info(`Switching to ${client.companyName}account...`)}async function updateClient(clientData){window.Toast?.success('Client updated successfully!')}async function saveUser(userData){window.Toast?.success('User saved successfully!')}function toggleFeatureFlag(flagKey){}})})();const ClientDetailModal = ComponentFactory.createComponent('ClientDetailModal')((props,helpers)=>{const{client,onClose,onUpdate,onManageUsers}= props;const{formatCurrency,formatDate,formatBytes}= helpers;const [formData,setFormData] = React.useState(client ||{});const [activeTab,setActiveTab] = React.useState('overview');const tabs = [{id:'overview',label:'Overview',icon:'fa-info-circle'},{id:'usage',label:'Usage & Limits',icon:'fa-chart-line'},{id:'billing',label:'Billing',icon:'fa-credit-card'},{id:'features',label:'Features',icon:'fa-cog'},{id:'activity',label:'Activity Log',icon:'fa-history'}];return React.createElement('div',{className:'modal-overlay',onClick:onClose},React.createElement('div',{className:'modal-content client-detail-modal',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title'},client.id ? client.companyName:'New Client'),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'tabs',className:'modal-tabs'},tabs.map(tab => React.createElement('button',{key:tab.id,className:`tab-btn ${activeTab === tab.id ? 'active':''}`,onClick:()=> setActiveTab(tab.id)},[ React.createElement('i',{key:'icon',className:`fas ${tab.icon}`}),React.createElement('span',{key:'label'},tab.label)]))),React.createElement('div',{key:'content',className:'modal-body'},[ activeTab === 'overview' && renderOverviewTab(),activeTab === 'usage' && renderUsageTab(),activeTab === 'billing' && renderBillingTab(),activeTab === 'features' && renderFeaturesTab(),activeTab === 'activity' && renderActivityTab()]),React.createElement('div',{key:'footer',className:'modal-footer'},[ React.createElement('button',{key:'cancel',className:'btn btn-secondary',onClick:onClose},'Cancel'),React.createElement('button',{key:'users',className:'btn btn-info',onClick:()=> onManageUsers(client)},[ React.createElement('i',{key:'icon',className:'fas fa-users'}),'Manage Users' ]),React.createElement('button',{key:'save',className:'btn btn-primary',onClick:()=> onUpdate(formData)},'Save Changes')])]));function renderOverviewTab(){return React.createElement('div',{className:'tab-content overview-tab'},[ React.createElement('div',{key:'form',className:'client-form'},[ React.createElement('div',{key:'row1',className:'form-row'},[ React.createElement('div',{key:'company',className:'form-group'},[ React.createElement('label',{},'Company Name'),React.createElement('input',{type:'text',value:formData.companyName || '',onChange:(e)=> setFormData({...formData,companyName:e.target.value})})]),React.createElement('div',{key:'contact',className:'form-group'},[ React.createElement('label',{},'Contact Name'),React.createElement('input',{type:'text',value:formData.contactName || '',onChange:(e)=> setFormData({...formData,contactName:e.target.value})})])]),React.createElement('div',{key:'row2',className:'form-row'},[ React.createElement('div',{key:'email',className:'form-group'},[ React.createElement('label',{},'Email'),React.createElement('input',{type:'email',value:formData.email || '',onChange:(e)=> setFormData({...formData,email:e.target.value})})]),React.createElement('div',{key:'phone',className:'form-group'},[ React.createElement('label',{},'Phone'),React.createElement('input',{type:'tel',value:formData.phone || '',onChange:(e)=> setFormData({...formData,phone:e.target.value})})])]),React.createElement('div',{key:'row3',className:'form-row'},[ React.createElement('div',{key:'plan',className:'form-group'},[ React.createElement('label',{},'Plan'),React.createElement('select',{value:formData.plan || 'starter',onChange:(e)=> setFormData({...formData,plan:e.target.value})},[ React.createElement('option',{key:'starter',value:'starter'},'Starter'),React.createElement('option',{key:'professional',value:'professional'},'Professional'),React.createElement('option',{key:'enterprise',value:'enterprise'},'Enterprise')])]),React.createElement('div',{key:'status',className:'form-group'},[ React.createElement('label',{},'Status'),React.createElement('select',{value:formData.status || 'active',onChange:(e)=> setFormData({...formData,status:e.target.value})},[ React.createElement('option',{key:'trial',value:'trial'},'Trial'),React.createElement('option',{key:'active',value:'active'},'Active'),React.createElement('option',{key:'suspended',value:'suspended'},'Suspended'),React.createElement('option',{key:'cancelled',value:'cancelled'},'Cancelled')])])])]),formData.subsidiaries && React.createElement('div',{key:'subsidiaries',className:'subsidiaries-section'},[ React.createElement('h3',{},'Subsidiaries'),React.createElement('div',{className:'subsidiary-list'},formData.subsidiaries.map(sub => React.createElement('div',{key:sub.id,className:'subsidiary-item'},[ React.createElement('span',{className:'sub-name'},sub.name),React.createElement('span',{className:'sub-units'},`${sub.units}units`)])))])])}function renderUsageTab(){return React.createElement('div',{className:'tab-content usage-tab'},[ React.createElement('div',{key:'storage',className:'usage-section'},[ React.createElement('h3',{},'Storage Usage'),React.createElement('div',{className:'usage-metric'},[ React.createElement('div',{className:'usage-header'},[ React.createElement('span',{},formatBytes(client.storageUsed)),React.createElement('span',{},' / 100 GB')]),React.createElement('div',{className:'usage-bar'},React.createElement('div',{className:'usage-fill',style:{width:`${(client.storageUsed / 100000000000)* 100}%`}}))])]),React.createElement('div',{key:'ai',className:'usage-section'},[ React.createElement('h3',{},'AI Credits'),React.createElement('div',{className:'usage-metric'},[ React.createElement('div',{className:'usage-header'},[ React.createElement('span',{},client.aiCreditsUsed?.toLocaleString()),React.createElement('span',{},` / ${client.aiCreditsLimit?.toLocaleString()}`)]),React.createElement('div',{className:'usage-bar'},React.createElement('div',{className:'usage-fill ai',style:{width:`${(client.aiCreditsUsed / client.aiCreditsLimit)* 100}%`}})),React.createElement('button',{className:'btn btn-sm btn-primary'},'Add Credits')])]),React.createElement('div',{key:'limits',className:'limits-section'},[ React.createElement('h3',{},'Account Limits'),React.createElement('div',{className:'limits-grid'},[{label:'Properties',current:client.properties,limit:100},{label:'Units',current:client.units,limit:2000},{label:'Active Users',current:client.activeUsers,limit:50},{label:'API Calls/Day',current:8500,limit:10000}].map((limit,idx)=> React.createElement('div',{key:idx,className:'limit-item'},[ React.createElement('label',{},limit.label),React.createElement('span',{},`${limit.current}/ ${limit.limit}`)])))])])}function renderFeaturesTab(){const allFeatures = [{key:'ai_maintenance',label:'AI Maintenance Assistant',category:'AI'},{key:'vendor_portal',label:'Vendor Portal',category:'Core'},{key:'tenant_portal',label:'Tenant Portal',category:'Core'},{key:'accounting',label:'Accounting Integration',category:'Finance'},{key:'api_access',label:'API Access',category:'Developer'},{key:'white_label',label:'White Label Branding',category:'Enterprise'},{key:'custom_reports',label:'Custom Reports',category:'Analytics'},{key:'bulk_operations',label:'Bulk Operations',category:'Core'}];return React.createElement('div',{className:'tab-content features-tab'},[ React.createElement('h3',{},'Enabled Features'),React.createElement('div',{className:'features-grid'},allFeatures.map(feature => React.createElement('div',{key:feature.key,className:`feature-item ${client.features?.includes(feature.key)? 'enabled':'disabled'}`},[ React.createElement('label',{},[ React.createElement('input',{type:'checkbox',checked:client.features?.includes(feature.key)|| false,onChange:(e)=> toggleFeature(feature.key,e.target.checked)}),React.createElement('span',{className:'feature-label'},feature.label),React.createElement('span',{className:'feature-category'},feature.category)])])))])}function toggleFeature(featureKey,enabled){const updatedFeatures = enabled ? [...(formData.features || []),featureKey]:(formData.features || []).filter(f => f !== featureKey);setFormData({...formData,features:updatedFeatures})}});const UserManagementModal = ComponentFactory.createComponent('UserManagementModal')((props,helpers)=>{const{client,user,onClose,onSave}= props;const [users,setUsers] = React.useState([]);const [selectedUser,setSelectedUser] = React.useState(user);const [showUserForm,setShowUserForm] = React.useState(false);React.useEffect(()=>{loadClientUsers()},[client]);const loadClientUsers = async()=>{const mockUsers = [{id:'USER001',name:'John Smith',email:'john@company.com',role:'admin',status:'active',lastLogin:new Date('2025-01-13T10:00:00'),permissions:['all']},{id:'USER002',name:'Sarah Johnson',email:'sarah@company.com',role:'manager',status:'active',lastLogin:new Date('2025-01-12T14:30:00'),permissions:['properties','tenants','maintenance']},{id:'USER003',name:'Mike Chen',email:'mike@company.com',role:'staff',status:'active',lastLogin:new Date('2025-01-11T09:15:00'),permissions:['maintenance','tenants']}];setUsers(mockUsers)};return React.createElement('div',{className:'modal-overlay',onClick:onClose},React.createElement('div',{className:'modal-content user-management-modal',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title'},`${client.companyName}- User Management`),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'content',className:'modal-body'},[ !showUserForm ? renderUserList():renderUserForm()])]));function renderUserList(){return React.createElement('div',{className:'user-list-view'},[ React.createElement('div',{key:'actions',className:'list-actions'},[ React.createElement('button',{className:'btn btn-primary',onClick:()=>{setSelectedUser(null);setShowUserForm(true)}},[ React.createElement('i',{className:'fas fa-plus'}),'Add User' ])]),React.createElement('div',{key:'list',className:'users-list'},users.map(user => React.createElement('div',{key:user.id,className:'user-item'},[ React.createElement('div',{className:'user-info'},[ React.createElement('h4',{},user.name),React.createElement('p',{},user.email),React.createElement('span',{className:`role-badge ${user.role}`},user.role)]),React.createElement('div',{className:'user-meta'},[ React.createElement('span',{className:`status ${user.status}`},user.status),React.createElement('span',{className:'last-login'},`Last login:${helpers.formatDate(user.lastLogin)}`)]),React.createElement('div',{className:'user-actions'},[ React.createElement('button',{className:'action-btn',onClick:()=>{setSelectedUser(user);setShowUserForm(true)}},React.createElement('i',{className:'fas fa-edit'})),React.createElement('button',{className:'action-btn danger',onClick:()=> deleteUser(user.id)},React.createElement('i',{className:'fas fa-trash'}))])])))])}function renderUserForm(){const [formData,setFormData] = React.useState(selectedUser ||{name:'',email:'',role:'staff',permissions:[]});return React.createElement('div',{className:'user-form-view'},[ React.createElement('h3',{},selectedUser ? 'Edit User':'Create User'),React.createElement('div',{className:'user-form'},[ React.createElement('div',{className:'form-group'},[ React.createElement('label',{},'Name'),React.createElement('input',{type:'text',value:formData.name,onChange:(e)=> setFormData({...formData,name:e.target.value})})]),React.createElement('div',{className:'form-group'},[ React.createElement('label',{},'Email'),React.createElement('input',{type:'email',value:formData.email,onChange:(e)=> setFormData({...formData,email:e.target.value})})]),React.createElement('div',{className:'form-group'},[ React.createElement('label',{},'Role'),React.createElement('select',{value:formData.role,onChange:(e)=> setFormData({...formData,role:e.target.value})},[ React.createElement('option',{value:'admin'},'Admin'),React.createElement('option',{value:'manager'},'Manager'),React.createElement('option',{value:'staff'},'Staff'),React.createElement('option',{value:'readonly'},'Read Only')])]),React.createElement('div',{className:'form-group'},[ React.createElement('label',{},'Permissions'),React.createElement('div',{className:'permissions-grid'},[ 'properties','tenants','maintenance','accounting','reports','settings' ].map(perm => React.createElement('label',{key:perm,className:'permission-item'},[ React.createElement('input',{type:'checkbox',checked:formData.permissions?.includes(perm)|| false,onChange:(e)=>{const perms = e.target.checked ? [...(formData.permissions || []),perm]:(formData.permissions || []).filter(p => p !== perm);setFormData({...formData,permissions:perms})}}),React.createElement('span',{},perm)])))])]),React.createElement('div',{className:'form-actions'},[ React.createElement('button',{className:'btn btn-secondary',onClick:()=> setShowUserForm(false)},'Cancel'),React.createElement('button',{className:'btn btn-primary',onClick:()=>{onSave(formData);setShowUserForm(false)}},selectedUser ? 'Update User':'Create User')])])}function deleteUser(userId){if(confirm('Are you sure you want to delete this user?')){setUsers(users.filter(u => u.id !== userId));window.Toast?.success('User deleted')}}});window.AppModules = window.AppModules ||{};window.AppModules.SuperAdminPanel = SuperAdminPanel;window.AppModules.ClientDetailModal = ClientDetailModal;window.AppModules.UserManagementModal = UserManagementModal;

// Login.jsx
const Login =()=>{const [formData,setFormData] = React.useState({email:'',password:''});const [error,setError] = React.useState('');const [loading,setLoading] = React.useState(false);const handleChange =(e)=>{setFormData({...formData,[e.target.name]:e.target.value});setError('')};const handleSubmit = async(e)=>{e.preventDefault();setLoading(true);setError('');const result = await window.authManager.login(formData.email,formData.password);if(result.success){window.location.href = result.portal}else{setError(result.error || 'Invalid email or password');setLoading(false)}};const quickLogin =(userType)=>{const credentials ={'property-owner':{email:'owner@demo.com',password:'demo123'},'administrator':{email:'admin@demo.com',password:'demo123'},'property-manager':{email:'manager@demo.com',password:'demo123'},'maintenance':{email:'maintenance@demo.com',password:'demo123'},'vendor':{email:'vendor@demo.com',password:'demo123'},'resident':{email:'resident@demo.com',password:'demo123'}};if(credentials[userType]){setFormData(credentials[userType])}};return(<div className="auth-container"><div className="auth-card"><div className="auth-logo"><svg width="48" height="48" viewBox="0 0 48 48" fill="none"><rect width="48" height="48" rx="12" fill="var(--color-brand)" /><path d="M24 12L12 20V36H20V28H28V36H36V20L24 12Z" fill="white" /></svg></div><h1 className="auth-title">Welcome back</h1><p className="auth-subtitle">Sign in to access your portal</p>{error && <div className="form-error">{error}</div>}<form onSubmit={handleSubmit}><Input label="Email" type="email" name="email" value={formData.email}onChange={handleChange}placeholder="you@example.com" required autoComplete="email" /><Input label="Password" type="password" name="password" value={formData.password}onChange={handleChange}placeholder="Enter your password" required autoComplete="current-password" /><Button type="submit" variant="primary" size="lg" block loading={loading}disabled={!formData.email || !formData.password}> Sign in </Button></form><div style={{marginTop:'24px',textAlign:'center'}}><p style={{fontSize:'14px',color:'var(--color-text-muted)',marginBottom:'12px'}}> Quick Login:</p><div style={{display:'grid',gridTemplateColumns:'repeat(3,1fr)',gap:'8px',marginBottom:'16px'}}><button type="button" style={{padding:'8px 12px',fontSize:'11px',border:'1px solid #e5e7eb',borderRadius:'6px',background:'#f9fafb',color:'#374151',cursor:'pointer',transition:'all 0.2s ease'}}onMouseOver={(e)=>{e.target.style.background = '#f3f4f6';e.target.style.borderColor = '#d1d5db'}}onMouseOut={(e)=>{e.target.style.background = '#f9fafb';e.target.style.borderColor = '#e5e7eb'}}onClick={()=> quickLogin('property-owner')}> Owner </button><button type="button" style={{padding:'8px 12px',fontSize:'11px',border:'1px solid #e5e7eb',borderRadius:'6px',background:'#f9fafb',color:'#374151',cursor:'pointer',transition:'all 0.2s ease'}}onMouseOver={(e)=>{e.target.style.background = '#f3f4f6';e.target.style.borderColor = '#d1d5db'}}onMouseOut={(e)=>{e.target.style.background = '#f9fafb';e.target.style.borderColor = '#e5e7eb'}}onClick={()=> quickLogin('administrator')}> Administrator </button><button type="button" style={{padding:'8px 12px',fontSize:'11px',border:'1px solid #e5e7eb',borderRadius:'6px',background:'#f9fafb',color:'#374151',cursor:'pointer',transition:'all 0.2s ease'}}onMouseOver={(e)=>{e.target.style.background = '#f3f4f6';e.target.style.borderColor = '#d1d5db'}}onMouseOut={(e)=>{e.target.style.background = '#f9fafb';e.target.style.borderColor = '#e5e7eb'}}onClick={()=> quickLogin('property-manager')}> Manager </button><button type="button" style={{padding:'8px 12px',fontSize:'11px',border:'1px solid #e5e7eb',borderRadius:'6px',background:'#f9fafb',color:'#374151',cursor:'pointer',transition:'all 0.2s ease'}}onMouseOver={(e)=>{e.target.style.background = '#f3f4f6';e.target.style.borderColor = '#d1d5db'}}onMouseOut={(e)=>{e.target.style.background = '#f9fafb';e.target.style.borderColor = '#e5e7eb'}}onClick={()=> quickLogin('maintenance')}> Maintenance </button><button type="button" style={{padding:'8px 12px',fontSize:'11px',border:'1px solid #e5e7eb',borderRadius:'6px',background:'#f9fafb',color:'#374151',cursor:'pointer',transition:'all 0.2s ease'}}onMouseOver={(e)=>{e.target.style.background = '#f3f4f6';e.target.style.borderColor = '#d1d5db'}}onMouseOut={(e)=>{e.target.style.background = '#f9fafb';e.target.style.borderColor = '#e5e7eb'}}onClick={()=> quickLogin('vendor')}> Vendor </button><button type="button" style={{padding:'8px 12px',fontSize:'11px',border:'1px solid #e5e7eb',borderRadius:'6px',background:'#f9fafb',color:'#374151',cursor:'pointer',transition:'all 0.2s ease'}}onMouseOver={(e)=>{e.target.style.background = '#f3f4f6';e.target.style.borderColor = '#d1d5db'}}onMouseOut={(e)=>{e.target.style.background = '#f9fafb';e.target.style.borderColor = '#e5e7eb'}}onClick={()=> quickLogin('resident')}> Resident </button></div></div></div></div>)};

// FinancialControls.jsx
const FinancialControls =(()=>{const ComponentFactory ={createComponent:(name,options ={})=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('FinancialControls',{})((props,helpers)=>{const{selectedPeriod,basisType,selectedEntity,selectedProperty,onPeriodChange,onBasisChange,onEntityChange,onPropertyChange}= props;const [state,updateState] = helpers.useLocalState({showCustomPeriod:false,customStart:'',customEnd:''});const entities = [{id:null,name:'All Entities'},{id:'entity-1',name:'Main Property Holdings LLC'},{id:'entity-2',name:'Downtown Investments LLC'},{id:'entity-3',name:'Suburban Properties LLC'}];const properties = [{id:null,name:'All Properties'},{id:'prop-1',name:'Sunset Apartments'},{id:'prop-2',name:'Downtown Plaza'},{id:'prop-3',name:'Garden Complex'}];const handleQuickPeriod =(type)=>{const today = new Date();let start,end;switch(type){case 'mtd':start = new Date(today.getFullYear(),today.getMonth(),1);end = today;break;case 'qtd':const quarter = Math.floor(today.getMonth()/ 3);start = new Date(today.getFullYear(),quarter * 3,1);end = today;break;case 'ytd':start = new Date(today.getFullYear(),0,1);end = today;break;case 'lastMonth':const lastMonth = new Date(today.getFullYear(),today.getMonth()- 1,1);start = lastMonth;end = new Date(today.getFullYear(),today.getMonth(),0);break;case 'lastQuarter':const lastQ = Math.floor((today.getMonth()- 3)/ 3);start = new Date(today.getFullYear(),lastQ * 3,1);end = new Date(today.getFullYear(),(lastQ + 1)* 3,0);break;case 'lastYear':start = new Date(today.getFullYear()- 1,0,1);end = new Date(today.getFullYear()- 1,11,31);break;default:return}onPeriodChange({start:start.toISOString().split('T')[0],end:end.toISOString().split('T')[0]})};return React.createElement('div',{className:'financial-controls'},React.createElement('div',{className:'financial-controls-grid'},[ React.createElement('div',{key:'period',className:'period-selector'},[ React.createElement('label',{key:'label'},'Period:'),React.createElement('input',{key:'start',type:'date',className:'period-input',value:selectedPeriod.start,onChange:(e)=> onPeriodChange({...selectedPeriod,start:e.target.value})}),React.createElement('span',{key:'to'},'to'),React.createElement('input',{key:'end',type:'date',className:'period-input',value:selectedPeriod.end,onChange:(e)=> onPeriodChange({...selectedPeriod,end:e.target.value})}),React.createElement('div',{key:'quick',className:'quick-periods'},[ React.createElement('button',{key:'mtd',onClick:()=> handleQuickPeriod('mtd'),className:'quick-period-btn'},'MTD'),React.createElement('button',{key:'qtd',onClick:()=> handleQuickPeriod('qtd'),className:'quick-period-btn'},'QTD'),React.createElement('button',{key:'ytd',onClick:()=> handleQuickPeriod('ytd'),className:'quick-period-btn'},'YTD'),React.createElement('button',{key:'lastMonth',onClick:()=> handleQuickPeriod('lastMonth'),className:'quick-period-btn'},'Last Month'),React.createElement('button',{key:'lastQuarter',onClick:()=> handleQuickPeriod('lastQuarter'),className:'quick-period-btn'},'Last Quarter')])]),React.createElement('div',{key:'basis',className:'basis-toggle'},[ React.createElement('button',{key:'accrual',className:`basis-option ${basisType === 'accrual' ? 'active':''}`,onClick:()=> onBasisChange('accrual')},'Accrual'),React.createElement('button',{key:'cash',className:`basis-option ${basisType === 'cash' ? 'active':''}`,onClick:()=> onBasisChange('cash')},'Cash')]),React.createElement('select',{key:'entity',className:'entity-selector',value:selectedEntity?.id || '',onChange:(e)=>{const entity = entities.find(ent => ent.id === e.target.value);onEntityChange(entity)}},entities.map(entity => React.createElement('option',{key:entity.id || 'all',value:entity.id || ''},entity.name))),React.createElement('select',{key:'property',className:'property-selector',value:selectedProperty?.id || '',onChange:(e)=>{const property = properties.find(prop => prop.id === e.target.value);onPropertyChange(property)}},properties.map(property => React.createElement('option',{key:property.id || 'all',value:property.id || ''},property.name))),React.createElement('button',{key:'export',className:'export-btn',onClick:()=>{}},[ React.createElement('i',{key:'icon',className:'fas fa-download'}),React.createElement('span',{key:'text'},'Export')])]))})})();window.AppModules = window.AppModules ||{};window.AppModules.FinancialControls = FinancialControls;

// Maintenance.jsx
const Maintenance =()=>{const [workOrders,setWorkOrders] = React.useState([]);const [showCreateModal,setShowCreateModal] = React.useState(false);const [filters,setFilters] = React.useState({status:'all',priority:'all',property:'all'});React.useEffect(()=>{loadWorkOrders()},[filters]);const loadWorkOrders = async()=>{try{const params = new URLSearchParams();Object.entries(filters).forEach(([key,value])=>{if(value !== 'all')params.append(key,value)});const response = await fetch(`http:headers:{'Authorization':`Bearer ${localStorage.getItem('access_token')}`}});const data = await response.json();setWorkOrders(data)}catch(error){console.error('Failed to load work orders:',error);setWorkOrders(mockWorkOrders)}};const stats = React.useMemo(()=>{const open = workOrders.filter(w => w.status === 'open').length;const inProgress = workOrders.filter(w => w.status === 'in_progress').length;const emergency = workOrders.filter(w => w.priority === 'emergency').length;return{open,inProgress,emergency}},[workOrders]);return(<div className="maintenance-page">{}{stats.emergency > 0 &&(<div className="emergency-banner"><i className="fas fa-exclamation-triangle"></i><span>{stats.emergency}Emergency Work Orders Require Immediate Attention</span><button onClick={()=> setFilters({...filters,priority:'emergency'})}> View Emergency Orders </button></div>)}{}<div className="page-header"><div><h1>Maintenance</h1><p className="subtitle">{stats.open + stats.inProgress}active work orders</p></div><button className="btn btn-primary" onClick={()=> setShowCreateModal(true)}><i className="fas fa-plus"></i> Create Work Order </button></div>{}<div className="maintenance-stats"><div className="stat-card"><div className="stat-icon open"><i className="fas fa-clipboard-list"></i></div><div className="stat-content"><div className="stat-value">{stats.open}</div><div className="stat-label">Open</div></div></div><div className="stat-card"><div className="stat-icon progress"><i className="fas fa-tools"></i></div><div className="stat-content"><div className="stat-value">{stats.inProgress}</div><div className="stat-label">In Progress</div></div></div><div className="stat-card"><div className="stat-icon emergency"><i className="fas fa-exclamation-circle"></i></div><div className="stat-content"><div className="stat-value">{stats.emergency}</div><div className="stat-label">Emergency</div></div></div></div>{}<div className="filters-bar"><select className="filter-select" value={filters.status}onChange={(e)=> setFilters({...filters,status:e.target.value})}><option value="all">All Status</option><option value="open">Open</option><option value="in_progress">In Progress</option><option value="completed">Completed</option></select><select className="filter-select" value={filters.priority}onChange={(e)=> setFilters({...filters,priority:e.target.value})}><option value="all">All Priorities</option><option value="emergency">Emergency</option><option value="high">High</option><option value="normal">Normal</option><option value="low">Low</option></select></div>{}<div className="work-orders-list">{workOrders.map(order =>(<WorkOrderCard key={order.id}order={order}onUpdate={()=> loadWorkOrders()}/>))}</div>{}{showCreateModal &&(<CreateWorkOrderModal onClose={()=> setShowCreateModal(false)}onSave={()=>{setShowCreateModal(false);loadWorkOrders()}}/>)}</div>)};const WorkOrderCard =({order,onUpdate})=>{const priorityColors ={emergency:'danger',high:'warning',normal:'info',low:'secondary'};const statusColors ={open:'warning',in_progress:'info',completed:'success'};const updateStatus = async(newStatus)=>{try{await fetch(`http:method:'PUT',headers:{'Content-Type':'application/json','Authorization':`Bearer ${localStorage.getItem('access_token')}`},body:JSON.stringify({status:newStatus})});onUpdate()}catch(error){console.error('Failed to update status:',error)}};const formatDate =(dateString)=>{if(!dateString)return 'N/A';const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};return(<div className={`work-order-card ${order.priority}`}><div className="order-header"><div className="order-info"><h3>{order.title}</h3><p className="order-location"><i className="fas fa-map-marker-alt"></i>{order.property_name}- Unit{order.unit_number}</p></div><div className="order-badges"><span className={`priority-badge ${priorityColors[order.priority]}`}>{order.priority}</span><span className={`status-badge ${statusColors[order.status]}`}>{order.status.replace('_',' ')}</span></div></div><div className="order-details"><p>{order.description}</p><div className="order-meta"><span><i className="fas fa-user"></i>{order.reported_by}</span><span><i className="fas fa-calendar"></i>{formatDate(order.created_at)}</span>{order.assigned_to &&(<span><i className="fas fa-hard-hat"></i>{order.assigned_to}</span>)}</div></div><div className="order-actions">{order.status === 'open' &&(<><button className="btn-small" onClick={()=> updateStatus('in_progress')}> Start Work </button><button className="btn-small"> Assign Vendor </button></>)}{order.status === 'in_progress' &&(<button className="btn-small success" onClick={()=> updateStatus('completed')}> Mark Complete </button>)}<button className="btn-small"> View Details </button></div></div>)};const CreateWorkOrderModal =({onClose,onSave})=>{const [formData,setFormData] = React.useState({title:'',description:'',priority:'normal',property_id:'',unit_id:'',category:'general'});const handleSubmit = async(e)=>{e.preventDefault();try{await fetch('http:method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${localStorage.getItem('access_token')}`},body:JSON.stringify(formData)});onSave()}catch(error){console.error('Failed to create work order:',error);onSave()}};return(<div className="modal-overlay" onClick={onClose}><div className="modal" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>Create Work Order</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body"><div className="form-group"><label>Title</label><input type="text" className="form-control" value={formData.title}onChange={(e)=> setFormData({...formData,title:e.target.value})}required /></div><div className="form-group"><label>Description</label><textarea className="form-control" rows="3" value={formData.description}onChange={(e)=> setFormData({...formData,description:e.target.value})}required /></div><div className="form-row"><div className="form-group"><label>Priority</label><select className="form-control" value={formData.priority}onChange={(e)=> setFormData({...formData,priority:e.target.value})}><option value="low">Low</option><option value="normal">Normal</option><option value="high">High</option><option value="emergency">Emergency</option></select></div><div className="form-group"><label>Category</label><select className="form-control" value={formData.category}onChange={(e)=> setFormData({...formData,category:e.target.value})}><option value="general">General</option><option value="plumbing">Plumbing</option><option value="electrical">Electrical</option><option value="hvac">HVAC</option><option value="appliances">Appliances</option></select></div></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary"> Create Work Order </button></div></form></div></div>)};const mockWorkOrders = [{id:1,title:'Leaking Faucet in Kitchen',description:'The kitchen faucet has been dripping constantly for the past week.',priority:'high',status:'open',property_name:'Sunset Apartments',unit_number:'205',reported_by:'John Smith',created_at:'2024-07-10',category:'plumbing'},{id:2,title:'AC Unit Not Cooling',description:'The air conditioning unit is running but not producing cold air.',priority:'emergency',status:'in_progress',property_name:'Garden View Townhomes',unit_number:'410',reported_by:'Sarah Johnson',created_at:'2024-07-11',assigned_to:'Mike\'s HVAC Services',category:'hvac'},{id:3,title:'Broken Window Lock',description:'The lock on the bedroom window is broken and won\'t secure properly.',priority:'normal',status:'open',property_name:'Downtown Office Plaza',unit_number:'B12',reported_by:'Michael Chen',created_at:'2024-07-09',category:'general'},{id:4,title:'Electrical Outlet Sparking',description:'The outlet in the living room sparked when plugging in a device.',priority:'emergency',status:'open',property_name:'Sunset Apartments',unit_number:'308',reported_by:'Lisa Park',created_at:'2024-07-12',category:'electrical'},{id:5,title:'Dishwasher Not Draining',description:'Water remains in the dishwasher after the cycle completes.',priority:'normal',status:'completed',property_name:'Garden View Townhomes',unit_number:'305',reported_by:'Emily Davis',created_at:'2024-07-08',assigned_to:'ProFix Appliances',category:'appliances'}];

// AdminVendorPanel.jsx
const AdminVendorPanel =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('AdminVendorPanel')((props,helpers)=>{const{useLocalState,formatCurrency,formatDate}= helpers;const{companyId,userId,userRole}= props;const [state,updateState] = useLocalState({activeView:'dashboard',vendors:[],workOrders:[],aiInsights:{},selectedVendor:null,showVendorModal:false,showMatchingModal:false,currentWorkOrder:null,performanceData:{},preferredVendors:[],loading:true});React.useEffect(()=>{loadAdminData()},[companyId]);const loadAdminData = async()=>{const mockVendors = [{id:'V001',companyName:'ABC Plumbing',contactName:'John Smith',email:'john@abcplumbing.com',phone:'(555)123-4567',specialties:['Plumbing','Water Heater'],rating:4.8,totalJobs:156,avgResponseTime:15,avgCompletionTime:2.5,pricing:'competitive',insurance:true,licensed:true,preferred:true,aiScore:94,availability:'high',currentJobs:3,completedThisMonth:12},{id:'V002',companyName:'Lightning Electric',contactName:'Sarah Johnson',email:'sarah@lightningelectric.com',phone:'(555)234-5678',specialties:['Electrical','Lighting','Panel Upgrade'],rating:4.9,totalJobs:98,avgResponseTime:10,avgCompletionTime:3,pricing:'premium',insurance:true,licensed:true,preferred:false,aiScore:91,availability:'medium',currentJobs:5,completedThisMonth:8},{id:'V003',companyName:'CoolBreeze HVAC',contactName:'Mike Chen',email:'mike@coolbreezehvac.com',phone:'(555)345-6789',specialties:['HVAC','AC Repair','Heating'],rating:4.7,totalJobs:203,avgResponseTime:20,avgCompletionTime:4,pricing:'budget',insurance:true,licensed:true,preferred:true,aiScore:88,availability:'high',currentJobs:2,completedThisMonth:15}];const mockWorkOrders = [{id:'WO101',property:'Sunset Apartments',unit:'3B',issue:'Leaking kitchen faucet',category:'plumbing',priority:'high',status:'unassigned',createdAt:new Date('2025-01-13T10:00:00'),tenant:'Sarah Williams',estimatedCost:150,aiUrgencyScore:85,aiRecommendedVendors:['V001','V004']},{id:'WO102',property:'Downtown Plaza',unit:'5A',issue:'No power in bedroom outlets',category:'electrical',priority:'urgent',status:'assigned',assignedTo:'V002',scheduledFor:new Date('2025-01-14T14:00:00'),createdAt:new Date('2025-01-12T16:00:00'),tenant:'Robert Johnson',estimatedCost:200,aiUrgencyScore:92}];const mockAIInsights ={vendorPerformance:{topPerformer:'Lightning Electric',fastestResponse:'ABC Plumbing',bestValue:'CoolBreeze HVAC',highestRated:'Lightning Electric'},maintenanceTrends:{mostCommonIssue:'Plumbing(35%)',avgResolutionTime:'2.8 days',peakRequestTime:'Monday mornings',seasonalAlert:'AC maintenance season approaching'},costAnalysis:{avgJobCost:185,monthlySpend:4850,projectedSavings:650,suggestion:'Consider annual contracts for 15% savings'}};updateState({vendors:mockVendors,workOrders:mockWorkOrders,aiInsights:mockAIInsights,loading:false})};return React.createElement('div',{className:'admin-vendor-panel'},[ React.createElement('header',{key:'header',className:'admin-header'},[ React.createElement('h1',{key:'title'},'Vendor Management'),React.createElement('nav',{key:'nav',className:'admin-nav'},[{id:'dashboard',label:'Dashboard',icon:'fa-tachometer-alt'},{id:'vendors',label:'Vendors',icon:'fa-users'},{id:'workorders',label:'Work Orders',icon:'fa-clipboard-list'},{id:'analytics',label:'Analytics',icon:'fa-chart-line'},{id:'settings',label:'Settings',icon:'fa-cog'}].map(item => React.createElement('button',{key:item.id,className:`nav-item ${state.activeView === item.id ? 'active':''}`,onClick:()=> updateState({activeView:item.id})},[ React.createElement('i',{key:'icon',className:`fas ${item.icon}`}),React.createElement('span',{key:'label'},item.label)])))]),React.createElement('div',{key:'content',className:'admin-content'},[ state.activeView === 'dashboard' && renderDashboard(),state.activeView === 'vendors' && renderVendorsView(),state.activeView === 'workorders' && renderWorkOrdersView(),state.activeView === 'analytics' && renderAnalyticsView(),state.activeView === 'settings' && renderSettingsView()]),state.showVendorModal && React.createElement(VendorDetailModal,{key:'vendor-modal',vendor:state.selectedVendor,onClose:()=> updateState({showVendorModal:false,selectedVendor:null}),onUpdate:(vendorData)=> updateVendor(vendorData)}),state.showMatchingModal && React.createElement(AIVendorMatchingModal,{key:'matching-modal',workOrder:state.currentWorkOrder,vendors:state.vendors,onAssign:(vendorId)=> assignVendor(state.currentWorkOrder.id,vendorId),onClose:()=> updateState({showMatchingModal:false,currentWorkOrder:null})})]);function renderDashboard(){const activeWorkOrders = state.workOrders.filter(wo => wo.status !== 'completed');const unassignedOrders = state.workOrders.filter(wo => wo.status === 'unassigned');return React.createElement('div',{className:'vendor-dashboard'},[ React.createElement('div',{key:'insights',className:'ai-insights-panel'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),'AI Insights & Recommendations' ]),React.createElement('div',{key:'cards',className:'insights-grid'},[ React.createElement('div',{key:'performance',className:'insight-card'},[ React.createElement('h3',{},'Vendor Performance'),React.createElement('div',{className:'insight-metrics'},[ React.createElement('div',{className:'metric'},[ React.createElement('label',{},'Top Performer'),React.createElement('span',{},state.aiInsights.vendorPerformance?.topPerformer)]),React.createElement('div',{className:'metric'},[ React.createElement('label',{},'Fastest Response'),React.createElement('span',{},state.aiInsights.vendorPerformance?.fastestResponse)])])]),React.createElement('div',{key:'trends',className:'insight-card'},[ React.createElement('h3',{},'Maintenance Trends'),React.createElement('div',{className:'trend-alert'},[ React.createElement('i',{className:'fas fa-exclamation-circle'}),React.createElement('span',{},state.aiInsights.maintenanceTrends?.seasonalAlert)]),React.createElement('p',{},`Most common:${state.aiInsights.maintenanceTrends?.mostCommonIssue}`)]),React.createElement('div',{key:'cost',className:'insight-card'},[ React.createElement('h3',{},'Cost Analysis'),React.createElement('div',{className:'cost-metrics'},[ React.createElement('div',{className:'metric'},[ React.createElement('label',{},'Monthly Spend'),React.createElement('span',{},formatCurrency(state.aiInsights.costAnalysis?.monthlySpend))]),React.createElement('div',{className:'metric suggestion'},[ React.createElement('i',{className:'fas fa-lightbulb'}),React.createElement('span',{},state.aiInsights.costAnalysis?.suggestion)])])])])]),React.createElement('div',{key:'stats',className:'quick-stats'},[{label:'Active Work Orders',value:activeWorkOrders.length,icon:'fa-wrench',color:'primary'},{label:'Unassigned',value:unassignedOrders.length,icon:'fa-exclamation-triangle',color:'warning'},{label:'Active Vendors',value:state.vendors.length,icon:'fa-users',color:'success'},{label:'Avg Response Time',value:'18 min',icon:'fa-clock',color:'info'}].map((stat,idx)=> React.createElement('div',{key:idx,className:`stat-card ${stat.color}`},[ React.createElement('i',{key:'icon',className:`fas ${stat.icon}`}),React.createElement('div',{key:'content'},[ React.createElement('span',{key:'value',className:'stat-value'},stat.value),React.createElement('span',{key:'label',className:'stat-label'},stat.label)])]))),unassignedOrders.length > 0 && React.createElement('div',{key:'unassigned',className:'unassigned-orders'},[ React.createElement('h2',{key:'title'},'Unassigned Work Orders'),React.createElement('div',{key:'list',className:'work-order-list'},unassignedOrders.map(order => React.createElement(WorkOrderCard,{key:order.id,order:order,onAssign:()=> updateState({showMatchingModal:true,currentWorkOrder:order})})))])])}function renderVendorsView(){const [filterCategory,setFilterCategory] = React.useState('all');const [showOnlyPreferred,setShowOnlyPreferred] = React.useState(false);const filteredVendors = state.vendors.filter(vendor =>{if(showOnlyPreferred && !vendor.preferred)return false;if(filterCategory === 'all')return true;return vendor.specialties.some(s => s.toLowerCase().includes(filterCategory.toLowerCase()))});return React.createElement('div',{className:'vendors-view'},[ React.createElement('div',{key:'header',className:'view-header'},[ React.createElement('h2',{key:'title'},'Vendor Directory'),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'add',className:'btn btn-primary',onClick:()=> addNewVendor()},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'Add Vendor' ])])]),React.createElement('div',{key:'filters',className:'vendor-filters'},[ React.createElement('select',{key:'category',value:filterCategory,onChange:(e)=> setFilterCategory(e.target.value)},[ React.createElement('option',{key:'all',value:'all'},'All Categories'),React.createElement('option',{key:'plumbing',value:'plumbing'},'Plumbing'),React.createElement('option',{key:'electrical',value:'electrical'},'Electrical'),React.createElement('option',{key:'hvac',value:'hvac'},'HVAC'),React.createElement('option',{key:'general',value:'general'},'General')]),React.createElement('label',{key:'preferred',className:'preferred-filter'},[ React.createElement('input',{type:'checkbox',checked:showOnlyPreferred,onChange:(e)=> setShowOnlyPreferred(e.target.checked)}),'Show only preferred vendors' ])]),React.createElement('div',{key:'grid',className:'vendors-grid'},filteredVendors.map(vendor => React.createElement(VendorCard,{key:vendor.id,vendor:vendor,onSelect:()=> updateState({selectedVendor:vendor,showVendorModal:true}),onTogglePreferred:()=> togglePreferredVendor(vendor.id)})))])}function renderWorkOrdersView(){const stages = [{id:'unassigned',label:'Unassigned',color:'danger'},{id:'assigned',label:'Assigned',color:'warning'},{id:'in_progress',label:'In Progress',color:'info'},{id:'completed',label:'Completed',color:'success'}];return React.createElement('div',{className:'work-orders-view'},[ React.createElement('div',{key:'header',className:'view-header'},[ React.createElement('h2',{key:'title'},'Work Order Management'),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'ai-assign',className:'btn btn-ai'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),'AI Auto-Assign All' ])])]),React.createElement('div',{key:'kanban',className:'kanban-board'},stages.map(stage => React.createElement('div',{key:stage.id,className:`kanban-column ${stage.color}`},[ React.createElement('div',{key:'header',className:'column-header'},[ React.createElement('h3',{key:'title'},stage.label),React.createElement('span',{key:'count',className:'order-count'},state.workOrders.filter(wo => wo.status === stage.id).length)]),React.createElement('div',{key:'orders',className:'column-orders'},state.workOrders .filter(wo => wo.status === stage.id).map(order => React.createElement(WorkOrderKanbanCard,{key:order.id,order:order,vendors:state.vendors,onStatusChange:(newStatus)=> updateWorkOrderStatus(order.id,newStatus),onAssign:()=> updateState({showMatchingModal:true,currentWorkOrder:order})})))])))])}function renderAnalyticsView(){return React.createElement('div',{className:'analytics-view'},[ React.createElement('h2',{key:'title'},'Vendor Analytics & Performance'),React.createElement(VendorAnalytics,{key:'analytics',vendors:state.vendors,workOrders:state.workOrders,timeRange:'month'})])}function renderSettingsView(){return React.createElement('div',{className:'settings-view'},[ React.createElement('h2',{key:'title'},'Vendor Settings'),React.createElement(VendorSettings,{key:'settings',companyId:companyId,preferredVendors:state.preferredVendors,onUpdate:(settings)=> updateVendorSettings(settings)})])}async function assignVendor(workOrderId,vendorId){const updatedOrders = state.workOrders.map(wo => wo.id === workOrderId ?{...wo,status:'assigned',assignedTo:vendorId,assignedAt:new Date()}:wo);updateState({workOrders:updatedOrders,showMatchingModal:false,currentWorkOrder:null});window.Toast?.success('Vendor assigned successfully! They have been notified.')}function togglePreferredVendor(vendorId){const updatedVendors = state.vendors.map(v => v.id === vendorId ?{...v,preferred:!v.preferred}:v);updateState({vendors:updatedVendors})}function updateWorkOrderStatus(orderId,newStatus){const updatedOrders = state.workOrders.map(wo => wo.id === orderId ?{...wo,status:newStatus}:wo);updateState({workOrders:updatedOrders})}})})();const WorkOrderCard = ComponentFactory.createComponent('WorkOrderCard')((props,helpers)=>{const{order,onAssign}= props;const{formatDate}= helpers;const priorityColors ={low:'secondary',medium:'warning',high:'danger',urgent:'danger'};return React.createElement('div',{className:'work-order-card'},[ React.createElement('div',{key:'header',className:'order-header'},[ React.createElement('div',{key:'info'},[ React.createElement('h4',{key:'id'},`#${order.id}`),React.createElement('p',{key:'location'},`${order.property}- Unit ${order.unit}`)]),React.createElement('span',{key:'priority',className:`priority-badge ${priorityColors[order.priority]}`},order.priority.toUpperCase())]),React.createElement('p',{key:'issue',className:'order-issue'},order.issue),React.createElement('div',{key:'ai-score',className:'ai-urgency'},[ React.createElement('i',{key:'icon',className:'fas fa-exclamation-triangle'}),React.createElement('span',{},'AI Urgency Score:'),React.createElement('strong',{},`${order.aiUrgencyScore}/100`)]),React.createElement('div',{key:'details',className:'order-details'},[ React.createElement('span',{key:'tenant'},[ React.createElement('i',{className:'fas fa-user'}),order.tenant ]),React.createElement('span',{key:'created'},[ React.createElement('i',{className:'fas fa-clock'}),formatDate(order.createdAt)])]),React.createElement('button',{key:'assign',className:'btn btn-primary btn-block',onClick:onAssign},[ React.createElement('i',{key:'icon',className:'fas fa-user-plus'}),'Assign Vendor' ])])});const AIVendorMatchingModal = ComponentFactory.createComponent('AIVendorMatchingModal')((props,helpers)=>{const{workOrder,vendors,onAssign,onClose}= props;const{formatCurrency}= helpers;const getVendorMatches =()=>{return vendors .filter(v => v.specialties.some(s => s.toLowerCase().includes(workOrder.category))).map(vendor =>{let score = 0;let reasons = [];if(vendor.availability === 'high'){score += 30;reasons.push('Available immediately')}score += vendor.rating * 10;if(vendor.rating >= 4.8){reasons.push('Excellent rating')}if(vendor.avgResponseTime <= 15){score += 20;reasons.push('Fast response time')}if(workOrder.priority === 'urgent' && vendor.pricing !== 'premium'){score += 10}else if(vendor.pricing === 'budget'){score += 15;reasons.push('Cost-effective')}if(vendor.preferred){score += 10;reasons.push('Preferred vendor')}return{...vendor,matchScore:Math.min(score,100),matchReasons:reasons}}).sort((a,b)=> b.matchScore - a.matchScore)};const matches = getVendorMatches();const topMatch = matches[0];return React.createElement('div',{className:'modal-overlay',onClick:onClose},React.createElement('div',{className:'modal-content ai-matching-modal',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),'AI Vendor Matching' ]),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'order-info',className:'work-order-summary'},[ React.createElement('h3',{},`Work Order #${workOrder.id}`),React.createElement('p',{},workOrder.issue),React.createElement('div',{className:'order-meta'},[ React.createElement('span',{},`${workOrder.property}- Unit ${workOrder.unit}`),React.createElement('span',{className:`priority ${workOrder.priority}`},workOrder.priority.toUpperCase())])]),topMatch && React.createElement('div',{key:'recommendation',className:'ai-recommendation'},[ React.createElement('h3',{},[ React.createElement('i',{key:'icon',className:'fas fa-star'}),'AI Recommendation' ]),React.createElement('div',{className:'recommended-vendor'},[ React.createElement('div',{className:'vendor-info'},[ React.createElement('h4',{},topMatch.companyName),React.createElement('div',{className:'match-score'},[ React.createElement('span',{className:'score'},`${topMatch.matchScore}%`),React.createElement('span',{className:'label'},'match')])]),React.createElement('div',{className:'match-reasons'},topMatch.matchReasons.map((reason,idx)=> React.createElement('span',{key:idx,className:'reason-badge'},[ React.createElement('i',{className:'fas fa-check'}),reason ]))),React.createElement('button',{className:'btn btn-success',onClick:()=> onAssign(topMatch.id)},[ React.createElement('i',{key:'icon',className:'fas fa-check'}),'Assign Recommended Vendor' ])])]),React.createElement('div',{key:'alternatives',className:'vendor-alternatives'},[ React.createElement('h3',{},'Other Matches'),React.createElement('div',{className:'vendor-list'},matches.slice(1,4).map(vendor => React.createElement('div',{key:vendor.id,className:'vendor-option'},[ React.createElement('div',{className:'vendor-details'},[ React.createElement('h4',{},vendor.companyName),React.createElement('div',{className:'vendor-stats'},[ React.createElement('span',{},`${vendor.rating}★`),React.createElement('span',{},`${vendor.avgResponseTime}min response`),React.createElement('span',{},vendor.pricing)])]),React.createElement('div',{className:'vendor-actions'},[ React.createElement('span',{className:'match-score'},`${vendor.matchScore}%`),React.createElement('button',{className:'btn btn-primary btn-sm',onClick:()=> onAssign(vendor.id)},'Assign')])])))])]))});window.AppModules = window.AppModules ||{};window.AppModules.AdminVendorPanel = AdminVendorPanel;window.AppModules.WorkOrderCard = WorkOrderCard;window.AppModules.AIVendorMatchingModal = AIVendorMatchingModal;

// Tenants.jsx
const Tenants =()=>{const [tenants,setTenants] = React.useState([]);const [properties,setProperties] = React.useState([]);const [loading,setLoading] = React.useState(true);const [showAddModal,setShowAddModal] = React.useState(false);const [viewingTenant,setViewingTenant] = React.useState(null);const [filters,setFilters] = React.useState({search:'',property:'all',status:'all'});React.useEffect(()=>{setTenants(getMockTenants());setProperties(getMockProperties());setLoading(false);loadTenants();loadProperties()},[filters]);const loadTenants = async()=>{try{setLoading(true);const params = new URLSearchParams();if(filters.property !== 'all')params.append('property_id',filters.property);if(filters.status !== 'all')params.append('status',filters.status);if(filters.search)params.append('search',filters.search);const response = await fetch(`http:headers:{'Authorization':`Bearer ${localStorage.getItem('access_token')}`}});const data = await response.json();setTenants(data)}catch(error){console.error('Failed to load tenants:',error);setTenants(getMockTenants())}finally{setLoading(false)}};const loadProperties = async()=>{try{const response = await fetch('http:headers:{'Authorization':`Bearer ${localStorage.getItem('access_token')}`}});const data = await response.json();setProperties(data)}catch(error){console.error('Failed to load properties:',error);setProperties(getMockProperties())}};const getMockTenants =()=>{return [{id:1,first_name:'John',last_name:'Smith',email:'john.smith@email.com',phone:'(555)123-4567',status:'active',property_name:'Sunset Apartments',unit_number:'101',lease_start_date:'2024-01-15',lease_end_date:'2025-01-15',rent_amount:2200,security_deposit:2200,payment_status:'current',emergency_contact:'Jane Smith',emergency_phone:'(555)987-6543'},{id:2,first_name:'Sarah',last_name:'Johnson',email:'sarah.j@email.com',phone:'(555)234-5678',status:'active',property_name:'Downtown Plaza',unit_number:'A12',lease_start_date:'2023-08-01',lease_end_date:'2024-08-31',rent_amount:2800,security_deposit:2800,payment_status:'current',emergency_contact:'Mike Johnson',emergency_phone:'(555)876-5432'},{id:3,first_name:'Michael',last_name:'Chen',email:'mchen@email.com',phone:'(555)345-6789',status:'active',property_name:'Garden Complex',unit_number:'305',lease_start_date:'2024-02-01',lease_end_date:'2025-02-01',rent_amount:1900,security_deposit:1900,payment_status:'overdue',emergency_contact:'Lisa Chen',emergency_phone:'(555)765-4321'},{id:4,first_name:'Emily',last_name:'Davis',email:'emily.d@email.com',phone:'(555)456-7890',status:'applicant',property_name:'Sunset Apartments',unit_number:'205',lease_start_date:null,lease_end_date:null,rent_amount:2400,security_deposit:null,payment_status:'pending',emergency_contact:'Robert Davis',emergency_phone:'(555)654-3210'},{id:5,first_name:'David',last_name:'Wilson',email:'dwilson@email.com',phone:'(555)567-8901',status:'active',property_name:'Riverside Tower',unit_number:'1204',lease_start_date:'2023-11-01',lease_end_date:'2024-11-01',rent_amount:3200,security_deposit:3200,payment_status:'current',emergency_contact:'Mary Wilson',emergency_phone:'(555)543-2109'}]};const getMockProperties =()=>{return [{id:1,name:'Sunset Apartments'},{id:2,name:'Downtown Plaza'},{id:3,name:'Garden Complex'},{id:4,name:'Riverside Tower'}]};return(<div className="tenants-page">{}<div className="insights-row"><InsightCard type="warning" icon="fa-clock" title="5 Leases Expiring Soon" subtitle="Within next 60 days" action="View Leases" /><InsightCard type="alert" icon="fa-exclamation-circle" title="3 Overdue Payments" subtitle="Total:$4,850" action="Send Reminders" /><InsightCard type="info" icon="fa-user-check" title="8 New Applications" subtitle="Awaiting review" action="Review" /></div>{}<div className="page-header"><div><h1>Tenants</h1><p className="subtitle">Manage tenant profiles and applications</p></div><button className="btn btn-primary" onClick={()=> setShowAddModal(true)}><i className="fas fa-plus"></i> Add Tenant </button></div>{}<div className="filters-bar"><div className="search-box"><i className="fas fa-search"></i><input type="text" placeholder="Search by name,email,phone..." value={filters.search}onChange={(e)=> setFilters({...filters,search:e.target.value})}/></div><select className="filter-select" value={filters.property}onChange={(e)=> setFilters({...filters,property:e.target.value})}><option value="all">All Properties</option>{properties.map(prop =>(<option key={prop.id}value={prop.id}>{prop.name}</option>))}</select><div className="status-filters"><button className={`filter-btn ${filters.status === 'all' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'all'})}> All({tenants.length})</button><button className={`filter-btn ${filters.status === 'active' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'active'})}> Active({tenants.filter(t => t.status === 'active').length})</button><button className={`filter-btn ${filters.status === 'applicant' ? 'active':''}`}onClick={()=> setFilters({...filters,status:'applicant'})}> Applicants({tenants.filter(t => t.status === 'applicant').length})</button></div></div>{}{loading ?(<LoadingState />):(<div className="tenants-grid">{tenants.map(tenant =>(<TenantCard key={tenant.id}tenant={tenant}onView={()=> setViewingTenant(tenant)}/>))}</div>)}{}{showAddModal &&(<AddTenantModal onClose={()=> setShowAddModal(false)}onSave={()=>{setShowAddModal(false);loadTenants()}}/>)}{viewingTenant &&(<TenantDetailsModal tenant={viewingTenant}onClose={()=> setViewingTenant(null)}/>)}</div>)};const InsightCard =({type,icon,title,subtitle,action})=>{return(<div className={`insight-card ${type}`}><div className={`insight-icon ${type}`}><i className={`fas ${icon}`}></i></div><div className="insight-content"><h4>{title}</h4><p>{subtitle}</p></div><button className="insight-action">{action}</button></div>)};const LoadingState =()=>{return(<div className="loading-state"><div className="spinner"></div><p>Loading tenants...</p></div>)};const TenantCard =({tenant,onView})=>{const getStatusColor =(status)=>{switch(status){case 'active':return 'success';case 'past':return 'secondary';case 'applicant':return 'warning';default:return 'secondary'}};const formatDate =(dateString)=>{if(!dateString)return 'N/A';const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};return(<div className="tenant-card" onClick={onView}><div className="tenant-header"><div className="tenant-avatar">{tenant.first_name?.[0]}{tenant.last_name?.[0]}</div><div className="tenant-info"><h3>{tenant.first_name}{tenant.last_name}</h3><p className="tenant-email">{tenant.email}</p></div><span className={`status-badge ${getStatusColor(tenant.status)}`}>{tenant.status}</span></div><div className="tenant-details"><div className="detail-item"><i className="fas fa-building"></i><span>{tenant.property_name}- Unit{tenant.unit_number}</span></div><div className="detail-item"><i className="fas fa-phone"></i><span>{tenant.phone}</span></div><div className="detail-item"><i className="fas fa-calendar"></i><span>Since{formatDate(tenant.lease_start_date)}</span></div></div><div className="tenant-stats"><div className="stat"><span className="label">Rent</span><span className="value">${tenant.rent_amount}/mo</span></div><div className="stat"><span className="label">Payment Status</span><span className={`value ${tenant.payment_status === 'current' ? 'text-success':'text-danger'}`}>{tenant.payment_status}</span></div><div className="stat"><span className="label">Lease Ends</span><span className="value">{formatDate(tenant.lease_end_date)}</span></div></div><div className="tenant-actions"><button className="btn-icon" onClick={(e)=>{e.stopPropagation()}}><i className="fas fa-envelope"></i></button><button className="btn-icon" onClick={(e)=>{e.stopPropagation()}}><i className="fas fa-phone"></i></button><button className="btn-icon" onClick={(e)=>{e.stopPropagation()}}><i className="fas fa-file-invoice-dollar"></i></button></div></div>)};const AddTenantModal =({onClose,onSave})=>{const [formData,setFormData] = React.useState({first_name:'',last_name:'',email:'',phone:'',date_of_birth:'',ssn_last_four:'',emergency_contact:{name:'',phone:'',relationship:''},employment:{employer:'',position:'',income:'',start_date:''}});const handleSubmit = async(e)=>{e.preventDefault();try{const response = await fetch('http:method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${localStorage.getItem('access_token')}`},body:JSON.stringify(formData)});if(response.ok){showToast('success','Tenant added successfully');onSave()}}catch(error){showToast('error','Failed to add tenant')}};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-lg" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>Add New Tenant</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><form onSubmit={handleSubmit}className="modal-body"><div className="form-section"><h3>Personal Information</h3><div className="form-row"><div className="form-group"><label>First Name</label><input type="text" className="form-control" value={formData.first_name}onChange={(e)=> setFormData({...formData,first_name:e.target.value})}required /></div><div className="form-group"><label>Last Name</label><input type="text" className="form-control" value={formData.last_name}onChange={(e)=> setFormData({...formData,last_name:e.target.value})}required /></div></div><div className="form-row"><div className="form-group"><label>Email</label><input type="email" className="form-control" value={formData.email}onChange={(e)=> setFormData({...formData,email:e.target.value})}required /></div><div className="form-group"><label>Phone</label><input type="tel" className="form-control" value={formData.phone}onChange={(e)=> setFormData({...formData,phone:e.target.value})}required /></div></div></div><div className="form-section"><h3>Emergency Contact</h3><div className="form-row"><div className="form-group"><label>Contact Name</label><input type="text" className="form-control" value={formData.emergency_contact.name}onChange={(e)=> setFormData({...formData,emergency_contact:{...formData.emergency_contact,name:e.target.value}})}/></div><div className="form-group"><label>Contact Phone</label><input type="tel" className="form-control" value={formData.emergency_contact.phone}onChange={(e)=> setFormData({...formData,emergency_contact:{...formData.emergency_contact,phone:e.target.value}})}/></div></div></div><div className="modal-footer"><button type="button" className="btn btn-secondary" onClick={onClose}> Cancel </button><button type="submit" className="btn btn-primary"> Add Tenant </button></div></form></div></div>)};const TenantDetailsModal =({tenant,onClose})=>{const formatDate =(dateString)=>{if(!dateString)return 'N/A';const date = new Date(dateString);return date.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})};return(<div className="modal-overlay" onClick={onClose}><div className="modal modal-lg" onClick={(e)=> e.stopPropagation()}><div className="modal-header"><h2>Tenant Details</h2><button className="close-btn" onClick={onClose}><i className="fas fa-times"></i></button></div><div className="modal-body"><div className="tenant-detail-sections"><div className="detail-section"><h3>Personal Information</h3><div className="detail-grid"><div className="detail"><label>Full Name</label><span>{tenant.first_name}{tenant.last_name}</span></div><div className="detail"><label>Email</label><span>{tenant.email}</span></div><div className="detail"><label>Phone</label><span>{tenant.phone}</span></div><div className="detail"><label>Status</label><span>{tenant.status}</span></div></div></div><div className="detail-section"><h3>Lease Information</h3><div className="detail-grid"><div className="detail"><label>Property</label><span>{tenant.property_name}</span></div><div className="detail"><label>Unit</label><span>{tenant.unit_number}</span></div><div className="detail"><label>Lease Start</label><span>{formatDate(tenant.lease_start_date)}</span></div><div className="detail"><label>Lease End</label><span>{formatDate(tenant.lease_end_date)}</span></div><div className="detail"><label>Monthly Rent</label><span>${tenant.rent_amount}</span></div><div className="detail"><label>Security Deposit</label><span>${tenant.security_deposit || 'N/A'}</span></div></div></div><div className="detail-section"><h3>Payment History</h3><div className="payment-status"><span>Current Payment Status:</span><span className={`status ${tenant.payment_status === 'current' ? 'current':'overdue'}`}>{tenant.payment_status}</span></div></div></div></div><div className="modal-footer"><button className="btn btn-secondary" onClick={onClose}> Close </button><button className="btn btn-primary"><i className="fas fa-edit"></i> Edit Tenant </button></div></div></div>)};const showToast =(type,message)=>{};window.AppModules = window.AppModules ||{};window.AppModules.Tenants = Tenants;

// ResidentPortal.jsx
const ResidentPortal =(()=>{const ComponentFactory ={createComponent:(name,options ={})=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:true,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);return state},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('ResidentPortal',{})((props,helpers)=>{const{useLocalState,useAsyncState,formatCurrency,formatDate}= helpers;const [state,updateState] = useLocalState({activeView:'dashboard',showPayment:false,showMaintenance:false,maintenanceStep:'initial',newMaintenanceRequest:{},aiChatMessages:[],showNotifications:false,mobileMenuOpen:false});const tenantData = useAsyncState(async()=>{await new Promise(resolve => setTimeout(resolve,500));return{name:'Sarah Johnson',unit:'3B',property:'Sunset Apartments',rentAmount:2500,dueDate:'1st',balance:0,leaseEnd:'2025-12-31',profileImage:null,notifications:3,maintenanceRequests:{open:1,inProgress:0,completed:5},paymentHistory:[{date:'2025-01-01',amount:2500,status:'paid',method:'Valor'},{date:'2024-12-01',amount:2500,status:'paid',method:'Valor'}],documents:[{name:'Lease Agreement',date:'2024-01-15',type:'lease'},{name:'Move-in Inspection',date:'2024-01-10',type:'inspection'}]}},[]);if(tenantData.loading){return React.createElement('div',{className:'resident-portal-loading'},[ React.createElement('div',{key:'spinner',className:'portal-spinner'}),React.createElement('p',{key:'text'},'Loading your portal...')])}const tenant = tenantData.data ||{};return React.createElement('div',{className:'resident-portal'},[ React.createElement('header',{key:'header',className:'portal-header'},[ React.createElement('div',{key:'header-content',className:'header-content'},[ React.createElement('button',{key:'menu',className:'mobile-menu-btn',onClick:()=> updateState({mobileMenuOpen:!state.mobileMenuOpen})},React.createElement('i',{className:'fas fa-bars'})),React.createElement('div',{key:'title',className:'portal-title'},[ React.createElement('h1',{key:'name'},tenant.property),React.createElement('p',{key:'unit'},`Unit ${tenant.unit}`)]),React.createElement('button',{key:'notifications',className:'notification-btn',onClick:()=> updateState({showNotifications:!state.showNotifications})},[ React.createElement('i',{key:'icon',className:'fas fa-bell'}),tenant.notifications > 0 && React.createElement('span',{key:'badge',className:'notification-badge'},tenant.notifications)])])]),React.createElement('div',{key:'quick-actions',className:'quick-actions-bar'},[ React.createElement('button',{key:'pay',className:'quick-action-btn primary',onClick:()=> updateState({showPayment:true})},[ React.createElement('i',{key:'icon',className:'fas fa-credit-card'}),React.createElement('span',{key:'text'},'Pay Rent')]),React.createElement('button',{key:'maintenance',className:'quick-action-btn',onClick:()=> updateState({showMaintenance:true})},[ React.createElement('i',{key:'icon',className:'fas fa-tools'}),React.createElement('span',{key:'text'},'Maintenance')]),React.createElement('button',{key:'documents',className:'quick-action-btn',onClick:()=> updateState({activeView:'documents'})},[ React.createElement('i',{key:'icon',className:'fas fa-file-alt'}),React.createElement('span',{key:'text'},'Documents')])]),React.createElement('main',{key:'main',className:'portal-main'},[ state.activeView === 'dashboard' && React.createElement(ResidentDashboard,{key:'dashboard',tenant:tenant,onPayRent:()=> updateState({showPayment:true}),onNewMaintenance:()=> updateState({showMaintenance:true})}),state.activeView === 'documents' && React.createElement(DocumentsView,{key:'documents',documents:tenant.documents || []})]),state.showPayment && React.createElement(ValorPaymentModal,{key:'payment',tenant:tenant,onClose:()=> updateState({showPayment:false}),onSuccess:()=>{window.Toast?.success('Payment successful!');updateState({showPayment:false})}}),state.showMaintenance && React.createElement(AIMaintenanceModal,{key:'maintenance',tenant:tenant,step:state.maintenanceStep,request:state.newMaintenanceRequest,chatMessages:state.aiChatMessages,onUpdateRequest:(updates)=> updateState({newMaintenanceRequest:{...state.newMaintenanceRequest,...updates}}),onUpdateChat:(messages)=> updateState({aiChatMessages:messages}),onChangeStep:(step)=> updateState({maintenanceStep:step}),onClose:()=> updateState({showMaintenance:false,maintenanceStep:'initial',newMaintenanceRequest:{},aiChatMessages:[]})}),state.mobileMenuOpen && React.createElement('div',{key:'mobile-menu',className:'mobile-menu-overlay',onClick:()=> updateState({mobileMenuOpen:false})},React.createElement('div',{className:'mobile-menu',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'menu-header'},[ React.createElement('h2',{key:'name'},tenant.name),React.createElement('p',{key:'unit'},`Unit ${tenant.unit}`)]),React.createElement('nav',{key:'nav',className:'menu-items'},[ ['Dashboard','fa-home','dashboard'],['Payments','fa-credit-card','payments'],['Maintenance','fa-tools','maintenance'],['Documents','fa-file-alt','documents'],['Profile','fa-user','profile'],['Settings','fa-cog','settings'] ].map(([label,icon,view])=> React.createElement('button',{key:view,className:`menu-item ${state.activeView === view ? 'active':''}`,onClick:()=>{updateState({activeView:view,mobileMenuOpen:false})}},[ React.createElement('i',{key:'icon',className:`fas ${icon}`}),React.createElement('span',{key:'label'},label)]))),React.createElement('button',{key:'logout',className:'menu-item logout',onClick:()=> window.location.href = '/logout'},[ React.createElement('i',{key:'icon',className:'fas fa-sign-out-alt'}),React.createElement('span',{key:'label'},'Sign Out')])]))])})})();const ResidentDashboard = ComponentFactory.createComponent('ResidentDashboard',{})((props,helpers)=>{const{tenant,onPayRent,onNewMaintenance}= props;const{formatCurrency,formatDate}= helpers;return React.createElement('div',{className:'resident-dashboard'},[ React.createElement('div',{key:'rent-status',className:'dashboard-card rent-status-card'},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('h3',{key:'title'},'Rent Status'),React.createElement('span',{key:'status',className:'status-badge paid'},'Current')]),React.createElement('div',{key:'amount',className:'rent-amount'},[ React.createElement('span',{key:'label'},'Monthly Rent'),React.createElement('span',{key:'value'},formatCurrency(tenant.rentAmount))]),React.createElement('div',{key:'due',className:'rent-due'},[ React.createElement('span',{key:'label'},'Due on the'),React.createElement('span',{key:'value'},tenant.dueDate)]),tenant.balance > 0 && React.createElement('div',{key:'balance',className:'outstanding-balance'},[ React.createElement('span',{key:'label'},'Outstanding Balance'),React.createElement('span',{key:'value'},formatCurrency(tenant.balance))]),React.createElement('button',{key:'pay-btn',className:'pay-rent-btn',onClick:onPayRent},[ React.createElement('i',{key:'icon',className:'fas fa-credit-card'}),'Pay Rent Now' ])]),React.createElement('div',{key:'maintenance',className:'dashboard-card maintenance-card'},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('h3',{key:'title'},'Maintenance'),React.createElement('button',{key:'new',className:'new-request-btn',onClick:onNewMaintenance},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'New Request' ])]),React.createElement('div',{key:'stats',className:'maintenance-stats'},[ React.createElement('div',{key:'open',className:'stat'},[ React.createElement('span',{key:'value',className:'stat-value'},tenant.maintenanceRequests?.open || 0),React.createElement('span',{key:'label',className:'stat-label'},'Open')]),React.createElement('div',{key:'progress',className:'stat'},[ React.createElement('span',{key:'value',className:'stat-value'},tenant.maintenanceRequests?.inProgress || 0),React.createElement('span',{key:'label',className:'stat-label'},'In Progress')]),React.createElement('div',{key:'completed',className:'stat'},[ React.createElement('span',{key:'value',className:'stat-value'},tenant.maintenanceRequests?.completed || 0),React.createElement('span',{key:'label',className:'stat-label'},'Completed')])])]),React.createElement('div',{key:'activity',className:'dashboard-card activity-card'},[ React.createElement('h3',{key:'title'},'Recent Activity'),React.createElement('div',{key:'timeline',className:'activity-timeline'},[{icon:'fa-check-circle',text:'January rent paid',date:'2025-01-01',type:'success'},{icon:'fa-tools',text:'Maintenance request completed',date:'2024-12-28',type:'info'},{icon:'fa-file-alt',text:'Lease renewal reminder',date:'2024-12-15',type:'warning'}].map((activity,idx)=> React.createElement('div',{key:idx,className:`activity-item ${activity.type}`},[ React.createElement('i',{key:'icon',className:`fas ${activity.icon}`}),React.createElement('div',{key:'content',className:'activity-content'},[ React.createElement('p',{key:'text'},activity.text),React.createElement('span',{key:'date',className:'activity-date'},formatDate(activity.date))])])))]),React.createElement('div',{key:'quick-links',className:'dashboard-card quick-links-card'},[ React.createElement('h3',{key:'title'},'Quick Links'),React.createElement('div',{key:'links',className:'quick-links-grid'},[{icon:'fa-file-contract',label:'View Lease',action:'viewLease'},{icon:'fa-history',label:'Payment History',action:'paymentHistory'},{icon:'fa-user-shield',label:'Renters Insurance',action:'insurance'},{icon:'fa-question-circle',label:'FAQ',action:'faq'}].map(link => React.createElement('button',{key:link.action,className:'quick-link',onClick:()=>},[ React.createElement('i',{key:'icon',className:`fas ${link.icon}`}),React.createElement('span',{key:'label'},link.label)])))])])});window.AppModules = window.AppModules ||{};window.AppModules.ResidentPortal = ResidentPortal;window.AppModules.ResidentDashboard = ResidentDashboard;

// MaintenanceKanban.jsx
const MaintenanceKanban =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric'})},formatDateTime:(date)=>{return new Date(date).toLocaleString('en-US',{month:'short',day:'numeric',hour:'numeric',minute:'2-digit',hour12:true})},getTimeSince:(date)=>{const now = new Date();const then = new Date(date);const diffMs = now - then;const diffDays = Math.floor(diffMs /(1000 * 60 * 60 * 24));const diffHours = Math.floor(diffMs /(1000 * 60 * 60));const diffMins = Math.floor(diffMs /(1000 * 60));if(diffDays > 0)return `${diffDays}d ago`;if(diffHours > 0)return `${diffHours}h ago`;return `${diffMins}m ago`}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('MaintenanceKanban')((props,helpers)=>{const{useLocalState,formatDate,formatDateTime,getTimeSince}= helpers;const{companyId,userRole}= props;const [state,updateState] = useLocalState({viewMode:'kanban',workOrders:[],filters:{property:'all',priority:'all',category:'all',assignee:'all',dateRange:'week'},selectedOrder:null,showDetailModal:false,draggedItem:null,searchQuery:'',aiChatOpen:false,aiQuery:'',maintenanceHistory:[],predictiveInsights:[]});React.useEffect(()=>{loadMaintenanceData();loadPredictiveInsights()},[state.filters]);const loadMaintenanceData = async()=>{const mockWorkOrders = [{id:'WO201',title:'Leaking kitchen faucet',property:'Sunset Apartments',unit:'3B',tenant:'Sarah Johnson',category:'plumbing',priority:'high',status:'new',createdAt:new Date('2025-01-13T09:00:00'),description:'Kitchen faucet has been dripping constantly for 2 days',aiUrgencyScore:85,estimatedCost:150,photos:['faucet1.jpg'],chatMessages:3},{id:'WO202',title:'AC not cooling properly',property:'Downtown Plaza',unit:'5A',tenant:'Mike Chen',category:'hvac',priority:'medium',status:'in_progress',assignedTo:'CoolBreeze HVAC',assignedAt:new Date('2025-01-12T14:00:00'),scheduledFor:new Date('2025-01-14T10:00:00'),createdAt:new Date('2025-01-11T16:00:00'),description:'AC running but not cooling. Tenant reports room temp at 78°F',aiUrgencyScore:72,estimatedCost:250,chatMessages:8,vendorETA:'10:00 AM - 12:00 PM'},{id:'WO203',title:'Toilet running constantly',property:'Garden Complex',unit:'2C',tenant:'Emma Davis',category:'plumbing',priority:'medium',status:'awaiting_parts',assignedTo:'ABC Plumbing',createdAt:new Date('2025-01-10T11:00:00'),description:'Toilet flapper needs replacement. Part ordered.',aiUrgencyScore:65,estimatedCost:75,partsOrdered:true,expectedDelivery:new Date('2025-01-15T12:00:00'),chatMessages:5},{id:'WO204',title:'Replace smoke detector batteries',property:'Sunset Apartments',unit:'1A',tenant:'John Williams',category:'safety',priority:'low',status:'scheduled',assignedTo:'In-house Maintenance',scheduledFor:new Date('2025-01-16T09:00:00'),createdAt:new Date('2025-01-09T08:00:00'),description:'Annual smoke detector maintenance',aiUrgencyScore:45,estimatedCost:25,chatMessages:1},{id:'WO205',title:'Window seal repair',property:'Downtown Plaza',unit:'8B',tenant:'Lisa Anderson',category:'general',priority:'low',status:'completed',assignedTo:'HandyPro Services',completedAt:new Date('2025-01-12T15:30:00'),createdAt:new Date('2025-01-08T10:00:00'),description:'Window seal letting in cold air',aiUrgencyScore:35,totalCost:120,rating:5,feedback:'Quick and professional service!',chatMessages:6}];const mockHistory = [{id:'H001',action:'status_change',workOrderId:'WO202',from:'new',to:'in_progress',timestamp:new Date('2025-01-12T14:00:00'),user:'System',note:'Vendor assigned and notified'},{id:'H002',action:'vendor_message',workOrderId:'WO202',timestamp:new Date('2025-01-12T14:30:00'),user:'CoolBreeze HVAC',note:'Confirmed appointment for tomorrow at 10 AM'},{id:'H003',action:'created',workOrderId:'WO201',timestamp:new Date('2025-01-13T09:00:00'),user:'AI Assistant',note:'Work order created from tenant chat'}];updateState({workOrders:mockWorkOrders,maintenanceHistory:mockHistory})};const loadPredictiveInsights = async()=>{const insights = [{id:'PI001',type:'upcoming',title:'HVAC Filter Replacements Due',description:'12 units need HVAC filter replacements in the next 2 weeks',units:['3A','3B','4C','5A','5B','6A','7B','8A','8B','9A','10B','11C'],estimatedCost:600,dueDate:new Date('2025-01-28'),priority:'medium',action:'Schedule Bulk Service'},{id:'PI002',type:'pattern',title:'Increased Plumbing Issues - Building B',description:'40% increase in plumbing issues in Building B. Possible main line issue.',affectedUnits:8,trend:'increasing',recommendation:'Schedule inspection of main water line',priority:'high'},{id:'PI003',type:'seasonal',title:'Winter Preparation Checklist',description:'Seasonal maintenance tasks for cold weather preparation',tasks:['Gutter cleaning','Heating system checks','Pipe insulation'],estimatedCost:2500,deadline:new Date('2025-02-01'),priority:'medium'}];updateState({predictiveInsights:insights})};const kanbanColumns = [{id:'new',title:'New Requests',color:'danger',icon:'fa-inbox'},{id:'in_progress',title:'In Progress',color:'primary',icon:'fa-wrench'},{id:'awaiting_parts',title:'Awaiting Parts',color:'warning',icon:'fa-box'},{id:'scheduled',title:'Scheduled',color:'info',icon:'fa-calendar'},{id:'completed',title:'Completed',color:'success',icon:'fa-check-circle'}];return React.createElement('div',{className:'maintenance-kanban'},[ React.createElement('div',{key:'header',className:'kanban-header'},[ React.createElement('div',{key:'title-section'},[ React.createElement('h1',{key:'title'},'Maintenance Management'),React.createElement('div',{key:'stats',className:'header-stats'},[ React.createElement('span',{key:'total'},`${state.workOrders.filter(wo => wo.status !== 'completed').length}Active`),React.createElement('span',{key:'urgent'},`${state.workOrders.filter(wo => wo.priority === 'high').length}Urgent`),React.createElement('span',{key:'overdue'},`${state.workOrders.filter(wo => isOverdue(wo)).length}Overdue`)])]),React.createElement('div',{key:'controls',className:'header-controls'},[ React.createElement('div',{key:'search',className:'search-box'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search work orders...',value:state.searchQuery,onChange:(e)=> updateState({searchQuery:e.target.value})})]),React.createElement('div',{key:'view-toggle',className:'view-toggle'},[{id:'kanban',icon:'fa-th',label:'Kanban'},{id:'timeline',icon:'fa-stream',label:'Timeline'},{id:'calendar',icon:'fa-calendar-alt',label:'Calendar'}].map(view => React.createElement('button',{key:view.id,className:`view-btn ${state.viewMode === view.id ? 'active':''}`,onClick:()=> updateState({viewMode:view.id}),title:view.label},React.createElement('i',{className:`fas ${view.icon}`})))),React.createElement('button',{key:'ai-chat',className:'btn btn-ai',onClick:()=> updateState({aiChatOpen:!state.aiChatOpen})},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),'AI Assistant' ])])]),React.createElement('div',{key:'filters',className:'kanban-filters'},[ React.createElement('select',{key:'property',value:state.filters.property,onChange:(e)=> updateState({filters:{...state.filters,property:e.target.value}})},[ React.createElement('option',{key:'all',value:'all'},'All Properties'),React.createElement('option',{key:'sunset',value:'sunset'},'Sunset Apartments'),React.createElement('option',{key:'downtown',value:'downtown'},'Downtown Plaza'),React.createElement('option',{key:'garden',value:'garden'},'Garden Complex')]),React.createElement('select',{key:'priority',value:state.filters.priority,onChange:(e)=> updateState({filters:{...state.filters,priority:e.target.value}})},[ React.createElement('option',{key:'all',value:'all'},'All Priorities'),React.createElement('option',{key:'high',value:'high'},'High Priority'),React.createElement('option',{key:'medium',value:'medium'},'Medium Priority'),React.createElement('option',{key:'low',value:'low'},'Low Priority')]),React.createElement('select',{key:'category',value:state.filters.category,onChange:(e)=> updateState({filters:{...state.filters,category:e.target.value}})},[ React.createElement('option',{key:'all',value:'all'},'All Categories'),React.createElement('option',{key:'plumbing',value:'plumbing'},'Plumbing'),React.createElement('option',{key:'electrical',value:'electrical'},'Electrical'),React.createElement('option',{key:'hvac',value:'hvac'},'HVAC'),React.createElement('option',{key:'general',value:'general'},'General')]),React.createElement('button',{key:'add-order',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'New Work Order' ])]),state.predictiveInsights.length > 0 && React.createElement('div',{key:'insights',className:'predictive-insights-bar'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-lightbulb'}),'AI Predictive Insights' ]),React.createElement('div',{key:'insights',className:'insights-scroll'},state.predictiveInsights.map(insight => React.createElement('div',{key:insight.id,className:`insight-card ${insight.priority}`},[ React.createElement('div',{key:'content'},[ React.createElement('h4',{key:'title'},insight.title),React.createElement('p',{key:'desc'},insight.description)]),insight.action && React.createElement('button',{key:'action',className:'insight-action'},insight.action)])))]),React.createElement('div',{key:'content',className:'kanban-content'},[ state.viewMode === 'kanban' && renderKanbanView(),state.viewMode === 'timeline' && renderTimelineView(),state.viewMode === 'calendar' && renderCalendarView()]),state.showDetailModal && React.createElement(WorkOrderDetailModal,{key:'detail-modal',workOrder:state.selectedOrder,onClose:()=> updateState({showDetailModal:false,selectedOrder:null}),onUpdate:(updates)=> updateWorkOrder(state.selectedOrder.id,updates),maintenanceHistory:state.maintenanceHistory.filter(h => h.workOrderId === state.selectedOrder.id)}),state.aiChatOpen && React.createElement(MaintenanceAIChat,{key:'ai-chat',workOrders:state.workOrders,onClose:()=> updateState({aiChatOpen:false}),onQuery:(query)=> handleAIQuery(query)})]);function renderKanbanView(){const filteredOrders = filterWorkOrders(state.workOrders);return React.createElement('div',{className:'kanban-board'},kanbanColumns.map(column => React.createElement('div',{key:column.id,className:`kanban-column ${column.color}`,onDragOver:handleDragOver,onDrop:(e)=> handleDrop(e,column.id)},[ React.createElement('div',{key:'header',className:'column-header'},[ React.createElement('i',{key:'icon',className:`fas ${column.icon}`}),React.createElement('h3',{key:'title'},column.title),React.createElement('span',{key:'count',className:'column-count'},filteredOrders.filter(wo => wo.status === column.id).length)]),React.createElement('div',{key:'cards',className:'column-cards'},filteredOrders .filter(wo => wo.status === column.id).map(order => React.createElement(WorkOrderCard,{key:order.id,order:order,onSelect:()=> updateState({selectedOrder:order,showDetailModal:true}),onDragStart:(e)=> handleDragStart(e,order),draggable:true})))])))}function renderTimelineView(){const filteredOrders = filterWorkOrders(state.workOrders);const timelineEvents = generateTimelineEvents(filteredOrders,state.maintenanceHistory);return React.createElement('div',{className:'timeline-view'},timelineEvents.map((event,idx)=> React.createElement('div',{key:event.id,className:`timeline-event ${event.type}`},[ React.createElement('div',{key:'marker',className:'timeline-marker'},React.createElement('i',{className:`fas ${getEventIcon(event)}`})),React.createElement('div',{key:'content',className:'timeline-content'},[ React.createElement('div',{key:'header',className:'event-header'},[ React.createElement('h4',{key:'title'},event.title),React.createElement('span',{key:'time',className:'event-time'},formatDateTime(event.timestamp))]),React.createElement('p',{key:'desc',className:'event-description'},event.description),event.workOrder && React.createElement('div',{key:'details',className:'event-details'},[ React.createElement('span',{key:'property'},event.workOrder.property),React.createElement('span',{key:'unit'},`Unit ${event.workOrder.unit}`),React.createElement('span',{key:'priority',className:`priority-badge ${event.workOrder.priority}`},event.workOrder.priority)])])])))}function renderCalendarView(){return React.createElement('div',{className:'calendar-view'},React.createElement('div',{className:'calendar-placeholder'},[ React.createElement('i',{className:'fas fa-calendar-alt'}),React.createElement('p',{},'Calendar view showing scheduled maintenance')]))}function filterWorkOrders(orders){return orders.filter(order =>{const matchesSearch = !state.searchQuery || order.title.toLowerCase().includes(state.searchQuery.toLowerCase())|| order.tenant.toLowerCase().includes(state.searchQuery.toLowerCase());const matchesProperty = state.filters.property === 'all' || order.property.toLowerCase().includes(state.filters.property);const matchesPriority = state.filters.priority === 'all' || order.priority === state.filters.priority;const matchesCategory = state.filters.category === 'all' || order.category === state.filters.category;return matchesSearch && matchesProperty && matchesPriority && matchesCategory})}function isOverdue(workOrder){if(workOrder.status === 'completed')return false;const created = new Date(workOrder.createdAt);const now = new Date();const daysSince =(now - created)/(1000 * 60 * 60 * 24);if(workOrder.priority === 'high' && daysSince > 1)return true;if(workOrder.priority === 'medium' && daysSince > 3)return true;if(workOrder.priority === 'low' && daysSince > 7)return true;return false}function handleDragStart(e,order){updateState({draggedItem:order});e.dataTransfer.effectAllowed = 'move'}function handleDragOver(e){e.preventDefault();e.dataTransfer.dropEffect = 'move'}function handleDrop(e,newStatus){e.preventDefault();if(state.draggedItem){updateWorkOrder(state.draggedItem.id,{status:newStatus});updateState({draggedItem:null})}}function updateWorkOrder(orderId,updates){const updatedOrders = state.workOrders.map(wo => wo.id === orderId ?{...wo,...updates}:wo);updateState({workOrders:updatedOrders});const historyEntry ={id:`H${Date.now()}`,action:'status_change',workOrderId:orderId,from:state.workOrders.find(wo => wo.id === orderId).status,to:updates.status,timestamp:new Date(),user:'Property Manager'};updateState({maintenanceHistory:[...state.maintenanceHistory,historyEntry]})}function generateTimelineEvents(orders,history){const events = [];orders.forEach(order =>{events.push({id:`WO-${order.id}`,type:'work_order',title:order.title,description:`Created by ${order.tenant}`,timestamp:order.createdAt,workOrder:order});if(order.completedAt){events.push({id:`WO-${order.id}-complete`,type:'completion',title:`${order.title}- Completed`,description:`Completed by ${order.assignedTo}`,timestamp:order.completedAt,workOrder:order})}});history.forEach(entry =>{const order = orders.find(wo => wo.id === entry.workOrderId);if(order){events.push({id:entry.id,type:entry.action,title:`${order.title}- ${entry.action.replace('_',' ')}`,description:entry.note || `Changed by ${entry.user}`,timestamp:entry.timestamp,workOrder:order})}});return events.sort((a,b)=> new Date(b.timestamp)- new Date(a.timestamp))}function getEventIcon(event){const icons ={work_order:'fa-wrench',completion:'fa-check-circle',status_change:'fa-exchange-alt',vendor_message:'fa-comment',created:'fa-plus-circle'};return icons[event.type] || 'fa-circle'}async function handleAIQuery(query){const lowerQuery = query.toLowerCase();if(lowerQuery.includes('overdue')){const overdue = state.workOrders.filter(isOverdue);return `There are ${overdue.length}overdue work orders. The most urgent is "${overdue[0]?.title}" at ${overdue[0]?.property}.`}if(lowerQuery.includes('cost')|| lowerQuery.includes('spend')){const totalCost = state.workOrders.reduce((sum,wo)=> sum +(wo.totalCost || wo.estimatedCost || 0),0);return `Total maintenance costs this period:$${totalCost}. Average cost per work order:$${Math.round(totalCost / state.workOrders.length)}.`}if(lowerQuery.includes('vendor')){const vendors = [...new Set(state.workOrders.map(wo => wo.assignedTo).filter(Boolean))];return `Currently working with ${vendors.length}vendors. Most active:${vendors[0]}.`}return "I can help you with maintenance queries. Try asking about overdue items,costs,or vendor performance."}})})();const WorkOrderCard = ComponentFactory.createComponent('WorkOrderCard')((props,helpers)=>{const{order,onSelect,onDragStart,draggable}= props;const{formatDate,getTimeSince}= helpers;const priorityColors ={high:'danger',medium:'warning',low:'secondary'};const categoryIcons ={plumbing:'fa-faucet',electrical:'fa-bolt',hvac:'fa-snowflake',general:'fa-tools',safety:'fa-shield-alt'};return React.createElement('div',{className:`work-order-card ${order.priority}`,onClick:onSelect,draggable:draggable,onDragStart:onDragStart},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('div',{key:'title-section'},[ React.createElement('h4',{key:'title'},order.title),React.createElement('p',{key:'location'},`${order.property}- Unit ${order.unit}`)]),React.createElement('span',{key:'priority',className:`priority-indicator ${priorityColors[order.priority]}`})]),React.createElement('div',{key:'body',className:'card-body'},[ React.createElement('div',{key:'category',className:'card-category'},[ React.createElement('i',{className:`fas ${categoryIcons[order.category]}`}),React.createElement('span',{},order.category)]),order.aiUrgencyScore && React.createElement('div',{key:'ai-score',className:'ai-urgency-indicator'},[ React.createElement('span',{className:'score-label'},'AI Urgency:'),React.createElement('div',{className:'score-bar'},React.createElement('div',{className:'score-fill',style:{width:`${order.aiUrgencyScore}%`}})),React.createElement('span',{className:'score-value'},order.aiUrgencyScore)])]),React.createElement('div',{key:'footer',className:'card-footer'},[ React.createElement('div',{key:'tenant',className:'tenant-info'},[ React.createElement('i',{className:'fas fa-user'}),React.createElement('span',{},order.tenant)]),React.createElement('div',{key:'time',className:'time-info'},[ React.createElement('i',{className:'fas fa-clock'}),React.createElement('span',{},getTimeSince(order.createdAt))]),order.chatMessages > 0 && React.createElement('div',{key:'chat',className:'chat-indicator'},[ React.createElement('i',{className:'fas fa-comment'}),React.createElement('span',{},order.chatMessages)])]),order.assignedTo && React.createElement('div',{key:'assigned',className:'assigned-vendor'},[ React.createElement('i',{className:'fas fa-user-check'}),React.createElement('span',{},order.assignedTo)]),order.scheduledFor && React.createElement('div',{key:'scheduled',className:'scheduled-time'},[ React.createElement('i',{className:'fas fa-calendar-check'}),React.createElement('span',{},formatDate(order.scheduledFor)),order.vendorETA && React.createElement('span',{className:'eta'},order.vendorETA)])])});const MaintenanceAIChat = ComponentFactory.createComponent('MaintenanceAIChat')((props,helpers)=>{const{workOrders,onClose,onQuery}= props;const [messages,setMessages] = React.useState([{id:1,sender:'ai',text:'Hello! I can help you query maintenance data. Try asking about overdue items,costs,vendor performance,or specific properties.',timestamp:new Date()}]);const [input,setInput] = React.useState('');const sendMessage = async()=>{if(!input.trim())return;const userMessage ={id:messages.length + 1,sender:'user',text:input,timestamp:new Date()};setMessages([...messages,userMessage]);const response = await onQuery(input);const aiMessage ={id:messages.length + 2,sender:'ai',text:response,timestamp:new Date()};setMessages(prev => [...prev,aiMessage]);setInput('')};const quickQueries = [ 'Show overdue work orders','What are the maintenance costs this month?','Which vendor is most active?','Any emergency repairs needed?' ];return React.createElement('div',{className:'maintenance-ai-chat'},[ React.createElement('div',{key:'header',className:'chat-header'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),'Maintenance AI Assistant' ]),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},'×')]),React.createElement('div',{key:'messages',className:'chat-messages'},messages.map(msg => React.createElement('div',{key:msg.id,className:`message ${msg.sender}`},[ React.createElement('div',{key:'bubble',className:'message-bubble'},msg.text),React.createElement('div',{key:'time',className:'message-time'},helpers.formatTime(msg.timestamp))]))),React.createElement('div',{key:'quick',className:'quick-queries'},quickQueries.map((query,idx)=> React.createElement('button',{key:idx,className:'quick-query-btn',onClick:()=> setInput(query)},query))),React.createElement('div',{key:'input',className:'chat-input'},[ React.createElement('input',{key:'field',type:'text',placeholder:'Ask about maintenance...',value:input,onChange:(e)=> setInput(e.target.value),onKeyPress:(e)=> e.key === 'Enter' && sendMessage()}),React.createElement('button',{key:'send',onClick:sendMessage,disabled:!input.trim()},React.createElement('i',{className:'fas fa-paper-plane'}))])])});window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceKanban = MaintenanceKanban;window.AppModules.WorkOrderCard = WorkOrderCard;window.AppModules.MaintenanceAIChat = MaintenanceAIChat;

// MaintenanceDashboard.jsx
const MaintenanceDashboard =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:true,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);return state}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('MaintenanceDashboard')((props,helpers)=>{const{useLocalState,useAsyncState}= helpers;const [state,updateState] = useLocalState({viewMode:'kanban',filterStatus:'all',selectedRequest:null,showPredictiveInsights:false,timeRange:'30days'});const maintenanceData = useAsyncState(async()=>{await new Promise(resolve => setTimeout(resolve,1000));return{requests:[{id:'MNT-001',title:'Kitchen sink leak',unit:'3B',tenant:'Sarah Johnson',category:'plumbing',status:'in_progress',urgencyScore:85,createdAt:'2025-01-10T10:30:00',vendor:'Quick Fix Plumbing',scheduledFor:'2025-01-11T14:00:00',estimatedCost:125,aiNotes:'AI detected potential pipe corrosion. Recommend full inspection.',chatActivity:12},{id:'MNT-002',title:'AC not cooling properly',unit:'5A',tenant:'Mike Chen',category:'hvac',status:'scheduled',urgencyScore:70,createdAt:'2025-01-09T15:45:00',vendor:'Cool Air Services',scheduledFor:'2025-01-12T09:00:00',estimatedCost:200,aiNotes:'Pattern detected:3rd HVAC issue this summer. System may need replacement.',chatActivity:8},{id:'MNT-003',title:'Broken door lock',unit:'2C',tenant:'Emma Davis',category:'security',status:'new',urgencyScore:95,createdAt:'2025-01-11T08:00:00',vendor:null,aiNotes:'HIGH PRIORITY:Security issue. Immediate vendor dispatch recommended.',chatActivity:3}],predictiveInsights:{upcomingMaintenance:[{type:'HVAC Service',units:['1A','1B','2A','2B'],predictedDate:'2025-02-15',reason:'Annual service due based on historical patterns',estimatedCost:800,preventionTip:'Schedule group service for cost savings'},{type:'Plumbing Inspection',units:['3A','3B','3C'],predictedDate:'2025-02-01',reason:'Water pressure anomaly detected in building sensors',estimatedCost:300,preventionTip:'Early inspection can prevent major leaks'}],vendorPerformance:[{vendor:'Quick Fix Plumbing',avgResponseTime:'2.5 hours',completionRate:'96%',avgRating:4.8,recommendation:'Top performer - prioritize for urgent issues'},{vendor:'HandyPro Services',avgResponseTime:'4 hours',completionRate:'88%',avgRating:4.2,recommendation:'Good for non-urgent repairs'}]},statistics:{totalRequests:145,avgResolutionTime:'2.3 days',firstTimeFixRate:'87%',tenantSatisfaction:'4.6/5',costSavings:'$2,450(from AI troubleshooting)'}}},[state.timeRange]);if(maintenanceData.loading){return React.createElement('div',{className:'maintenance-loading'},React.createElement('div',{className:'spinner'}))}const data = maintenanceData.data ||{};return React.createElement('div',{className:'maintenance-dashboard'},[ React.createElement('div',{key:'header',className:'dashboard-header'},[ React.createElement('h2',{key:'title'},'Maintenance Command Center'),React.createElement('div',{key:'controls',className:'header-controls'},[ React.createElement('div',{key:'view-toggle',className:'view-toggle'},[ ['kanban','fa-columns','Kanban'],['timeline','fa-stream','Timeline'],['list','fa-list','List'] ].map(([mode,icon,label])=> React.createElement('button',{key:mode,className:`view-btn ${state.viewMode === mode ? 'active':''}`,onClick:()=> updateState({viewMode:mode}),title:label},React.createElement('i',{className:`fas ${icon}`})))),React.createElement('button',{key:'ai-toggle',className:`ai-insights-btn ${state.showPredictiveInsights ? 'active':''}`,onClick:()=> updateState({showPredictiveInsights:!state.showPredictiveInsights})},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),'AI Insights' ])])]),React.createElement('div',{key:'metrics',className:'maintenance-metrics'},[{label:'Open Requests',value:data.requests?.filter(r => r.status !== 'completed').length || 0,icon:'fa-tools',color:'primary'},{label:'Avg Resolution',value:data.statistics?.avgResolutionTime || 'N/A',icon:'fa-clock',color:'info'},{label:'First-Time Fix',value:data.statistics?.firstTimeFixRate || 'N/A',icon:'fa-check-circle',color:'success'},{label:'AI Savings',value:data.statistics?.costSavings || '$0',icon:'fa-piggy-bank',color:'warning'}].map((metric,idx)=> React.createElement('div',{key:idx,className:`metric-card ${metric.color}`},[ React.createElement('i',{key:'icon',className:`fas ${metric.icon}`}),React.createElement('div',{key:'content',className:'metric-content'},[ React.createElement('span',{key:'value',className:'metric-value'},metric.value),React.createElement('span',{key:'label',className:'metric-label'},metric.label)])]))),React.createElement('div',{key:'content',className:'dashboard-content'},[ state.showPredictiveInsights && React.createElement(PredictiveMaintenancePanel,{key:'predictive',insights:data.predictiveInsights,onSchedulePreventive:(maintenance)=>{}}),React.createElement('div',{key:'requests',className:'maintenance-requests'},[ state.viewMode === 'kanban' && React.createElement(MaintenanceKanban,{key:'kanban',requests:data.requests || [],onSelectRequest:(request)=> updateState({selectedRequest:request})}),state.viewMode === 'timeline' && React.createElement(MaintenanceTimeline,{key:'timeline',requests:data.requests || [],onSelectRequest:(request)=> updateState({selectedRequest:request})}),state.viewMode === 'list' && React.createElement(MaintenanceList,{key:'list',requests:data.requests || [],onSelectRequest:(request)=> updateState({selectedRequest:request})})])]),state.selectedRequest && React.createElement(MaintenanceDetailModal,{key:'detail',request:state.selectedRequest,onClose:()=> updateState({selectedRequest:null}),onUpdateStatus:(status)=>{}})])})})();const MaintenanceKanban = ComponentFactory.createComponent('MaintenanceKanban')((props,helpers)=>{const{requests,onSelectRequest}= props;const columns = [{id:'new',title:'New Requests',color:'#ef4444'},{id:'scheduled',title:'Scheduled',color:'#f59e0b'},{id:'in_progress',title:'In Progress',color:'#3b82f6'},{id:'awaiting_parts',title:'Awaiting Parts',color:'#8b5cf6'},{id:'completed',title:'Completed',color:'#10b981'}];return React.createElement('div',{className:'maintenance-kanban'},columns.map(column => React.createElement('div',{key:column.id,className:'kanban-column'},[ React.createElement('div',{key:'header',className:'column-header',style:{borderTopColor:column.color}},[ React.createElement('h3',{key:'title'},column.title),React.createElement('span',{key:'count',className:'column-count'},requests.filter(r => r.status === column.id).length)]),React.createElement('div',{key:'cards',className:'column-cards'},requests .filter(r => r.status === column.id).map(request => React.createElement('div',{key:request.id,className:'maintenance-card',onClick:()=> onSelectRequest(request)},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('span',{key:'id',className:'request-id'},request.id),React.createElement('span',{key:'urgency',className:`urgency-badge urgency-${request.urgencyScore >= 80 ? 'high':request.urgencyScore >= 50 ? 'medium':'low'}`},request.urgencyScore)]),React.createElement('h4',{key:'title'},request.title),React.createElement('p',{key:'unit'},`Unit ${request.unit}- ${request.tenant}`),request.vendor && React.createElement('div',{key:'vendor',className:'card-vendor'},[ React.createElement('i',{key:'icon',className:'fas fa-user-tie'}),request.vendor ]),request.scheduledFor && React.createElement('div',{key:'schedule',className:'card-schedule'},[ React.createElement('i',{key:'icon',className:'fas fa-calendar'}),new Date(request.scheduledFor).toLocaleDateString()]),request.aiNotes && React.createElement('div',{key:'ai-note',className:'card-ai-note'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),request.aiNotes ]),React.createElement('div',{key:'footer',className:'card-footer'},[ React.createElement('span',{key:'category',className:'card-category'},React.createElement('i',{className:`fas fa-${getCategoryIcon(request.category)}`})),request.chatActivity > 0 && React.createElement('span',{key:'chat',className:'card-chat'},[ React.createElement('i',{key:'icon',className:'fas fa-comment'}),request.chatActivity ])])])))])))});const PredictiveMaintenancePanel = ComponentFactory.createComponent('PredictiveMaintenancePanel')((props,helpers)=>{const{insights,onSchedulePreventive}= props;return React.createElement('div',{className:'predictive-maintenance-panel'},[ React.createElement('h3',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-crystal-ball'}),'AI Predictive Insights' ]),React.createElement('div',{key:'predictions',className:'maintenance-predictions'},[ React.createElement('h4',{key:'title'},'Predicted Maintenance Needs'),React.createElement('div',{key:'list',className:'predictions-list'},insights?.upcomingMaintenance?.map((prediction,idx)=> React.createElement('div',{key:idx,className:'prediction-card'},[ React.createElement('div',{key:'header',className:'prediction-header'},[ React.createElement('h5',{key:'type'},prediction.type),React.createElement('span',{key:'date',className:'prediction-date'},`Due:${new Date(prediction.predictedDate).toLocaleDateString()}`)]),React.createElement('p',{key:'units',className:'affected-units'},`Units:${prediction.units.join(',')}`),React.createElement('p',{key:'reason',className:'prediction-reason'},React.createElement('i',{className:'fas fa-info-circle'}),' ',prediction.reason),React.createElement('div',{key:'footer',className:'prediction-footer'},[ React.createElement('span',{key:'cost',className:'estimated-cost'},`Est. $${prediction.estimatedCost}`),React.createElement('button',{key:'schedule',className:'schedule-btn',onClick:()=> onSchedulePreventive(prediction)},'Schedule Now')]),React.createElement('div',{key:'tip',className:'prevention-tip'},[ React.createElement('i',{key:'icon',className:'fas fa-lightbulb'}),prediction.preventionTip ])])))]),React.createElement('div',{key:'vendors',className:'vendor-insights'},[ React.createElement('h4',{key:'title'},'Vendor Performance Analysis'),React.createElement('div',{key:'list',className:'vendor-performance-list'},insights?.vendorPerformance?.map((vendor,idx)=> React.createElement('div',{key:idx,className:'vendor-performance-card'},[ React.createElement('h5',{key:'name'},vendor.vendor),React.createElement('div',{key:'metrics',className:'vendor-metrics'},[ React.createElement('div',{key:'response',className:'metric'},[ React.createElement('i',{key:'icon',className:'fas fa-clock'}),React.createElement('span',{key:'label'},'Response:'),React.createElement('strong',{key:'value'},vendor.avgResponseTime)]),React.createElement('div',{key:'completion',className:'metric'},[ React.createElement('i',{key:'icon',className:'fas fa-check'}),React.createElement('span',{key:'label'},'Completion:'),React.createElement('strong',{key:'value'},vendor.completionRate)]),React.createElement('div',{key:'rating',className:'metric'},[ React.createElement('i',{key:'icon',className:'fas fa-star'}),React.createElement('span',{key:'label'},'Rating:'),React.createElement('strong',{key:'value'},vendor.avgRating)])]),React.createElement('p',{key:'recommendation',className:'ai-recommendation'},React.createElement('i',{className:'fas fa-robot'}),' ',vendor.recommendation)])))])])});function getCategoryIcon(category){const icons ={plumbing:'faucet',electrical:'bolt',hvac:'temperature-high',appliance:'blender',security:'lock',pest:'bug',other:'tools'};return icons[category] || 'tools'}window.AppModules = window.AppModules ||{};window.AppModules.MaintenanceDashboard = MaintenanceDashboard;window.AppModules.MaintenanceKanban = MaintenanceKanban;window.AppModules.PredictiveMaintenancePanel = PredictiveMaintenancePanel;

// DigitalApplication.jsx
const DigitalApplication =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},useAsyncState:(asyncFunc,deps = [])=>{const [state,setState] = React.useState({loading:false,data:null,error:null});React.useEffect(()=>{let mounted = true;const fetchData = async()=>{try{setState({loading:true,data:null,error:null});const data = await asyncFunc();if(mounted)setState({loading:false,data,error:null})}catch(error){if(mounted)setState({loading:false,data:null,error})}};fetchData();return()=>{mounted = false}},deps);return state},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('DigitalApplication')((props,helpers)=>{const{useLocalState,useAsyncState,formatCurrency}= helpers;const{propertyId,unitId,prefilledData ={}}= props;const [state,updateState] = useLocalState({currentStep:0,applicationData:{personal:{...prefilledData},employment:{},references:[],documents:[],additionalInfo:{},pets:[],vehicles:[]},validationErrors:{},aiSuggestions:{},isReturningApplicant:false,showAIAssistant:false,aiAssistantMessages:[],savingDraft:false,submitProgress:0});const validateField = async(section,field,value)=>{const validations ={personal:{email:(val)=>{const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!emailRegex.test(val))return 'Please enter a valid email address';return null},phone:(val)=>{const phoneRegex = /^\d{10}$/;const cleaned = val.replace(/\D/g,'');if(cleaned.length !== 10)return 'Please enter a 10-digit phone number';return null},ssn:(val)=>{const ssnRegex = /^\d{3}-?\d{2}-?\d{4}$/;if(!ssnRegex.test(val))return 'Please enter a valid SSN(XXX-XX-XXXX)';return null},dateOfBirth:(val)=>{const age = new Date().getFullYear()- new Date(val).getFullYear();if(age < 18)return 'Applicant must be 18 years or older';if(age > 120)return 'Please enter a valid date of birth';return null}},employment:{monthlyIncome:(val)=>{const income = parseFloat(val);if(income < 0)return 'Income cannot be negative';const rentAmount = 2500;if(income < rentAmount * 3){updateState({aiSuggestions:{...state.aiSuggestions,incomeWarning:`Note:Many landlords require 3x rent in monthly income. Consider adding a co-signer if your income is below ${formatCurrency(rentAmount * 3)}.`}})}return null},employerPhone:(val)=>{const cleaned = val.replace(/\D/g,'');if(cleaned.length === 10){const formatted = `(${cleaned.slice(0,3)})${cleaned.slice(3,6)}-${cleaned.slice(6)}`;updateApplicationData('employment','employerPhone',formatted)}return null}}};const validator = validations[section]?.[field];if(validator){const error = validator(value);updateState({validationErrors:{...state.validationErrors,[`${section}.${field}`]:error}});return !error}return true};const checkReturningApplicant = async(email)=>{try{const response = await window.ApiService.get(`/api/applications/check-returning/${email}`);if(response.data){updateState({isReturningApplicant:true,aiSuggestions:{...state.aiSuggestions,returningApplicant:'Welcome back! We found your previous application. Would you like us to auto-fill your information?'}});return response.data}}catch(error){}return null};const autoFillFromPrevious = async()=>{const previousData = await checkReturningApplicant(state.applicationData.personal.email);if(previousData){updateState({applicationData:{...state.applicationData,personal:{...state.applicationData.personal,...previousData.personal},employment:previousData.employment ||{},references:previousData.references || []},aiSuggestions:{...state.aiSuggestions,autoFilled:'Your information has been auto-filled. Please review and update any changes.'}})}};const updateApplicationData =(section,field,value)=>{updateState({applicationData:{...state.applicationData,[section]:{...state.applicationData[section],[field]:value}}});validateField(section,field,value)};const steps = [{id:'personal',title:'Personal Information',icon:'fa-user'},{id:'employment',title:'Employment & Income',icon:'fa-briefcase'},{id:'references',title:'References',icon:'fa-users'},{id:'documents',title:'Documents',icon:'fa-file-alt'},{id:'additional',title:'Additional Info',icon:'fa-info-circle'},{id:'review',title:'Review & Sign',icon:'fa-pen'}];const renderStepContent =()=>{switch(steps[state.currentStep].id){case 'personal':return renderPersonalInfo();case 'employment':return renderEmploymentInfo();case 'references':return renderReferences();case 'documents':return renderDocuments();case 'additional':return renderAdditionalInfo();case 'review':return renderReviewAndSign();default:return null}};const renderPersonalInfo =()=>{const{personal}= state.applicationData;return React.createElement('div',{className:'application-section'},[ React.createElement('h3',{key:'title'},'Personal Information'),state.aiSuggestions.returningApplicant && React.createElement('div',{key:'ai-suggestion',className:'ai-suggestion-box'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),React.createElement('p',{key:'text'},state.aiSuggestions.returningApplicant),React.createElement('button',{key:'autofill',className:'ai-action-btn',onClick:autoFillFromPrevious},'Auto-fill My Information')]),React.createElement('div',{key:'form-grid',className:'form-grid'},[ React.createElement('div',{key:'firstName',className:'form-group'},[ React.createElement('label',{key:'label'},'First Name *'),React.createElement('input',{key:'input',type:'text',value:personal.firstName || '',onChange:(e)=> updateApplicationData('personal','firstName',e.target.value),required:true}),state.validationErrors['personal.firstName'] && React.createElement('span',{key:'error',className:'field-error'},state.validationErrors['personal.firstName'])]),React.createElement('div',{key:'lastName',className:'form-group'},[ React.createElement('label',{key:'label'},'Last Name *'),React.createElement('input',{key:'input',type:'text',value:personal.lastName || '',onChange:(e)=> updateApplicationData('personal','lastName',e.target.value),required:true})]),React.createElement('div',{key:'email',className:'form-group'},[ React.createElement('label',{key:'label'},'Email Address *'),React.createElement('input',{key:'input',type:'email',value:personal.email || '',onChange:(e)=> updateApplicationData('personal','email',e.target.value),onBlur:(e)=> checkReturningApplicant(e.target.value),required:true}),state.validationErrors['personal.email'] && React.createElement('span',{key:'error',className:'field-error'},state.validationErrors['personal.email'])]),React.createElement('div',{key:'phone',className:'form-group'},[ React.createElement('label',{key:'label'},'Phone Number *'),React.createElement('input',{key:'input',type:'tel',value:personal.phone || '',onChange:(e)=>{const cleaned = e.target.value.replace(/\D/g,'');if(cleaned.length <= 10){updateApplicationData('personal','phone',cleaned)}},placeholder:'(555)555-5555',required:true}),state.validationErrors['personal.phone'] && React.createElement('span',{key:'error',className:'field-error'},state.validationErrors['personal.phone'])]),React.createElement('div',{key:'dob',className:'form-group'},[ React.createElement('label',{key:'label'},'Date of Birth *'),React.createElement('input',{key:'input',type:'date',value:personal.dateOfBirth || '',onChange:(e)=> updateApplicationData('personal','dateOfBirth',e.target.value),required:true}),state.validationErrors['personal.dateOfBirth'] && React.createElement('span',{key:'error',className:'field-error'},state.validationErrors['personal.dateOfBirth'])]),React.createElement('div',{key:'ssn',className:'form-group'},[ React.createElement('label',{key:'label'},'Social Security Number *'),React.createElement('input',{key:'input',type:'text',value:personal.ssn || '',onChange:(e)=>{const value = e.target.value.replace(/\D/g,'');if(value.length <= 9){const formatted = value.length > 5 ? `${value.slice(0,3)}-${value.slice(3,5)}-${value.slice(5)}`:value.length > 3 ? `${value.slice(0,3)}-${value.slice(3)}`:value;updateApplicationData('personal','ssn',formatted)}},placeholder:'XXX-XX-XXXX',required:true}),React.createElement('span',{key:'security',className:'security-note'},[ React.createElement('i',{key:'icon',className:'fas fa-lock'}),' Your SSN is encrypted and used only for background checks' ])]),React.createElement('div',{key:'currentAddress',className:'form-group full-width'},[ React.createElement('label',{key:'label'},'Current Address *'),React.createElement('input',{key:'input',type:'text',value:personal.currentAddress || '',onChange:(e)=> updateApplicationData('personal','currentAddress',e.target.value),placeholder:'Street Address',required:true})]),React.createElement('div',{key:'city',className:'form-group'},[ React.createElement('label',{key:'label'},'City *'),React.createElement('input',{key:'input',type:'text',value:personal.city || '',onChange:(e)=> updateApplicationData('personal','city',e.target.value),required:true})]),React.createElement('div',{key:'state',className:'form-group'},[ React.createElement('label',{key:'label'},'State *'),React.createElement('select',{key:'select',value:personal.state || '',onChange:(e)=> updateApplicationData('personal','state',e.target.value),required:true},[ React.createElement('option',{key:'default',value:''},'Select State'),...['AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'].map(state => React.createElement('option',{key:state,value:state},state))])]),React.createElement('div',{key:'zip',className:'form-group'},[ React.createElement('label',{key:'label'},'ZIP Code *'),React.createElement('input',{key:'input',type:'text',value:personal.zip || '',onChange:(e)=>{const value = e.target.value.replace(/\D/g,'');if(value.length <= 5){updateApplicationData('personal','zip',value)}},required:true})]),React.createElement('div',{key:'moveInDate',className:'form-group'},[ React.createElement('label',{key:'label'},'Desired Move-in Date *'),React.createElement('input',{key:'input',type:'date',value:personal.moveInDate || '',onChange:(e)=> updateApplicationData('personal','moveInDate',e.target.value),min:new Date().toISOString().split('T')[0],required:true})])])])};const renderEmploymentInfo =()=>{const{employment}= state.applicationData;return React.createElement('div',{className:'application-section'},[ React.createElement('h3',{key:'title'},'Employment & Income Information'),state.aiSuggestions.incomeWarning && React.createElement('div',{key:'ai-suggestion',className:'ai-suggestion-box warning'},[ React.createElement('i',{key:'icon',className:'fas fa-info-circle'}),React.createElement('p',{key:'text'},state.aiSuggestions.incomeWarning)]),React.createElement('div',{key:'form-grid',className:'form-grid'},[ React.createElement('div',{key:'status',className:'form-group full-width'},[ React.createElement('label',{key:'label'},'Employment Status *'),React.createElement('select',{key:'select',value:employment.status || '',onChange:(e)=> updateApplicationData('employment','status',e.target.value),required:true},[ React.createElement('option',{key:'default',value:''},'Select Status'),React.createElement('option',{key:'employed',value:'employed'},'Employed'),React.createElement('option',{key:'self-employed',value:'self-employed'},'Self-Employed'),React.createElement('option',{key:'student',value:'student'},'Student'),React.createElement('option',{key:'retired',value:'retired'},'Retired'),React.createElement('option',{key:'unemployed',value:'unemployed'},'Unemployed')])]),(employment.status === 'employed' || employment.status === 'self-employed')&& [ React.createElement('div',{key:'employer',className:'form-group'},[ React.createElement('label',{key:'label'},'Employer Name *'),React.createElement('input',{key:'input',type:'text',value:employment.employerName || '',onChange:(e)=> updateApplicationData('employment','employerName',e.target.value),required:true})]),React.createElement('div',{key:'employerPhone',className:'form-group'},[ React.createElement('label',{key:'label'},'Employer Phone *'),React.createElement('input',{key:'input',type:'tel',value:employment.employerPhone || '',onChange:(e)=> updateApplicationData('employment','employerPhone',e.target.value),placeholder:'(555)555-5555',required:true})]),React.createElement('div',{key:'position',className:'form-group'},[ React.createElement('label',{key:'label'},'Position/Title *'),React.createElement('input',{key:'input',type:'text',value:employment.position || '',onChange:(e)=> updateApplicationData('employment','position',e.target.value),required:true})]),React.createElement('div',{key:'duration',className:'form-group'},[ React.createElement('label',{key:'label'},'How long at this job? *'),React.createElement('select',{key:'select',value:employment.employmentDuration || '',onChange:(e)=> updateApplicationData('employment','employmentDuration',e.target.value),required:true},[ React.createElement('option',{key:'default',value:''},'Select Duration'),React.createElement('option',{key:'0-6',value:'0-6months'},'Less than 6 months'),React.createElement('option',{key:'6-12',value:'6-12months'},'6-12 months'),React.createElement('option',{key:'1-2',value:'1-2years'},'1-2 years'),React.createElement('option',{key:'2-5',value:'2-5years'},'2-5 years'),React.createElement('option',{key:'5+',value:'5+years'},'More than 5 years')])])],React.createElement('div',{key:'income',className:'form-group'},[ React.createElement('label',{key:'label'},'Monthly Income(before taxes)*'),React.createElement('input',{key:'input',type:'number',value:employment.monthlyIncome || '',onChange:(e)=> updateApplicationData('employment','monthlyIncome',e.target.value),placeholder:'0.00',min:'0',step:'0.01',required:true}),state.validationErrors['employment.monthlyIncome'] && React.createElement('span',{key:'error',className:'field-error'},state.validationErrors['employment.monthlyIncome'])]),React.createElement('div',{key:'additionalIncome',className:'form-group'},[ React.createElement('label',{key:'label'},'Additional Income(optional)'),React.createElement('input',{key:'input',type:'number',value:employment.additionalIncome || '',onChange:(e)=> updateApplicationData('employment','additionalIncome',e.target.value),placeholder:'0.00',min:'0',step:'0.01'})]),employment.additionalIncome > 0 && React.createElement('div',{key:'additionalSource',className:'form-group full-width'},[ React.createElement('label',{key:'label'},'Additional Income Source'),React.createElement('input',{key:'input',type:'text',value:employment.additionalIncomeSource || '',onChange:(e)=> updateApplicationData('employment','additionalIncomeSource',e.target.value),placeholder:'e.g.,Freelance work,investments,etc.'})])])])};const renderReferences =()=>{const{references = []}= state.applicationData;return React.createElement('div',{className:'application-section'},[ React.createElement('h3',{key:'title'},'References'),React.createElement('p',{key:'subtitle',className:'section-subtitle'},'Please provide at least 2 references(not family members)'),references.map((ref,index)=> React.createElement('div',{key:index,className:'reference-block'},[ React.createElement('h4',{key:'title'},`Reference ${index + 1}`),React.createElement('div',{key:'grid',className:'form-grid'},[ React.createElement('div',{key:'name',className:'form-group'},[ React.createElement('label',{key:'label'},'Full Name *'),React.createElement('input',{key:'input',type:'text',value:ref.name || '',onChange:(e)=> updateReference(index,'name',e.target.value),required:true})]),React.createElement('div',{key:'relationship',className:'form-group'},[ React.createElement('label',{key:'label'},'Relationship *'),React.createElement('select',{key:'select',value:ref.relationship || '',onChange:(e)=> updateReference(index,'relationship',e.target.value),required:true},[ React.createElement('option',{key:'default',value:''},'Select Relationship'),React.createElement('option',{key:'employer',value:'employer'},'Current/Former Employer'),React.createElement('option',{key:'landlord',value:'landlord'},'Current/Former Landlord'),React.createElement('option',{key:'colleague',value:'colleague'},'Professional Colleague'),React.createElement('option',{key:'friend',value:'friend'},'Personal Friend')])]),React.createElement('div',{key:'phone',className:'form-group'},[ React.createElement('label',{key:'label'},'Phone Number *'),React.createElement('input',{key:'input',type:'tel',value:ref.phone || '',onChange:(e)=> updateReference(index,'phone',e.target.value),placeholder:'(555)555-5555',required:true})]),React.createElement('div',{key:'email',className:'form-group'},[ React.createElement('label',{key:'label'},'Email Address'),React.createElement('input',{key:'input',type:'email',value:ref.email || '',onChange:(e)=> updateReference(index,'email',e.target.value)})])]),references.length > 2 && React.createElement('button',{key:'remove',className:'remove-reference-btn',onClick:()=> removeReference(index)},'Remove Reference')])),React.createElement('button',{key:'add',className:'add-reference-btn',onClick:addReference},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),'Add Another Reference' ])])};const renderDocuments =()=>{const{documents = []}= state.applicationData;return React.createElement('div',{className:'application-section'},[ React.createElement('h3',{key:'title'},'Required Documents'),React.createElement('p',{key:'subtitle',className:'section-subtitle'},'Please upload the following documents to complete your application'),React.createElement('div',{key:'ai-checker',className:'ai-document-checker'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),React.createElement('span',{key:'text'},'Our AI will verify your documents instantly for faster approval')]),React.createElement('div',{key:'documents-grid',className:'documents-upload-grid'},[ React.createElement(DocumentUpload,{key:'id',type:'government_id',title:'Government-Issued ID',description:'Driver\'s license,passport,or state ID',required:true,uploaded:documents.find(d => d.type === 'government_id'),onUpload:(file)=> handleDocumentUpload('government_id',file)}),React.createElement(DocumentUpload,{key:'income',type:'proof_of_income',title:'Proof of Income',description:'Recent pay stubs(last 2-3)or employment letter',required:true,multiple:true,uploaded:documents.filter(d => d.type === 'proof_of_income'),onUpload:(files)=> handleDocumentUpload('proof_of_income',files)}),React.createElement(DocumentUpload,{key:'bank',type:'bank_statements',title:'Bank Statements',description:'Last 2 months(optional but recommended)',required:false,multiple:true,uploaded:documents.filter(d => d.type === 'bank_statements'),onUpload:(files)=> handleDocumentUpload('bank_statements',files)}),React.createElement(DocumentUpload,{key:'rental',type:'rental_history',title:'Rental History',description:'Previous lease or landlord reference',required:false,uploaded:documents.find(d => d.type === 'rental_history'),onUpload:(file)=> handleDocumentUpload('rental_history',file)})])])};const renderAdditionalInfo =()=>{const{additionalInfo}= state.applicationData;return React.createElement('div',{className:'application-section'},[ React.createElement('h3',{key:'title'},'Additional Information'),React.createElement('div',{key:'pets',className:'additional-section'},[ React.createElement('h4',{key:'title'},'Pets'),React.createElement('div',{key:'has-pets',className:'form-group'},[ React.createElement('label',{key:'label'},'Do you have any pets?'),React.createElement('div',{key:'radio-group',className:'radio-group'},[ React.createElement('label',{key:'yes',className:'radio-label'},[ React.createElement('input',{key:'input',type:'radio',name:'hasPets',value:'yes',checked:additionalInfo.hasPets === 'yes',onChange:(e)=> updateApplicationData('additionalInfo','hasPets',e.target.value)}),'Yes' ]),React.createElement('label',{key:'no',className:'radio-label'},[ React.createElement('input',{key:'input',type:'radio',name:'hasPets',value:'no',checked:additionalInfo.hasPets === 'no',onChange:(e)=> updateApplicationData('additionalInfo','hasPets',e.target.value)}),'No' ])])]),additionalInfo.hasPets === 'yes' && React.createElement('div',{key:'pet-details',className:'pet-details'},(state.applicationData.pets || []).map((pet,index)=> React.createElement('div',{key:index,className:'pet-info'},[ React.createElement('div',{key:'grid',className:'form-grid'},[ React.createElement('div',{key:'type',className:'form-group'},[ React.createElement('label',{key:'label'},'Pet Type'),React.createElement('select',{key:'select',value:pet.type || '',onChange:(e)=> updatePet(index,'type',e.target.value)},[ React.createElement('option',{key:'default',value:''},'Select Type'),React.createElement('option',{key:'dog',value:'dog'},'Dog'),React.createElement('option',{key:'cat',value:'cat'},'Cat'),React.createElement('option',{key:'other',value:'other'},'Other')])]),React.createElement('div',{key:'breed',className:'form-group'},[ React.createElement('label',{key:'label'},'Breed'),React.createElement('input',{key:'input',type:'text',value:pet.breed || '',onChange:(e)=> updatePet(index,'breed',e.target.value)})]),React.createElement('div',{key:'weight',className:'form-group'},[ React.createElement('label',{key:'label'},'Weight(lbs)'),React.createElement('input',{key:'input',type:'number',value:pet.weight || '',onChange:(e)=> updatePet(index,'weight',e.target.value)})])])])),React.createElement('button',{key:'add-pet',className:'add-pet-btn',onClick:addPet},'Add Pet'))]),React.createElement('div',{key:'vehicles',className:'additional-section'},[ React.createElement('h4',{key:'title'},'Vehicles'),React.createElement('div',{key:'has-vehicles',className:'form-group'},[ React.createElement('label',{key:'label'},'Will you have vehicles that need parking?'),React.createElement('div',{key:'radio-group',className:'radio-group'},[ React.createElement('label',{key:'yes',className:'radio-label'},[ React.createElement('input',{key:'input',type:'radio',name:'hasVehicles',value:'yes',checked:additionalInfo.hasVehicles === 'yes',onChange:(e)=> updateApplicationData('additionalInfo','hasVehicles',e.target.value)}),'Yes' ]),React.createElement('label',{key:'no',className:'radio-label'},[ React.createElement('input',{key:'input',type:'radio',name:'hasVehicles',value:'no',checked:additionalInfo.hasVehicles === 'no',onChange:(e)=> updateApplicationData('additionalInfo','hasVehicles',e.target.value)}),'No' ])])]),additionalInfo.hasVehicles === 'yes' && React.createElement('div',{key:'vehicle-count',className:'form-group'},[ React.createElement('label',{key:'label'},'Number of Vehicles'),React.createElement('select',{key:'select',value:additionalInfo.vehicleCount || '',onChange:(e)=> updateApplicationData('additionalInfo','vehicleCount',e.target.value)},[ React.createElement('option',{key:'0',value:''},'Select'),React.createElement('option',{key:'1',value:'1'},'1'),React.createElement('option',{key:'2',value:'2'},'2'),React.createElement('option',{key:'3',value:'3'},'3'),React.createElement('option',{key:'4+',value:'4+'},'4 or more')])])]),React.createElement('div',{key:'comments',className:'form-group full-width'},[ React.createElement('label',{key:'label'},'Additional Comments'),React.createElement('textarea',{key:'textarea',rows:4,value:additionalInfo.comments || '',onChange:(e)=> updateApplicationData('additionalInfo','comments',e.target.value),placeholder:'Any additional information you\'d like us to know...'})])])};const renderReviewAndSign =()=>{return React.createElement('div',{className:'application-section review-section'},[ React.createElement('h3',{key:'title'},'Review Your Application'),React.createElement('div',{key:'summary',className:'application-summary'},[ React.createElement('div',{key:'personal',className:'summary-section'},[ React.createElement('h4',{key:'title'},'Personal Information'),React.createElement('div',{key:'details',className:'summary-details'},[ React.createElement('p',{key:'name'},[ React.createElement('strong',{},'Name:'),`${state.applicationData.personal.firstName}${state.applicationData.personal.lastName}` ]),React.createElement('p',{key:'email'},[ React.createElement('strong',{},'Email:'),state.applicationData.personal.email ]),React.createElement('p',{key:'phone'},[ React.createElement('strong',{},'Phone:'),state.applicationData.personal.phone ]),React.createElement('p',{key:'moveIn'},[ React.createElement('strong',{},'Move-in Date:'),new Date(state.applicationData.personal.moveInDate).toLocaleDateString()])])]),React.createElement('div',{key:'employment',className:'summary-section'},[ React.createElement('h4',{key:'title'},'Employment Information'),React.createElement('div',{key:'details',className:'summary-details'},[ React.createElement('p',{key:'employer'},[ React.createElement('strong',{},'Employer:'),state.applicationData.employment.employerName ]),React.createElement('p',{key:'income'},[ React.createElement('strong',{},'Monthly Income:'),formatCurrency(state.applicationData.employment.monthlyIncome)])])])]),React.createElement('div',{key:'legal',className:'legal-agreement'},[ React.createElement('h4',{key:'title'},'Application Agreement'),React.createElement('div',{key:'terms',className:'terms-box'},[ React.createElement('p',{},'By submitting this application,I certify that:'),React.createElement('ul',{},[ React.createElement('li',{},'All information provided is true and accurate'),React.createElement('li',{},'I authorize verification of all information including credit and background checks'),React.createElement('li',{},'I understand there is a non-refundable application fee'),React.createElement('li',{},'Submission of this application does not guarantee approval')])]),React.createElement('div',{key:'signature',className:'electronic-signature'},[ React.createElement('label',{key:'label'},[ React.createElement('input',{key:'checkbox',type:'checkbox',onChange:(e)=> updateApplicationData('additionalInfo','agreeToTerms',e.target.checked)}),' I agree to the terms and conditions above' ])])]),React.createElement('button',{key:'submit',className:'submit-application-btn',onClick:submitApplication,disabled:!state.applicationData.additionalInfo.agreeToTerms},[ React.createElement('i',{key:'icon',className:'fas fa-paper-plane'}),'Submit Application & Pay Fee($50)' ])])};const updateReference =(index,field,value)=>{const references = [...(state.applicationData.references || [])];references[index] ={...references[index],[field]:value};updateState({applicationData:{...state.applicationData,references}})};const addReference =()=>{const references = [...(state.applicationData.references || []),{}];updateState({applicationData:{...state.applicationData,references}})};const removeReference =(index)=>{const references = state.applicationData.references.filter((_,i)=> i !== index);updateState({applicationData:{...state.applicationData,references}})};const updatePet =(index,field,value)=>{const pets = [...(state.applicationData.pets || [])];pets[index] ={...pets[index],[field]:value};updateState({applicationData:{...state.applicationData,pets}})};const addPet =()=>{const pets = [...(state.applicationData.pets || []),{}];updateState({applicationData:{...state.applicationData,pets}})};const handleDocumentUpload = async(type,files)=>{const documents = [...state.applicationData.documents];if(Array.isArray(files)){files.forEach(file =>{documents.push({type,file,status:'verifying'})})}else{documents.push({type,file:files,status:'verifying'})}updateState({applicationData:{...state.applicationData,documents}});setTimeout(()=>{const updatedDocs = documents.map(doc => doc.status === 'verifying' ?{...doc,status:'verified'}:doc);updateState({applicationData:{...state.applicationData,documents:updatedDocs}})},2000)};const saveDraft = async()=>{updateState({savingDraft:true});try{await window.ApiService.post('/api/applications/draft',{applicationData:state.applicationData,propertyId,unitId});window.Toast?.success('Draft saved successfully')}catch(error){window.Toast?.error('Failed to save draft')}updateState({savingDraft:false})};const submitApplication = async()=>{updateState({submitProgress:10});try{const response = await window.ApiService.post('/api/applications/submit',{applicationData:state.applicationData,propertyId,unitId});updateState({submitProgress:50});await processApplicationFee(response.applicationId);updateState({submitProgress:100});window.location.href = `/application-success/${response.applicationId}`}catch(error){window.Toast?.error('Failed to submit application');updateState({submitProgress:0})}};const processApplicationFee = async(applicationId)=>{return new Promise((resolve)=>{setTimeout(resolve,2000)})};React.useEffect(()=>{if(state.applicationData.references.length === 0){updateState({applicationData:{...state.applicationData,references:[{},{}]}})}},[]);return React.createElement('div',{className:'digital-application'},[ React.createElement('div',{key:'header',className:'application-header'},[ React.createElement('h1',{key:'title'},'Rental Application'),React.createElement('p',{key:'property'},`Property:${propertyId}- Unit ${unitId}`),React.createElement('button',{key:'save-draft',className:'save-draft-btn',onClick:saveDraft,disabled:state.savingDraft},[ React.createElement('i',{key:'icon',className:`fas ${state.savingDraft ? 'fa-spinner fa-spin':'fa-save'}`}),state.savingDraft ? 'Saving...':'Save Draft' ])]),React.createElement('div',{key:'progress',className:'application-progress'},[ React.createElement('div',{key:'bar',className:'progress-bar',style:{width:`${(state.currentStep /(steps.length - 1))* 100}%`}}),React.createElement('div',{key:'steps',className:'progress-steps'},steps.map((step,index)=> React.createElement('div',{key:step.id,className:`progress-step ${index === state.currentStep ? 'active':index < state.currentStep ? 'completed':''}`},[ React.createElement('div',{key:'circle',className:'step-circle'},index < state.currentStep ? React.createElement('i',{className:'fas fa-check'}):index + 1),React.createElement('span',{key:'label',className:'step-label'},step.title)])))]),React.createElement('div',{key:'content',className:'application-content'},renderStepContent()),React.createElement('div',{key:'navigation',className:'application-navigation'},[ state.currentStep > 0 && React.createElement('button',{key:'back',className:'nav-btn back-btn',onClick:()=> updateState({currentStep:state.currentStep - 1})},[ React.createElement('i',{key:'icon',className:'fas fa-arrow-left'}),'Back' ]),state.currentStep < steps.length - 1 && React.createElement('button',{key:'next',className:'nav-btn next-btn',onClick:()=>{updateState({currentStep:state.currentStep + 1})}},[ 'Next',React.createElement('i',{key:'icon',className:'fas fa-arrow-right'})])]),React.createElement('button',{key:'ai-assistant',className:'ai-assistant-btn',onClick:()=> updateState({showAIAssistant:!state.showAIAssistant})},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),'AI Assistant' ]),state.showAIAssistant && React.createElement(AIApplicationAssistant,{key:'ai-chat',messages:state.aiAssistantMessages,applicationData:state.applicationData,currentStep:steps[state.currentStep].id,onClose:()=> updateState({showAIAssistant:false}),onUpdateApplication:(updates)=>{updateState({applicationData:{...state.applicationData,...updates}})}})])})})();const DocumentUpload = ComponentFactory.createComponent('DocumentUpload')((props,helpers)=>{const{type,title,description,required,multiple,uploaded,onUpload}= props;const [uploading,setUploading] = React.useState(false);const handleFileSelect =(event)=>{const files = multiple ? Array.from(event.target.files):event.target.files[0];setUploading(true);setTimeout(()=>{onUpload(files);setUploading(false)},1500)};return React.createElement('div',{className:'document-upload-box'},[ React.createElement('div',{key:'header',className:'upload-header'},[ React.createElement('i',{key:'icon',className:`fas ${uploaded ? 'fa-check-circle':'fa-cloud-upload-alt'}`}),React.createElement('h5',{key:'title'},title),required && React.createElement('span',{key:'required',className:'required-badge'},'Required')]),React.createElement('p',{key:'description',className:'upload-description'},description),uploaded ? React.createElement('div',{key:'uploaded',className:'uploaded-files'},[ React.createElement('span',{key:'status',className:'upload-status verified'},[ React.createElement('i',{key:'icon',className:'fas fa-check'}),'Verified by AI' ]),Array.isArray(uploaded)? React.createElement('span',{key:'count'},`${uploaded.length}files uploaded`):React.createElement('span',{key:'name'},uploaded.file?.name || 'File uploaded')]):React.createElement('div',{key:'upload-area'},[ React.createElement('input',{key:'input',type:'file',id:`upload-${type}`,onChange:handleFileSelect,multiple:multiple,style:{display:'none'},accept:'image/*,.pdf'}),React.createElement('label',{key:'label',htmlFor:`upload-${type}`,className:'upload-label'},[ uploading ? React.createElement('i',{key:'spinner',className:'fas fa-spinner fa-spin'}):React.createElement('i',{key:'icon',className:'fas fa-plus'}),React.createElement('span',{key:'text'},uploading ? 'Uploading...':'Choose File(s)')])])])});window.AppModules = window.AppModules ||{};window.AppModules.DigitalApplication = DigitalApplication;window.AppModules.DocumentUpload = DocumentUpload;

// Properties.jsx
const Properties = ComponentFactory.createComponent('Properties',{privateHelpers:{generateMockProperties:()=> [{id:1,name:'Sunset Apartments',address:'123 Sunset Blvd,Los Angeles,CA 90028',property_type:'residential',total_units:24,occupied_units:22,available_units:2,average_rent:2850,monthly_revenue:62700,status:'active',occupancy:{rate:91.7},last_updated:'2024-07-10T10:30:00Z',description:'Modern apartment complex with pool and fitness center',amenities:['Pool','Fitness Center','Parking','Laundry'],maintenance:{open:3,completed:12}},{id:2,name:'Downtown Office Plaza',address:'456 Business Ave,San Francisco,CA 94105',property_type:'commercial',total_units:8,occupied_units:6,available_units:2,average_rent:8500,monthly_revenue:51000,status:'active',occupancy:{rate:75.0},last_updated:'2024-07-11T14:15:00Z',description:'Prime downtown office space with city views',amenities:['Conference Rooms','High-Speed Internet','Security'],maintenance:{open:1,completed:8}},{id:3,name:'Garden View Townhomes',address:'789 Garden St,Austin,TX 78701',property_type:'residential',total_units:16,occupied_units:14,available_units:1,average_rent:2200,monthly_revenue:30800,status:'maintenance',occupancy:{rate:87.5},last_updated:'2024-07-09T09:45:00Z',description:'Family-friendly townhomes with private gardens',amenities:['Private Garden','Garage','Pet Friendly'],maintenance:{open:7,completed:5}},{id:4,name:'Metro Mixed Use',address:'321 Metro Plaza,Seattle,WA 98101',property_type:'mixed',total_units:32,occupied_units:28,available_units:4,average_rent:3200,monthly_revenue:89600,status:'active',occupancy:{rate:87.5},last_updated:'2024-07-12T08:20:00Z',description:'Mixed-use development with retail and residential',amenities:['Retail Space','Rooftop Deck','Concierge'],maintenance:{open:2,completed:15}}],calculateMetrics:(properties)=>{const totals = properties.reduce((acc,property)=>({totalUnits:acc.totalUnits + property.total_units,occupiedUnits:acc.occupiedUnits + property.occupied_units,totalRevenue:acc.totalRevenue + property.monthly_revenue,avgOccupancy:acc.avgOccupancy + property.occupancy.rate}),{totalUnits:0,occupiedUnits:0,totalRevenue:0,avgOccupancy:0});return{...totals,avgOccupancy:totals.avgOccupancy / properties.length,occupancyRate:(totals.occupiedUnits / totals.totalUnits)* 100}},getPropertyTypeIcon:(type)=>{const icons ={residential:'🏠',commercial:'🏢',mixed:'🏗️',industrial:'🏭'};return icons[type] || '🏢'},getStatusColor:(status)=>{const colors ={active:'var(--color-success)',maintenance:'var(--color-warning)',vacant:'var(--color-danger)',inactive:'var(--color-muted)'};return colors[status] || 'var(--color-muted)'}},defaultProps:{showMetrics:true,showFilters:true,itemsPerPage:12},withPerformanceTracking:true,withErrorBoundary:true})((props,helpers)=>{const{showMetrics,showFilters,itemsPerPage}= props;const{useLocalState,useAsyncState,formatCurrency,formatPercentage,classNames,generateMockProperties,calculateMetrics,getPropertyTypeIcon,getStatusColor}= helpers;const [state,updateState] = useLocalState({showAddModal:false,selectedProperty:null,view:'grid',sortBy:'name',sortOrder:'asc',refreshTrigger:0,filters:{type:'',status:'',search:''}});const propertiesData = useAsyncState(async()=>{try{const response = await window.PropertyService.getProperties(state.filters);return response.properties.map(property => window.PropertyService.transformers.toFrontend(property))}catch(error){console.error('Failed to load properties:',error);throw error}},[state.filters]);const properties = propertiesData.data || [];const metrics = React.useMemo(()=> properties.length > 0 ? calculateMetrics(properties):null,[properties]);const handleAddProperty =()=>{updateState({showAddModal:true})};const handleSaveProperty = async(propertyData)=>{try{if(state.selectedProperty){await window.PropertyService.updateProperty(state.selectedProperty.id,propertyData)}else{await window.PropertyService.createProperty(propertyData)}updateState({showAddModal:false,selectedProperty:null});updateState({refreshTrigger:Date.now()});const message = state.selectedProperty ? 'Property updated successfully!':'Property created successfully!';alert(message)}catch(error){console.error('Property save error:',error);throw new Error(error.message || 'Failed to save property')}};const handleEditProperty =(property)=>{updateState({selectedProperty:property,showAddModal:true})};const handleDeleteProperty = async(propertyId)=>{try{await window.PropertyService.deleteProperty(propertyId);updateState({refreshTrigger:Date.now()});alert('Property deleted successfully!')}catch(error){console.error('Delete property error:',error);alert(error.message || 'Failed to delete property')}};const handleViewProperty =(property)=>{};const renderMetricsCards =()=>{if(!showMetrics || !metrics)return null;const metricCards = [{title:'Total Properties',value:properties.length,icon:'🏢',color:'var(--color-primary)'},{title:'Total Units',value:metrics.totalUnits,icon:'🏠',color:'var(--color-info)'},{title:'Occupancy Rate',value:formatPercentage(metrics.occupancyRate),icon:'📊',color:'var(--color-success)'},{title:'Monthly Revenue',value:formatCurrency(metrics.totalRevenue),icon:'💰',color:'var(--color-warning)'}];return React.createElement('div',{className:'metrics-grid'},metricCards.map((metric,index)=> React.createElement('div',{key:index,className:'metric-card'},[ React.createElement('div',{key:'icon',className:'metric-icon',style:{color:metric.color}},metric.icon),React.createElement('div',{key:'content',className:'metric-content'},[ React.createElement('div',{key:'value',className:'metric-value'},metric.value),React.createElement('div',{key:'title',className:'metric-title'},metric.title)])])))};const renderToolbar =()=>{return React.createElement('div',{className:'properties-toolbar'},[ React.createElement('div',{key:'left',className:'toolbar-left'},[ showFilters && React.createElement('div',{key:'filters',className:'toolbar-filters'},[ React.createElement('input',{key:'search',type:'text',placeholder:'Search properties...',className:'search-input',value:state.filters.search,onChange:(e)=> updateState({filters:{...state.filters,search:e.target.value}})}),React.createElement('select',{key:'type',className:'filter-select',value:state.filters.type,onChange:(e)=> updateState({filters:{...state.filters,type:e.target.value}})},[ React.createElement('option',{value:''},'All Types'),React.createElement('option',{value:'residential'},'Residential'),React.createElement('option',{value:'commercial'},'Commercial'),React.createElement('option',{value:'mixed'},'Mixed Use'),React.createElement('option',{value:'industrial'},'Industrial')]),React.createElement('select',{key:'status',className:'filter-select',value:state.filters.status,onChange:(e)=> updateState({filters:{...state.filters,status:e.target.value}})},[ React.createElement('option',{value:''},'All Status'),React.createElement('option',{value:'active'},'Active'),React.createElement('option',{value:'maintenance'},'Maintenance'),React.createElement('option',{value:'vacant'},'Vacant'),React.createElement('option',{value:'inactive'},'Inactive')])])]),React.createElement('div',{key:'right',className:'toolbar-right'},[ React.createElement('div',{key:'view',className:'view-controls'},[ React.createElement('button',{key:'grid',className:classNames('view-button',state.view === 'grid' && 'active'),onClick:()=> updateState({view:'grid'}),title:'Grid View'},'⊞'),React.createElement('button',{key:'list',className:classNames('view-button',state.view === 'list' && 'active'),onClick:()=> updateState({view:'list'}),title:'List View'},'☰')]),React.createElement('button',{key:'add',className:'btn btn-primary',onClick:handleAddProperty},[ React.createElement('span',{key:'icon'},'+ '),'Add Property' ])])])};const renderPropertiesGrid =()=>{if(propertiesData.loading){return React.createElement('div',{className:'loading-state'},[ React.createElement('div',{key:'spinner',className:'spinner'}),React.createElement('p',{key:'text'},'Loading properties...')])}if(propertiesData.error){return React.createElement('div',{className:'error-state'},[ React.createElement('h3',{key:'title'},'Error Loading Properties'),React.createElement('p',{key:'message'},propertiesData.error),React.createElement('button',{key:'retry',className:'btn btn-primary',onClick:()=> window.location.reload()},'Retry')])}if(properties.length === 0){return React.createElement('div',{className:'empty-state'},[ React.createElement('div',{key:'icon',className:'empty-icon'},'🏢'),React.createElement('h3',{key:'title'},'No Properties Found'),React.createElement('p',{key:'message'},'Get started by adding your first property.'),React.createElement('button',{key:'add',className:'btn btn-primary',onClick:handleAddProperty},'Add Property')])}return React.createElement(window.AppModules.PropertyList,{properties,onEdit:handleEditProperty,onDelete:handleDeleteProperty,onView:handleViewProperty,compact:state.view === 'list',itemsPerPage})};const renderAddModal =()=>{if(!state.showAddModal)return null;return React.createElement(window.AppModules.AddPropertyModal,{title:state.selectedProperty ? 'Edit Property':'Add New Property',submitText:state.selectedProperty ? 'Update Property':'Create Property',initialData:state.selectedProperty,onClose:()=> updateState({showAddModal:false,selectedProperty:null}),onSave:handleSaveProperty})};return React.createElement('div',{className:'properties-page'},[ React.createElement('div',{key:'header',className:'page-header'},[ React.createElement('div',{key:'title-section'},[ React.createElement('h1',{key:'title'},'Properties'),React.createElement('p',{key:'subtitle'},'Manage your property portfolio')])]),renderMetricsCards(),renderToolbar(),React.createElement('div',{key:'content',className:'properties-content'},renderPropertiesGrid()),renderAddModal()])});const Units = ComponentFactory.createComponent('Units',{})((props,helpers)=>{return React.createElement('div',{className:'page-placeholder'},[ React.createElement('h2',{key:'title'},'🏠 Units Management'),React.createElement('p',{key:'description'},'Manage individual units within your properties. Coming soon!')])});const Tenants = ComponentFactory.createComponent('Tenants',{})((props,helpers)=>{return React.createElement('div',{className:'page-placeholder'},[ React.createElement('h2',{key:'title'},'👥 Tenant Management'),React.createElement('p',{key:'description'},'Manage tenant information,applications,and communications. Coming soon!')])});const Leases = ComponentFactory.createComponent('Leases',{})((props,helpers)=>{return React.createElement('div',{className:'page-placeholder'},[ React.createElement('h2',{key:'title'},'📋 Lease Management'),React.createElement('p',{key:'description'},'Create,manage,and track lease agreements. Coming soon!')])});const Maintenance = ComponentFactory.createComponent('Maintenance',{})((props,helpers)=>{return React.createElement('div',{className:'page-placeholder'},[ React.createElement('h2',{key:'title'},'🔧 Maintenance Requests'),React.createElement('p',{key:'description'},'Track and manage property maintenance requests. Coming soon!')])});const Accounting = ComponentFactory.createComponent('Accounting',{})((props,helpers)=>{return React.createElement('div',{className:'page-placeholder'},[ React.createElement('h2',{key:'title'},'💰 Accounting & Finance'),React.createElement('p',{key:'description'},'Manage finances,rent collection,and accounting. Coming soon!')])});const Reports = ComponentFactory.createComponent('Reports',{})((props,helpers)=>{return React.createElement('div',{className:'page-placeholder'},[ React.createElement('h2',{key:'title'},'📊 Reports & Analytics'),React.createElement('p',{key:'description'},'Generate comprehensive reports and analytics. Coming soon!')])});window.AppModules = window.AppModules ||{};window.AppModules.Properties = Properties;

// FinancialStatementsHub.jsx
const FinancialStatementsHub =()=>{const [selectedStatement,setSelectedStatement] = React.useState('income');const [selectedPeriod,setSelectedPeriod] = React.useState('current-month');const [comparisonPeriod,setComparisonPeriod] = React.useState('previous-month');const [selectedProperties,setSelectedProperties] = React.useState(['all']);const [viewMode,setViewMode] = React.useState('summary');const [currency,setCurrency] = React.useState('USD');const [loading,setLoading] = React.useState(false);const [statementData,setStatementData] = React.useState(null);const [customDateRange,setCustomDateRange] = React.useState({start:null,end:null});const reportDataService = window.ReportDataService;const exportService = window.ReportExportService;const valorService = window.ValorPayTechService;const statementTypes = [{id:'income',name:'Income Statement',icon:'fa-chart-line',color:'#10b981'},{id:'balance',name:'Balance Sheet',icon:'fa-balance-scale',color:'#3b82f6'},{id:'cashflow',name:'Cash Flow Statement',icon:'fa-money-bill-wave',color:'#8b5cf6'},{id:'equity',name:'Statement of Owner\'s Equity',icon:'fa-users',color:'#f59e0b'},{id:'trial',name:'Trial Balance',icon:'fa-calculator',color:'#ef4444'},{id:'general-ledger',name:'General Ledger',icon:'fa-book',color:'#6366f1'}];const periodOptions = [{id:'current-month',label:'Current Month',getValue:()=> getCurrentMonthRange()},{id:'previous-month',label:'Previous Month',getValue:()=> getPreviousMonthRange()},{id:'current-quarter',label:'Current Quarter',getValue:()=> getCurrentQuarterRange()},{id:'previous-quarter',label:'Previous Quarter',getValue:()=> getPreviousQuarterRange()},{id:'current-year',label:'Current Year',getValue:()=> getCurrentYearRange()},{id:'previous-year',label:'Previous Year',getValue:()=> getPreviousYearRange()},{id:'ytd',label:'Year to Date',getValue:()=> getYTDRange()},{id:'custom',label:'Custom Range',getValue:()=> customDateRange}];React.useEffect(()=>{loadStatementData()},[selectedStatement,selectedPeriod,comparisonPeriod,selectedProperties]);const loadStatementData = async()=>{setLoading(true);try{const period = periodOptions.find(p => p.id === selectedPeriod);const dateRange = period.getValue();const compPeriod = periodOptions.find(p => p.id === comparisonPeriod);const compDateRange = compPeriod?.getValue();const data = await fetchStatementData(selectedStatement,dateRange,compDateRange);setStatementData(data)}catch(error){console.error('Error loading statement data:',error);window.showNotification?.('error','Failed to load financial data')}finally{setLoading(false)}};const fetchStatementData = async(statementType,dateRange,comparisonRange)=>{const propertyFilter = selectedProperties.includes('all')? null:selectedProperties;switch(statementType){case 'income':return await fetchIncomeStatement(dateRange,comparisonRange,propertyFilter);case 'balance':return await fetchBalanceSheet(dateRange,propertyFilter);case 'cashflow':return await fetchCashFlowStatement(dateRange,comparisonRange,propertyFilter);case 'equity':return await fetchEquityStatement(dateRange,comparisonRange,propertyFilter);case 'trial':return await fetchTrialBalance(dateRange,propertyFilter);case 'general-ledger':return await fetchGeneralLedger(dateRange,propertyFilter);default:return null}};const fetchIncomeStatement = async(dateRange,comparisonRange,properties)=>{const rentalIncome = await calculateRentalIncome(dateRange,properties);const lateFees = await calculateLateFees(dateRange,properties);const otherIncome = await calculateOtherIncome(dateRange,properties);const expenses = await calculateExpenses(dateRange,properties);let comparison = null;if(comparisonRange){comparison ={rentalIncome:await calculateRentalIncome(comparisonRange,properties),lateFees:await calculateLateFees(comparisonRange,properties),otherIncome:await calculateOtherIncome(comparisonRange,properties),expenses:await calculateExpenses(comparisonRange,properties)}}return{period:dateRange,revenue:{rentalIncome,lateFees,otherIncome,total:rentalIncome + lateFees + otherIncome},expenses,netIncome:rentalIncome + lateFees + otherIncome - expenses.total,comparison}};const fetchBalanceSheet = async(dateRange,properties)=>{const currentAssets = await calculateCurrentAssets(dateRange.end,properties);const fixedAssets = await calculateFixedAssets(dateRange.end,properties);const currentLiabilities = await calculateCurrentLiabilities(dateRange.end,properties);const longTermLiabilities = await calculateLongTermLiabilities(dateRange.end,properties);const equity = await calculateEquity(dateRange.end,properties);return{asOfDate:dateRange.end,assets:{current:currentAssets,fixed:fixedAssets,total:currentAssets.total + fixedAssets.total},liabilities:{current:currentLiabilities,longTerm:longTermLiabilities,total:currentLiabilities.total + longTermLiabilities.total},equity,totalLiabilitiesAndEquity:currentLiabilities.total + longTermLiabilities.total + equity.total}};const calculateRentalIncome = async(dateRange,properties)=>{try{const payments = await valorService.getPaymentHistory({dateRange:`${dateRange.start},${dateRange.end}`,properties:properties,paymentType:'rent',status:'paid'});return payments.reduce((sum,payment)=> sum + payment.amount,0)}catch(error){return 125000}};const calculateLateFees = async(dateRange,properties)=>{try{const payments = await valorService.getPaymentHistory({dateRange:`${dateRange.start},${dateRange.end}`,properties:properties,paymentType:'late_fee',status:'paid'});return payments.reduce((sum,payment)=> sum + payment.amount,0)}catch(error){return 2500}};const calculateOtherIncome = async(dateRange,properties)=>{return 3200};const calculateExpenses = async(dateRange,properties)=>{return{maintenance:15000,utilities:8500,management:10456,insurance:4200,taxes:12000,marketing:2500,legal:1800,administrative:3200,depreciation:8500,total:66156}};const calculateCurrentAssets = async(asOfDate,properties)=>{return{cash:250000,accountsReceivable:15000,prepaidExpenses:5000,total:270000}};const calculateFixedAssets = async(asOfDate,properties)=>{return{propertyValue:4200000,accumulatedDepreciation:-180000,equipment:25000,total:4045000}};const calculateCurrentLiabilities = async(asOfDate,properties)=>{return{accountsPayable:12000,accruedExpenses:8000,securityDeposits:45000,prepaidRent:15000,total:80000}};const calculateLongTermLiabilities = async(asOfDate,properties)=>{return{mortgages:2800000,notesPayable:50000,total:2850000}};const calculateEquity = async(asOfDate,properties)=>{return{contributedCapital:1000000,retainedEarnings:385000,total:1385000}};const getCurrentMonthRange =()=>{const now = new Date();const start = new Date(now.getFullYear(),now.getMonth(),1);const end = new Date(now.getFullYear(),now.getMonth()+ 1,0);return{start:start.toISOString(),end:end.toISOString()}};const getPreviousMonthRange =()=>{const now = new Date();const start = new Date(now.getFullYear(),now.getMonth()- 1,1);const end = new Date(now.getFullYear(),now.getMonth(),0);return{start:start.toISOString(),end:end.toISOString()}};const getCurrentQuarterRange =()=>{const now = new Date();const quarter = Math.floor(now.getMonth()/ 3);const start = new Date(now.getFullYear(),quarter * 3,1);const end = new Date(now.getFullYear(),quarter * 3 + 3,0);return{start:start.toISOString(),end:end.toISOString()}};const getPreviousQuarterRange =()=>{const now = new Date();const quarter = Math.floor(now.getMonth()/ 3);const start = new Date(now.getFullYear(),(quarter - 1)* 3,1);const end = new Date(now.getFullYear(),quarter * 3,0);return{start:start.toISOString(),end:end.toISOString()}};const getCurrentYearRange =()=>{const now = new Date();const start = new Date(now.getFullYear(),0,1);const end = new Date(now.getFullYear(),11,31);return{start:start.toISOString(),end:end.toISOString()}};const getPreviousYearRange =()=>{const now = new Date();const start = new Date(now.getFullYear()- 1,0,1);const end = new Date(now.getFullYear()- 1,11,31);return{start:start.toISOString(),end:end.toISOString()}};const getYTDRange =()=>{const now = new Date();const start = new Date(now.getFullYear(),0,1);return{start:start.toISOString(),end:now.toISOString()}};const fetchCashFlowStatement = async(dateRange,comparisonRange,properties)=>{const netIncome = await calculateNetIncome(dateRange,properties);const depreciation = await calculateDepreciation(dateRange,properties);const workingCapitalChanges = await calculateWorkingCapitalChanges(dateRange,properties);const propertyPurchases = await calculatePropertyPurchases(dateRange,properties);const equipmentPurchases = await calculateEquipmentPurchases(dateRange,properties);const assetSales = await calculateAssetSales(dateRange,properties);const loanProceeds = await calculateLoanProceeds(dateRange,properties);const loanPayments = await calculateLoanPayments(dateRange,properties);const ownerDistributions = await calculateOwnerDistributions(dateRange,properties);const ownerContributions = await calculateOwnerContributions(dateRange,properties);return{period:dateRange,operatingActivities:{netIncome,adjustments:{depreciation,workingCapitalChanges},totalOperating:netIncome + depreciation + workingCapitalChanges.total},investingActivities:{propertyPurchases,equipmentPurchases,assetSales,totalInvesting:-(propertyPurchases + equipmentPurchases)+ assetSales},financingActivities:{loanProceeds,loanPayments,ownerDistributions,ownerContributions,totalFinancing:loanProceeds - loanPayments - ownerDistributions + ownerContributions},netCashFlow:0,beginningCash:await getBeginningCash(dateRange.start,properties),endingCash:0}};const fetchEquityStatement = async(dateRange,comparisonRange,properties)=>{const beginningEquity = await getBeginningEquity(dateRange.start,properties);const netIncome = await calculateNetIncome(dateRange,properties);const ownerContributions = await calculateOwnerContributions(dateRange,properties);const ownerDistributions = await calculateOwnerDistributions(dateRange,properties);return{period:dateRange,beginningBalance:beginningEquity,additions:{netIncome,ownerContributions,total:netIncome + ownerContributions},deductions:{ownerDistributions,total:ownerDistributions},endingBalance:beginningEquity + netIncome + ownerContributions - ownerDistributions}};const fetchTrialBalance = async(dateRange,properties)=>{const accounts = await getAllAccountBalances(dateRange.end,properties);const assetAccounts = accounts.filter(a => a.type === 'asset');const liabilityAccounts = accounts.filter(a => a.type === 'liability');const equityAccounts = accounts.filter(a => a.type === 'equity');const revenueAccounts = accounts.filter(a => a.type === 'revenue');const expenseAccounts = accounts.filter(a => a.type === 'expense');const totalDebits = assetAccounts.reduce((sum,a)=> sum + a.debit,0)+ expenseAccounts.reduce((sum,a)=> sum + a.debit,0);const totalCredits = liabilityAccounts.reduce((sum,a)=> sum + a.credit,0)+ equityAccounts.reduce((sum,a)=> sum + a.credit,0)+ revenueAccounts.reduce((sum,a)=> sum + a.credit,0);return{asOfDate:dateRange.end,accounts:{assets:assetAccounts,liabilities:liabilityAccounts,equity:equityAccounts,revenue:revenueAccounts,expenses:expenseAccounts},totals:{debits:totalDebits,credits:totalCredits,isBalanced:Math.abs(totalDebits - totalCredits)< 0.01}}};const fetchGeneralLedger = async(dateRange,properties)=>{const transactions = await getAllTransactions(dateRange,properties);const accounts = await getAllAccounts(properties);const ledger ={};accounts.forEach(account =>{ledger[account.code] ={accountName:account.name,accountType:account.type,beginningBalance:account.beginningBalance || 0,transactions:transactions.filter(t => t.accountCode === account.code),endingBalance:0}});Object.keys(ledger).forEach(accountCode =>{const account = ledger[accountCode];account.endingBalance = account.transactions.reduce((balance,trans)=>{return balance +(trans.debit || 0)-(trans.credit || 0)},account.beginningBalance)});return{period:dateRange,accounts:ledger,totalTransactions:transactions.length}};const calculateNetIncome = async(dateRange,properties)=>{const income = await fetchIncomeStatement(dateRange,null,properties);return income.netIncome};const calculateDepreciation = async(dateRange,properties)=>{return 8500};const calculateWorkingCapitalChanges = async(dateRange,properties)=>{return{accountsReceivable:-2000,prepaidExpenses:500,accountsPayable:1500,accruedExpenses:800,total:800}};const calculatePropertyPurchases = async(dateRange,properties)=>{return 0};const calculateEquipmentPurchases = async(dateRange,properties)=>{return 5000};const calculateAssetSales = async(dateRange,properties)=>{return 0};const calculateLoanProceeds = async(dateRange,properties)=>{return 0};const calculateLoanPayments = async(dateRange,properties)=>{return 45000};const calculateOwnerDistributions = async(dateRange,properties)=>{return 50000};const calculateOwnerContributions = async(dateRange,properties)=>{return 0};const getBeginningCash = async(date,properties)=>{return 220000};const getBeginningEquity = async(date,properties)=>{return 1320000};const getAllAccountBalances = async(date,properties)=>{return [{code:'1000',name:'Cash',type:'asset',debit:250000,credit:0},{code:'1100',name:'Accounts Receivable',type:'asset',debit:15000,credit:0},{code:'1200',name:'Prepaid Expenses',type:'asset',debit:5000,credit:0},{code:'1500',name:'Property',type:'asset',debit:4200000,credit:0},{code:'1600',name:'Accumulated Depreciation',type:'asset',debit:0,credit:180000},{code:'1700',name:'Equipment',type:'asset',debit:25000,credit:0},{code:'2000',name:'Accounts Payable',type:'liability',debit:0,credit:12000},{code:'2100',name:'Accrued Expenses',type:'liability',debit:0,credit:8000},{code:'2200',name:'Security Deposits',type:'liability',debit:0,credit:45000},{code:'2300',name:'Prepaid Rent',type:'liability',debit:0,credit:15000},{code:'2500',name:'Mortgage Payable',type:'liability',debit:0,credit:2800000},{code:'2600',name:'Notes Payable',type:'liability',debit:0,credit:50000},{code:'3000',name:'Contributed Capital',type:'equity',debit:0,credit:1000000},{code:'3100',name:'Retained Earnings',type:'equity',debit:0,credit:385000},{code:'4000',name:'Rental Income',type:'revenue',debit:0,credit:125000},{code:'4100',name:'Late Fees',type:'revenue',debit:0,credit:2500},{code:'4200',name:'Other Income',type:'revenue',debit:0,credit:3200},{code:'5000',name:'Maintenance Expense',type:'expense',debit:15000,credit:0},{code:'5100',name:'Utilities Expense',type:'expense',debit:8500,credit:0},{code:'5200',name:'Management Fees',type:'expense',debit:10456,credit:0},{code:'5300',name:'Insurance Expense',type:'expense',debit:4200,credit:0},{code:'5400',name:'Property Tax Expense',type:'expense',debit:12000,credit:0},{code:'5500',name:'Marketing Expense',type:'expense',debit:2500,credit:0},{code:'5600',name:'Legal Expense',type:'expense',debit:1800,credit:0},{code:'5700',name:'Administrative Expense',type:'expense',debit:3200,credit:0},{code:'5800',name:'Depreciation Expense',type:'expense',debit:8500,credit:0}]};const getAllTransactions = async(dateRange,properties)=>{return [{date:'2025-07-01',accountCode:'1000',description:'Rent collection',debit:45000,credit:0},{date:'2025-07-01',accountCode:'4000',description:'Rent collection',debit:0,credit:45000},{date:'2025-07-05',accountCode:'5000',description:'Plumbing repair',debit:850,credit:0},{date:'2025-07-05',accountCode:'1000',description:'Plumbing repair',debit:0,credit:850},]};const getAllAccounts = async(properties)=>{return [{code:'1000',name:'Cash',type:'asset'},{code:'1100',name:'Accounts Receivable',type:'asset'},{code:'1200',name:'Prepaid Expenses',type:'asset'},{code:'1500',name:'Property',type:'asset'},{code:'1600',name:'Accumulated Depreciation',type:'contra-asset'},{code:'1700',name:'Equipment',type:'asset'},{code:'2000',name:'Accounts Payable',type:'liability'},{code:'2100',name:'Accrued Expenses',type:'liability'},{code:'2200',name:'Security Deposits',type:'liability'},{code:'2300',name:'Prepaid Rent',type:'liability'},{code:'2500',name:'Mortgage Payable',type:'liability'},{code:'2600',name:'Notes Payable',type:'liability'},{code:'3000',name:'Contributed Capital',type:'equity'},{code:'3100',name:'Retained Earnings',type:'equity'},{code:'4000',name:'Rental Income',type:'revenue'},{code:'4100',name:'Late Fees',type:'revenue'},{code:'4200',name:'Other Income',type:'revenue'},{code:'5000',name:'Maintenance Expense',type:'expense'},{code:'5100',name:'Utilities Expense',type:'expense'},{code:'5200',name:'Management Fees',type:'expense'},{code:'5300',name:'Insurance Expense',type:'expense'},{code:'5400',name:'Property Tax Expense',type:'expense'},{code:'5500',name:'Marketing Expense',type:'expense'},{code:'5600',name:'Legal Expense',type:'expense'},{code:'5700',name:'Administrative Expense',type:'expense'},{code:'5800',name:'Depreciation Expense',type:'expense'}]};const formatCurrency =(amount,showCents = false)=>{const options ={style:'currency',currency:currency,minimumFractionDigits:showCents ? 2:0,maximumFractionDigits:showCents ? 2:0};return new Intl.NumberFormat('en-US',options).format(amount || 0)};const calculatePercentageChange =(current,previous)=>{if(!previous || previous === 0)return 0;return((current - previous)/ previous * 100).toFixed(1)};const exportStatement = async(format)=>{if(!statementData)return;const statement = statementTypes.find(s => s.id === selectedStatement);const fileName = `${statement.name}_${new Date().toISOString().split('T')[0]}`;try{await exportService[`exportTo${format.toUpperCase()}`](statementData,fileName);window.showNotification?.('success',`Statement exported as ${format.toUpperCase()}`)}catch(error){window.showNotification?.('error','Failed to export statement')}};return(<div className="financial-statements-hub">{}<div className="statements-header-premium"><div className="header-gradient-bg"><div className="animated-patterns"><div className="pattern pattern-1"></div><div className="pattern pattern-2"></div><div className="pattern pattern-3"></div></div></div><div className="header-content"><div className="header-title-section"><h1 className="gradient-title">Financial Statements</h1><p className="subtitle">JP Morgan Quality Financial Reporting</p></div><div className="header-actions"><button className="btn-custom-report"><i className="fas fa-magic"></i> Custom Report Builder </button><button className="btn-schedule"><i className="fas fa-calendar-check"></i> Schedule Reports </button></div></div>{}<div className="statement-selector">{statementTypes.map(statement =>(<div key={statement.id}className={`statement-card ${selectedStatement === statement.id ? 'active':''}`}onClick={()=>{setSelectedStatement(statement.id);window.scrollTo({top:0,behavior:'smooth'})}}style={{'--accent-color':statement.color}}><div className="statement-icon"><i className={`fas ${statement.icon}`}></i></div><span className="statement-name">{statement.name}</span><div className="active-indicator"></div></div>))}</div></div>{}<div className="statements-controls"><div className="control-group"><label>Period</label><select value={selectedPeriod}onChange={(e)=> setSelectedPeriod(e.target.value)}className="period-select" >{periodOptions.map(option =>(<option key={option.id}value={option.id}>{option.label}</option>))}</select>{selectedPeriod === 'custom' &&(<div className="custom-date-inputs"><input type="date" value={customDateRange.start?.split('T')[0] || ''}onChange={(e)=> setCustomDateRange({...customDateRange,start:new Date(e.target.value).toISOString()})}/><span>to</span><input type="date" value={customDateRange.end?.split('T')[0] || ''}onChange={(e)=> setCustomDateRange({...customDateRange,end:new Date(e.target.value).toISOString()})}/></div>)}</div><div className="control-group"><label>Compare With</label><select value={comparisonPeriod}onChange={(e)=> setComparisonPeriod(e.target.value)}className="period-select" ><option value="">No Comparison</option>{periodOptions.filter(o => o.id !== 'custom').map(option =>(<option key={option.id}value={option.id}>{option.label}</option>))}</select></div><div className="control-group"><label>Properties</label><PropertyMultiSelect selectedProperties={selectedProperties}onChange={setSelectedProperties}/></div><div className="control-group"><label>View</label><div className="view-toggle"><button className={viewMode === 'summary' ? 'active':''}onClick={()=> setViewMode('summary')}><i className="fas fa-list"></i> Summary </button><button className={viewMode === 'detailed' ? 'active':''}onClick={()=> setViewMode('detailed')}><i className="fas fa-th-list"></i> Detailed </button><button className={viewMode === 'graphical' ? 'active':''}onClick={()=> setViewMode('graphical')}><i className="fas fa-chart-bar"></i> Graphical </button></div></div><div className="control-group export-group"><button className="btn-export" onClick={()=> exportStatement('pdf')}><i className="fas fa-file-pdf"></i> PDF </button><button className="btn-export" onClick={()=> exportStatement('excel')}><i className="fas fa-file-excel"></i> Excel </button><button className="btn-print" onClick={()=> window.print()}><i className="fas fa-print"></i> Print </button></div></div>{}<div className="statement-display-area">{loading ?(<div className="loading-state"><div className="loading-spinner"></div><p>Generating financial statement...</p></div>):(<>{selectedStatement === 'income' && statementData &&(<IncomeStatementDisplay data={statementData}viewMode={viewMode}formatCurrency={formatCurrency}calculatePercentageChange={calculatePercentageChange}/>)}{selectedStatement === 'balance' && statementData &&(<BalanceSheetDisplay data={statementData}viewMode={viewMode}formatCurrency={formatCurrency}/>)}{selectedStatement === 'cashflow' && statementData &&(<CashFlowStatementDisplay data={statementData}viewMode={viewMode}formatCurrency={formatCurrency}/>)}{}</>)}</div></div>)};const IncomeStatementDisplay =({data,viewMode,formatCurrency,calculatePercentageChange})=>{const hasComparison = data.comparison !== null;return(<div className="statement-container income-statement"><div className="statement-header"><h2>Income Statement</h2><p className="statement-period"> For the period{new Date(data.period.start).toLocaleDateString()}to{new Date(data.period.end).toLocaleDateString()}</p></div><div className={`statement-body ${viewMode}`}>{viewMode === 'graphical' ?(<IncomeStatementChart data={data}/>):(<table className="statement-table"><thead><tr><th></th><th className="amount-col">Current Period</th>{hasComparison &&(<><th className="amount-col">Previous Period</th><th className="amount-col">Change</th><th className="amount-col">% Change</th></>)}</tr></thead><tbody>{}<tr className="section-header"><td colSpan={hasComparison ? 5:2}>REVENUE</td></tr><tr className="line-item"><td className="item-name">Rental Income</td><td className="amount">{formatCurrency(data.revenue.rentalIncome)}</td>{hasComparison &&(<><td className="amount">{formatCurrency(data.comparison.rentalIncome)}</td><td className="amount change">{formatCurrency(data.revenue.rentalIncome - data.comparison.rentalIncome)}</td><td className="amount percentage">{calculatePercentageChange(data.revenue.rentalIncome,data.comparison.rentalIncome)}% </td></>)}</tr><tr className="line-item"><td className="item-name">Late Fees</td><td className="amount">{formatCurrency(data.revenue.lateFees)}</td>{hasComparison &&(<><td className="amount">{formatCurrency(data.comparison.lateFees)}</td><td className="amount change">{formatCurrency(data.revenue.lateFees - data.comparison.lateFees)}</td><td className="amount percentage">{calculatePercentageChange(data.revenue.lateFees,data.comparison.lateFees)}% </td></>)}</tr><tr className="line-item"><td className="item-name">Other Income</td><td className="amount">{formatCurrency(data.revenue.otherIncome)}</td>{hasComparison &&(<><td className="amount">{formatCurrency(data.comparison.otherIncome)}</td><td className="amount change">{formatCurrency(data.revenue.otherIncome - data.comparison.otherIncome)}</td><td className="amount percentage">{calculatePercentageChange(data.revenue.otherIncome,data.comparison.otherIncome)}% </td></>)}</tr><tr className="subtotal"><td className="item-name">Total Revenue</td><td className="amount">{formatCurrency(data.revenue.total)}</td>{hasComparison &&(<><td className="amount">{formatCurrency(data.comparison.rentalIncome + data.comparison.lateFees + data.comparison.otherIncome)}</td><td className="amount change">{formatCurrency(data.revenue.total -(data.comparison.rentalIncome + data.comparison.lateFees + data.comparison.otherIncome))}</td><td className="amount percentage">{calculatePercentageChange(data.revenue.total,data.comparison.rentalIncome + data.comparison.lateFees + data.comparison.otherIncome)}% </td></>)}</tr>{}<tr className="section-header"><td colSpan={hasComparison ? 5:2}>OPERATING EXPENSES</td></tr>{Object.entries(data.expenses).filter(([key])=> key !== 'total').map(([key,value])=>(<tr key={key}className="line-item"><td className="item-name">{key.charAt(0).toUpperCase()+ key.slice(1)}</td><td className="amount">{formatCurrency(value)}</td>{hasComparison &&(<><td className="amount">{formatCurrency(data.comparison.expenses[key])}</td><td className="amount change">{formatCurrency(value - data.comparison.expenses[key])}</td><td className="amount percentage">{calculatePercentageChange(value,data.comparison.expenses[key])}% </td></>)}</tr>))}<tr className="subtotal"><td className="item-name">Total Operating Expenses</td><td className="amount">{formatCurrency(data.expenses.total)}</td>{hasComparison &&(<><td className="amount">{formatCurrency(data.comparison.expenses.total)}</td><td className="amount change">{formatCurrency(data.expenses.total - data.comparison.expenses.total)}</td><td className="amount percentage">{calculatePercentageChange(data.expenses.total,data.comparison.expenses.total)}% </td></>)}</tr>{}<tr className="net-income"><td className="item-name">NET INCOME</td><td className="amount">{formatCurrency(data.netIncome)}</td>{hasComparison &&(<><td className="amount">{formatCurrency((data.comparison.rentalIncome + data.comparison.lateFees + data.comparison.otherIncome)- data.comparison.expenses.total)}</td><td className="amount change">{formatCurrency(data.netIncome -((data.comparison.rentalIncome + data.comparison.lateFees + data.comparison.otherIncome)- data.comparison.expenses.total))}</td><td className="amount percentage">{calculatePercentageChange(data.netIncome,(data.comparison.rentalIncome + data.comparison.lateFees + data.comparison.otherIncome)- data.comparison.expenses.total)}% </td></>)}</tr></tbody></table>)}</div>{viewMode === 'detailed' &&(<div className="detailed-notes"><h3>Notes & Analysis</h3><div className="note-item"><h4>Revenue Trends</h4><p>Rental income represents{((data.revenue.rentalIncome / data.revenue.total)* 100).toFixed(1)}% of total revenue.</p></div><div className="note-item"><h4>Expense Breakdown</h4><p>Operating expenses are{((data.expenses.total / data.revenue.total)* 100).toFixed(1)}% of revenue.</p></div><div className="note-item"><h4>Profitability</h4><p>Net profit margin:{((data.netIncome / data.revenue.total)* 100).toFixed(1)}%</p></div></div>)}</div>)};const BalanceSheetDisplay =({data,viewMode,formatCurrency})=>{return(<div className="statement-container balance-sheet"><div className="statement-header"><h2>Balance Sheet</h2><p className="statement-period"> As of{new Date(data.asOfDate).toLocaleDateString()}</p></div><div className={`statement-body ${viewMode}`}>{viewMode === 'graphical' ?(<BalanceSheetChart data={data}/>):(<div className="balance-sheet-columns">{}<div className="assets-column"><table className="statement-table"><thead><tr><th colSpan="2" className="section-title">ASSETS</th></tr></thead><tbody><tr className="section-header"><td colSpan="2">Current Assets</td></tr><tr className="line-item"><td className="item-name">Cash & Cash Equivalents</td><td className="amount">{formatCurrency(data.assets.current.cash)}</td></tr><tr className="line-item"><td className="item-name">Accounts Receivable</td><td className="amount">{formatCurrency(data.assets.current.accountsReceivable)}</td></tr><tr className="line-item"><td className="item-name">Prepaid Expenses</td><td className="amount">{formatCurrency(data.assets.current.prepaidExpenses)}</td></tr><tr className="subtotal"><td className="item-name">Total Current Assets</td><td className="amount">{formatCurrency(data.assets.current.total)}</td></tr><tr className="section-header"><td colSpan="2">Fixed Assets</td></tr><tr className="line-item"><td className="item-name">Property & Buildings</td><td className="amount">{formatCurrency(data.assets.fixed.propertyValue)}</td></tr><tr className="line-item"><td className="item-name">Less:Accumulated Depreciation</td><td className="amount">{formatCurrency(data.assets.fixed.accumulatedDepreciation)}</td></tr><tr className="line-item"><td className="item-name">Equipment & Fixtures</td><td className="amount">{formatCurrency(data.assets.fixed.equipment)}</td></tr><tr className="subtotal"><td className="item-name">Total Fixed Assets</td><td className="amount">{formatCurrency(data.assets.fixed.total)}</td></tr><tr className="grand-total"><td className="item-name">TOTAL ASSETS</td><td className="amount">{formatCurrency(data.assets.total)}</td></tr></tbody></table></div>{}<div className="liabilities-column"><table className="statement-table"><thead><tr><th colSpan="2" className="section-title">LIABILITIES & EQUITY</th></tr></thead><tbody><tr className="section-header"><td colSpan="2">Current Liabilities</td></tr><tr className="line-item"><td className="item-name">Accounts Payable</td><td className="amount">{formatCurrency(data.liabilities.current.accountsPayable)}</td></tr><tr className="line-item"><td className="item-name">Accrued Expenses</td><td className="amount">{formatCurrency(data.liabilities.current.accruedExpenses)}</td></tr><tr className="line-item"><td className="item-name">Security Deposits</td><td className="amount">{formatCurrency(data.liabilities.current.securityDeposits)}</td></tr><tr className="line-item"><td className="item-name">Prepaid Rent</td><td className="amount">{formatCurrency(data.liabilities.current.prepaidRent)}</td></tr><tr className="subtotal"><td className="item-name">Total Current Liabilities</td><td className="amount">{formatCurrency(data.liabilities.current.total)}</td></tr><tr className="section-header"><td colSpan="2">Long-Term Liabilities</td></tr><tr className="line-item"><td className="item-name">Mortgages Payable</td><td className="amount">{formatCurrency(data.liabilities.longTerm.mortgages)}</td></tr><tr className="line-item"><td className="item-name">Notes Payable</td><td className="amount">{formatCurrency(data.liabilities.longTerm.notesPayable)}</td></tr><tr className="subtotal"><td className="item-name">Total Long-Term Liabilities</td><td className="amount">{formatCurrency(data.liabilities.longTerm.total)}</td></tr><tr className="subtotal"><td className="item-name">Total Liabilities</td><td className="amount">{formatCurrency(data.liabilities.total)}</td></tr><tr className="section-header"><td colSpan="2">Owner's Equity</td></tr><tr className="line-item"><td className="item-name">Contributed Capital</td><td className="amount">{formatCurrency(data.equity.contributedCapital)}</td></tr><tr className="line-item"><td className="item-name">Retained Earnings</td><td className="amount">{formatCurrency(data.equity.retainedEarnings)}</td></tr><tr className="subtotal"><td className="item-name">Total Owner's Equity</td><td className="amount">{formatCurrency(data.equity.total)}</td></tr><tr className="grand-total"><td className="item-name">TOTAL LIABILITIES & EQUITY</td><td className="amount">{formatCurrency(data.totalLiabilitiesAndEquity)}</td></tr></tbody></table></div></div>)}</div>{viewMode === 'detailed' &&(<div className="balance-verification"><p className="verification-note"><i className="fas fa-check-circle"></i> Balance Check:Assets({formatCurrency(data.assets.total)})= Liabilities & Equity({formatCurrency(data.totalLiabilitiesAndEquity)})</p></div>)}</div>)};const CashFlowStatementDisplay =({data,viewMode,formatCurrency})=>{return(<div className="statement-container cash-flow"><div className="statement-header"><h2>Statement of Cash Flows</h2><p className="statement-period"> For the period{new Date(data.period.start).toLocaleDateString()}to{new Date(data.period.end).toLocaleDateString()}</p></div><div className={`statement-body ${viewMode}`}>{viewMode === 'graphical' ?(<CashFlowChart data={data}/>):(<table className="statement-table"><thead><tr><th>Cash Flow Activities</th><th className="amount-col">Amount</th></tr></thead><tbody>{}<tr className="section-header"><td colSpan="2">OPERATING ACTIVITIES</td></tr><tr className="line-item"><td className="item-name">Net Income</td><td className="amount">{formatCurrency(data.operatingActivities.netIncome)}</td></tr><tr className="line-item"><td className="item-name">Adjustments to reconcile net income:</td><td className="amount"></td></tr><tr className="line-item"><td className="item-name" style={{paddingLeft:'48px'}}>Depreciation</td><td className="amount">{formatCurrency(data.operatingActivities.adjustments.depreciation)}</td></tr><tr className="line-item"><td className="item-name" style={{paddingLeft:'48px'}}>Changes in Working Capital</td><td className="amount">{formatCurrency(data.operatingActivities.adjustments.workingCapitalChanges.total)}</td></tr><tr className="subtotal"><td className="item-name">Net Cash from Operating Activities</td><td className="amount">{formatCurrency(data.operatingActivities.totalOperating)}</td></tr>{}<tr className="section-header"><td colSpan="2">INVESTING ACTIVITIES</td></tr><tr className="line-item"><td className="item-name">Property Purchases</td><td className="amount">{formatCurrency(-data.investingActivities.propertyPurchases)}</td></tr><tr className="line-item"><td className="item-name">Equipment Purchases</td><td className="amount">{formatCurrency(-data.investingActivities.equipmentPurchases)}</td></tr><tr className="line-item"><td className="item-name">Proceeds from Asset Sales</td><td className="amount">{formatCurrency(data.investingActivities.assetSales)}</td></tr><tr className="subtotal"><td className="item-name">Net Cash from Investing Activities</td><td className="amount">{formatCurrency(data.investingActivities.totalInvesting)}</td></tr>{}<tr className="section-header"><td colSpan="2">FINANCING ACTIVITIES</td></tr><tr className="line-item"><td className="item-name">Proceeds from Loans</td><td className="amount">{formatCurrency(data.financingActivities.loanProceeds)}</td></tr><tr className="line-item"><td className="item-name">Loan Payments</td><td className="amount">{formatCurrency(-data.financingActivities.loanPayments)}</td></tr><tr className="line-item"><td className="item-name">Owner Contributions</td><td className="amount">{formatCurrency(data.financingActivities.ownerContributions)}</td></tr><tr className="line-item"><td className="item-name">Owner Distributions</td><td className="amount">{formatCurrency(-data.financingActivities.ownerDistributions)}</td></tr><tr className="subtotal"><td className="item-name">Net Cash from Financing Activities</td><td className="amount">{formatCurrency(data.financingActivities.totalFinancing)}</td></tr>{}<tr className="net-income"><td className="item-name">NET CHANGE IN CASH</td><td className="amount">{formatCurrency(data.operatingActivities.totalOperating + data.investingActivities.totalInvesting + data.financingActivities.totalFinancing)}</td></tr><tr className="line-item"><td className="item-name">Beginning Cash Balance</td><td className="amount">{formatCurrency(data.beginningCash)}</td></tr><tr className="grand-total"><td className="item-name">ENDING CASH BALANCE</td><td className="amount">{formatCurrency(data.beginningCash + data.operatingActivities.totalOperating + data.investingActivities.totalInvesting + data.financingActivities.totalFinancing)}</td></tr></tbody></table>)}</div></div>)};const EquityStatementDisplay =({data,viewMode,formatCurrency})=>{return(<div className="statement-container equity-statement"><div className="statement-header"><h2>Statement of Owner's Equity</h2><p className="statement-period"> For the period{new Date(data.period.start).toLocaleDateString()}to{new Date(data.period.end).toLocaleDateString()}</p></div><div className={`statement-body ${viewMode}`}><table className="statement-table"><thead><tr><th>Owner's Equity</th><th className="amount-col">Amount</th></tr></thead><tbody><tr className="line-item"><td className="item-name">Beginning Balance</td><td className="amount">{formatCurrency(data.beginningBalance)}</td></tr><tr className="section-header"><td colSpan="2">ADDITIONS</td></tr><tr className="line-item"><td className="item-name">Net Income</td><td className="amount">{formatCurrency(data.additions.netIncome)}</td></tr><tr className="line-item"><td className="item-name">Owner Contributions</td><td className="amount">{formatCurrency(data.additions.ownerContributions)}</td></tr><tr className="subtotal"><td className="item-name">Total Additions</td><td className="amount">{formatCurrency(data.additions.total)}</td></tr><tr className="section-header"><td colSpan="2">DEDUCTIONS</td></tr><tr className="line-item"><td className="item-name">Owner Distributions</td><td className="amount">{formatCurrency(data.deductions.ownerDistributions)}</td></tr><tr className="subtotal"><td className="item-name">Total Deductions</td><td className="amount">{formatCurrency(data.deductions.total)}</td></tr><tr className="grand-total"><td className="item-name">ENDING BALANCE</td><td className="amount">{formatCurrency(data.endingBalance)}</td></tr></tbody></table></div></div>)};const TrialBalanceDisplay =({data,viewMode,formatCurrency})=>{return(<div className="statement-container trial-balance"><div className="statement-header"><h2>Trial Balance</h2><p className="statement-period"> As of{new Date(data.asOfDate).toLocaleDateString()}</p></div><div className={`statement-body ${viewMode}`}><table className="statement-table"><thead><tr><th>Account</th><th className="amount-col">Debit</th><th className="amount-col">Credit</th></tr></thead><tbody>{}<tr className="section-header"><td colSpan="3">ASSETS</td></tr>{data.accounts.assets.map(account =>(<tr key={account.code}className="line-item"><td className="item-name">{account.code}-{account.name}</td><td className="amount">{account.debit > 0 ? formatCurrency(account.debit):''}</td><td className="amount">{account.credit > 0 ? formatCurrency(account.credit):''}</td></tr>))}{}<tr className="section-header"><td colSpan="3">LIABILITIES</td></tr>{data.accounts.liabilities.map(account =>(<tr key={account.code}className="line-item"><td className="item-name">{account.code}-{account.name}</td><td className="amount">{account.debit > 0 ? formatCurrency(account.debit):''}</td><td className="amount">{account.credit > 0 ? formatCurrency(account.credit):''}</td></tr>))}{}<tr className="section-header"><td colSpan="3">EQUITY</td></tr>{data.accounts.equity.map(account =>(<tr key={account.code}className="line-item"><td className="item-name">{account.code}-{account.name}</td><td className="amount">{account.debit > 0 ? formatCurrency(account.debit):''}</td><td className="amount">{account.credit > 0 ? formatCurrency(account.credit):''}</td></tr>))}{}<tr className="section-header"><td colSpan="3">REVENUE</td></tr>{data.accounts.revenue.map(account =>(<tr key={account.code}className="line-item"><td className="item-name">{account.code}-{account.name}</td><td className="amount">{account.debit > 0 ? formatCurrency(account.debit):''}</td><td className="amount">{account.credit > 0 ? formatCurrency(account.credit):''}</td></tr>))}{}<tr className="section-header"><td colSpan="3">EXPENSES</td></tr>{data.accounts.expenses.map(account =>(<tr key={account.code}className="line-item"><td className="item-name">{account.code}-{account.name}</td><td className="amount">{account.debit > 0 ? formatCurrency(account.debit):''}</td><td className="amount">{account.credit > 0 ? formatCurrency(account.credit):''}</td></tr>))}{}<tr className="grand-total"><td className="item-name">TOTALS</td><td className="amount">{formatCurrency(data.totals.debits)}</td><td className="amount">{formatCurrency(data.totals.credits)}</td></tr></tbody></table>{data.totals.isBalanced &&(<div className="balance-verification"><p className="verification-note"><i className="fas fa-check-circle"></i> Trial balance is in balance </p></div>)}</div></div>)};const GeneralLedgerDisplay =({data,viewMode,formatCurrency})=>{const [selectedAccount,setSelectedAccount] = React.useState(null);return(<div className="statement-container general-ledger"><div className="statement-header"><h2>General Ledger</h2><p className="statement-period"> For the period{new Date(data.period.start).toLocaleDateString()}to{new Date(data.period.end).toLocaleDateString()}</p></div><div className={`statement-body ${viewMode}`}><div className="ledger-accounts"><h3>Select Account:</h3><select value={selectedAccount || ''}onChange={(e)=> setSelectedAccount(e.target.value)}className="period-select" ><option value="">-- Select an Account --</option>{Object.entries(data.accounts).map(([code,account])=>(<option key={code}value={code}>{code}-{account.accountName}</option>))}</select></div>{selectedAccount && data.accounts[selectedAccount] &&(<div className="ledger-details"><h3>{data.accounts[selectedAccount].accountName}</h3><p>Account Type:{data.accounts[selectedAccount].accountType}</p><p>Beginning Balance:{formatCurrency(data.accounts[selectedAccount].beginningBalance)}</p><table className="statement-table"><thead><tr><th>Date</th><th>Description</th><th className="amount-col">Debit</th><th className="amount-col">Credit</th><th className="amount-col">Balance</th></tr></thead><tbody>{data.accounts[selectedAccount].transactions.map((trans,index)=>{const runningBalance = data.accounts[selectedAccount].transactions .slice(0,index + 1).reduce((balance,t)=> balance +(t.debit || 0)-(t.credit || 0),data.accounts[selectedAccount].beginningBalance);return(<tr key={index}className="line-item"><td>{new Date(trans.date).toLocaleDateString()}</td><td>{trans.description}</td><td className="amount">{trans.debit > 0 ? formatCurrency(trans.debit):''}</td><td className="amount">{trans.credit > 0 ? formatCurrency(trans.credit):''}</td><td className="amount">{formatCurrency(runningBalance)}</td></tr>)})}<tr className="grand-total"><td colSpan="4">Ending Balance</td><td className="amount">{formatCurrency(data.accounts[selectedAccount].endingBalance)}</td></tr></tbody></table></div>)}</div></div>)};const PropertyMultiSelect =({selectedProperties,onChange})=>{const [properties,setProperties] = React.useState([]);const [isOpen,setIsOpen] = React.useState(false);React.useEffect(()=>{loadProperties()},[]);const loadProperties = async()=>{try{const response = await window.ApiService.get('/properties');setProperties(response.properties || [])}catch(error){setProperties([{id:'1',name:'Sunset Apartments'},{id:'2',name:'Oak Grove Residences'},{id:'3',name:'Riverside Plaza'},{id:'4',name:'Mountain View Complex'}])}};const toggleProperty =(propertyId)=>{if(propertyId === 'all'){onChange(['all'])}else{const newSelection = selectedProperties.includes(propertyId)? selectedProperties.filter(id => id !== propertyId):[...selectedProperties.filter(id => id !== 'all'),propertyId];onChange(newSelection.length === 0 ? ['all']:newSelection)}};const getDisplayText =()=>{if(selectedProperties.includes('all'))return 'All Properties';if(selectedProperties.length === 1){const property = properties.find(p => p.id === selectedProperties[0]);return property?.name || 'Select Properties'}return `${selectedProperties.length}Properties Selected`};return(<div className="property-multi-select"><button className="select-trigger" onClick={()=> setIsOpen(!isOpen)}><span>{getDisplayText()}</span><i className={`fas fa-chevron-${isOpen ? 'up':'down'}`}></i></button>{isOpen &&(<div className="select-dropdown"><label className="property-option"><input type="checkbox" checked={selectedProperties.includes('all')}onChange={()=> toggleProperty('all')}/><span>All Properties</span></label><div className="divider"></div>{properties.map(property =>(<label key={property.id}className="property-option"><input type="checkbox" checked={selectedProperties.includes(property.id)}onChange={()=> toggleProperty(property.id)}disabled={selectedProperties.includes('all')}/><span>{property.name}</span></label>))}</div>)}</div>)};const IncomeStatementChart =({data})=>{React.useEffect(()=>{},[data]);return(<div className="statement-chart"><canvas id="income-chart"></canvas></div>)};const BalanceSheetChart =({data})=>{return(<div className="statement-chart"><canvas id="balance-chart"></canvas></div>)};const CashFlowChart =({data})=>{return(<div className="statement-chart"><canvas id="cashflow-chart"></canvas></div>)};window.AppModules = window.AppModules ||{};window.AppModules.FinancialStatementsHub = FinancialStatementsHub;

// VendorManagementSystem.jsx
const VendorManagementSystem =()=>{const [vendors,setVendors] = React.useState([]);const [showAddModal,setShowAddModal] = React.useState(false);const [showDetailModal,setShowDetailModal] = React.useState(false);const [showAssignModal,setShowAssignModal] = React.useState(false);const [assigningVendor,setAssigningVendor] = React.useState(null);const [selectedVendor,setSelectedVendor] = React.useState(null);const [filters,setFilters] = React.useState({category:'all',status:'all',rating:'all'});const [searchTerm,setSearchTerm] = React.useState('');const [loading,setLoading] = React.useState(false);const maintenanceStore = window.useMaintenanceStore ? window.useMaintenanceStore():null;React.useEffect(()=>{loadVendors()},[]);const loadVendors = async()=>{setLoading(true);try{if(window.ApiService && typeof window.ApiService.get === 'function'){const response = await window.ApiService.get('/vendors');setVendors(response.data)}else{setVendors(mockVendors)}}catch(error){console.error('Error loading vendors:',error);setVendors(mockVendors)}finally{setLoading(false)}};const mockVendors = [{id:1,name:'AquaFix Plumbing Services',category:'plumbing',email:'contact@aquafix.com',phone:'(555)123-4567',license:'CA-PLM-98765',insurance:{carrier:'State Farm',policy:'GL-123456',expires:'2025-12-31',coverage:2000000},rating:4.9,totalJobs:127,completedJobs:125,avgResponseTime:45,avgCompletionTime:180,avgCost:285,specialties:['Emergency repairs','Leak detection','Pipe replacement'],serviceAreas:['Los Angeles','Santa Monica','Beverly Hills'],availability:{monday:{start:'07:00',end:'18:00'},tuesday:{start:'07:00',end:'18:00'},wednesday:{start:'07:00',end:'18:00'},thursday:{start:'07:00',end:'18:00'},friday:{start:'07:00',end:'18:00'},saturday:{start:'08:00',end:'16:00'},sunday:{start:'10:00',end:'14:00',emergency:true}},performanceScore:95,aiScore:92,status:'active',preferredVendor:true,documents:[{type:'license',name:'Plumbing License',verified:true},{type:'insurance',name:'GL Insurance',verified:true},{type:'w9',name:'W-9 Form',verified:true}],reviews:[{id:1,tenant:'Sarah Johnson',property:'Sunset Apartments',rating:5,date:'2025-01-10',comment:'Fast response,professional service. Fixed the leak quickly.'},{id:2,tenant:'Michael Chen',property:'Downtown Plaza',rating:5,date:'2025-01-05',comment:'Excellent work on bathroom renovation. Clean and efficient.'}]},{id:2,name:'PowerPro Electric',category:'electrical',email:'service@powerpro.com',phone:'(555)234-5678',license:'CA-ELC-54321',insurance:{carrier:'Allstate',policy:'GL-789012',expires:'2025-11-30',coverage:3000000},rating:4.8,totalJobs:89,completedJobs:88,avgResponseTime:72,avgCompletionTime:240,avgCost:425,specialties:['Panel upgrades','EV charger installation','Emergency repairs'],serviceAreas:['Los Angeles','Pasadena','Glendale'],availability:{monday:{start:'06:00',end:'20:00'},tuesday:{start:'06:00',end:'20:00'},wednesday:{start:'06:00',end:'20:00'},thursday:{start:'06:00',end:'20:00'},friday:{start:'06:00',end:'20:00'},saturday:{start:'08:00',end:'18:00'},sunday:{emergency:true}},performanceScore:93,aiScore:90,status:'active',preferredVendor:true,documents:[{type:'license',name:'Electrical License',verified:true},{type:'insurance',name:'GL Insurance',verified:true},{type:'certification',name:'NFPA Certification',verified:true}]},{id:3,name:'CoolBreeze HVAC Solutions',category:'hvac',email:'info@coolbreezehvac.com',phone:'(555)345-6789',license:'CA-HVC-12345',insurance:{carrier:'Progressive',policy:'GL-345678',expires:'2025-10-31',coverage:2500000},rating:4.7,totalJobs:156,completedJobs:150,avgResponseTime:120,avgCompletionTime:360,avgCost:520,specialties:['AC repair','Heating systems','Preventive maintenance'],serviceAreas:['Los Angeles County'],availability:{monday:{start:'07:00',end:'19:00'},tuesday:{start:'07:00',end:'19:00'},wednesday:{start:'07:00',end:'19:00'},thursday:{start:'07:00',end:'19:00'},friday:{start:'07:00',end:'19:00'},saturday:{start:'09:00',end:'17:00'},sunday:{emergency:true}},performanceScore:88,aiScore:85,status:'busy',preferredVendor:false,documents:[{type:'license',name:'HVAC License',verified:true},{type:'insurance',name:'GL Insurance',verified:true},{type:'epa',name:'EPA Certification',verified:true}]}];const vendorCategories ={plumbing:{icon:'fa-faucet',color:'#3b82f6',label:'Plumbing'},electrical:{icon:'fa-bolt',color:'#f59e0b',label:'Electrical'},hvac:{icon:'fa-snowflake',color:'#ef4444',label:'HVAC'},appliance:{icon:'fa-blender',color:'#10b981',label:'Appliance'},landscaping:{icon:'fa-tree',color:'#059669',label:'Landscaping'},general:{icon:'fa-hammer',color:'#8b5cf6',label:'General'},cleaning:{icon:'fa-broom',color:'#ec4899',label:'Cleaning'},pest:{icon:'fa-bug',color:'#a78bfa',label:'Pest Control'}};const filteredVendors = vendors.filter(vendor =>{const matchesSearch = vendor.name.toLowerCase().includes(searchTerm.toLowerCase())|| vendor.email.toLowerCase().includes(searchTerm.toLowerCase())|| vendor.phone.includes(searchTerm);const matchesCategory = filters.category === 'all' || vendor.category === filters.category;const matchesStatus = filters.status === 'all' || vendor.status === filters.status;const matchesRating = filters.rating === 'all' ||(filters.rating === 'high' && vendor.rating >= 4.5)||(filters.rating === 'medium' && vendor.rating >= 3.5 && vendor.rating < 4.5)||(filters.rating === 'low' && vendor.rating < 3.5);return matchesSearch && matchesCategory && matchesStatus && matchesRating});const calculateVendorScore =(vendor)=>{const factors ={rating:vendor.rating * 20,responseTime:Math.max(0,100 -(vendor.avgResponseTime / 2)),completionRate:(vendor.completedJobs / vendor.totalJobs)* 100,costEfficiency:Math.max(0,100 -(vendor.avgCost / 10)),documentCompliance:vendor.documents.filter(d => d.verified).length * 10,availability:Object.keys(vendor.availability).length * 5};const weights ={rating:0.3,responseTime:0.2,completionRate:0.2,costEfficiency:0.1,documentCompliance:0.1,availability:0.1};let score = 0;for(const [factor,value] of Object.entries(factors)){score += value * weights[factor]}return Math.round(score)};const matchVendorToRequest =(request,vendors)=>{const categoryVendors = vendors.filter(v => v.category === request.category && v.status === 'active');const scoredVendors = categoryVendors.map(vendor =>{let score = calculateVendorScore(vendor);if(vendor.preferredVendor)score += 10;if(vendor.status === 'busy')score -= 20;if(vendor.serviceAreas.includes(request.property.area))score += 15;if(request.priority === 'urgent' && vendor.avgResponseTime < 60)score += 20;return{...vendor,matchScore:score}});return scoredVendors.sort((a,b)=> b.matchScore - a.matchScore)};const handleAddVendor = async(vendorData)=>{try{if(window.ApiService && typeof window.ApiService.post === 'function'){const response = await window.ApiService.post('/vendors',vendorData);setVendors([...vendors,response.data])}else{const newVendor ={...vendorData,id:vendors.length + 1,totalJobs:0,completedJobs:0,rating:0,reviews:[],performanceScore:0,aiScore:0};setVendors([...vendors,newVendor])}setShowAddModal(false)}catch(error){console.error('Error adding vendor:',error)}};const updateVendorStatus = async(vendorId,status)=>{try{if(window.ApiService && typeof window.ApiService.patch === 'function'){await window.ApiService.patch(`/vendors/${vendorId}`,{status})}setVendors(vendors.map(v => v.id === vendorId ?{...v,status}:v))}catch(error){console.error('Error updating vendor status:',error)}};const VendorCard =({vendor})=>{const category = vendorCategories[vendor.category];const score = calculateVendorScore(vendor);return React.createElement('div',{className:'vendor-card',onClick:()=>{setSelectedVendor(vendor);setShowDetailModal(true)}},[ React.createElement('div',{key:'header',className:'vendor-card-header'},[ React.createElement('div',{key:'avatar',className:'vendor-avatar',style:{backgroundColor:category.color + '20'}},React.createElement('i',{className:`fas ${category.icon}`,style:{color:category.color}})),React.createElement('div',{key:'info',className:'vendor-basic-info'},[ React.createElement('h3',{key:'name'},vendor.name),React.createElement('p',{key:'category'},category.label),React.createElement('div',{key:'rating',className:'vendor-rating'},[ ...Array(5).fill(0).map((_,i)=> React.createElement('i',{key:i,className:`fas fa-star ${i < Math.floor(vendor.rating)? 'filled':''}`})),React.createElement('span',{key:'value'},` ${vendor.rating}(${vendor.totalJobs}jobs)`)])]),React.createElement('div',{key:'badges',className:'vendor-badges'},[ vendor.preferredVendor && React.createElement('span',{key:'preferred',className:'badge badge-preferred'},[ React.createElement('i',{key:'icon',className:'fas fa-star'}),' Preferred' ]),React.createElement('span',{key:'status',className:`badge badge-${vendor.status}`},vendor.status.charAt(0).toUpperCase()+ vendor.status.slice(1))])]),React.createElement('div',{key:'metrics',className:'vendor-metrics'},[ React.createElement('div',{key:'metric1',className:'metric'},[ React.createElement('i',{key:'icon',className:'fas fa-clock'}),React.createElement('div',{key:'content'},[ React.createElement('span',{key:'value',className:'metric-value'},vendor.avgResponseTime < 60 ? `${vendor.avgResponseTime}m`:`${Math.round(vendor.avgResponseTime / 60)}h`),React.createElement('span',{key:'label',className:'metric-label'},'Avg Response')])]),React.createElement('div',{key:'metric2',className:'metric'},[ React.createElement('i',{key:'icon',className:'fas fa-dollar-sign'}),React.createElement('div',{key:'content'},[ React.createElement('span',{key:'value',className:'metric-value'},`$${vendor.avgCost}`),React.createElement('span',{key:'label',className:'metric-label'},'Avg Cost')])]),React.createElement('div',{key:'metric3',className:'metric'},[ React.createElement('i',{key:'icon',className:'fas fa-check-circle'}),React.createElement('div',{key:'content'},[ React.createElement('span',{key:'value',className:'metric-value'},`${Math.round((vendor.completedJobs / vendor.totalJobs)* 100)}%`),React.createElement('span',{key:'label',className:'metric-label'},'Completion')])])]),React.createElement('div',{key:'ai-score',className:'vendor-ai-score'},[ React.createElement('div',{key:'score-label',className:'ai-score-label'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),' AI Score' ]),React.createElement('div',{key:'score-bar',className:'ai-score-bar'},[ React.createElement('div',{key:'fill',className:'ai-score-fill',style:{width:`${score}%`,backgroundColor:score >= 80 ? '#10b981':score >= 60 ? '#f59e0b':'#ef4444'}}),React.createElement('span',{key:'value',className:'ai-score-value'},`${score}/100`)])]),React.createElement('div',{key:'contact',className:'vendor-contact'},[ React.createElement('a',{key:'email',href:`mailto:${vendor.email}`,className:'contact-link',onClick:(e)=> e.stopPropagation()},[ React.createElement('i',{key:'icon',className:'fas fa-envelope'}),' Email' ]),React.createElement('a',{key:'phone',href:`tel:${vendor.phone}`,className:'contact-link',onClick:(e)=> e.stopPropagation()},[ React.createElement('i',{key:'icon',className:'fas fa-phone'}),' Call' ]),React.createElement('button',{key:'assign',className:'btn-assign',onClick:(e)=>{e.stopPropagation();setAssigningVendor(vendor);setShowAssignModal(true)}},'Assign Job')])])};return React.createElement('div',{className:'vendor-management-system'},[ React.createElement('div',{key:'header',className:'vms-header'},[ React.createElement('div',{key:'title-section'},[ React.createElement('h1',{key:'title'},'Vendor Management'),React.createElement('p',{key:'subtitle'},'AI-powered vendor matching and performance tracking')]),React.createElement('button',{key:'add-btn',className:'btn btn-primary',onClick:()=> setShowAddModal(true)},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),' Add Vendor' ])]),React.createElement('div',{key:'controls',className:'vms-controls'},[ React.createElement('div',{key:'search',className:'search-box'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search vendors...',value:searchTerm,onChange:(e)=> setSearchTerm(e.target.value)})]),React.createElement('div',{key:'filters',className:'filter-group'},[ React.createElement('select',{key:'category',value:filters.category,onChange:(e)=> setFilters({...filters,category:e.target.value}),className:'filter-select'},[ React.createElement('option',{key:'all',value:'all'},'All Categories'),...Object.entries(vendorCategories).map(([key,cat])=> React.createElement('option',{key,value:key},cat.label))]),React.createElement('select',{key:'status',value:filters.status,onChange:(e)=> setFilters({...filters,status:e.target.value}),className:'filter-select'},[ React.createElement('option',{key:'all',value:'all'},'All Status'),React.createElement('option',{key:'active',value:'active'},'Active'),React.createElement('option',{key:'busy',value:'busy'},'Busy'),React.createElement('option',{key:'inactive',value:'inactive'},'Inactive')]),React.createElement('select',{key:'rating',value:filters.rating,onChange:(e)=> setFilters({...filters,rating:e.target.value}),className:'filter-select'},[ React.createElement('option',{key:'all',value:'all'},'All Ratings'),React.createElement('option',{key:'high',value:'high'},'4.5+ Stars'),React.createElement('option',{key:'medium',value:'medium'},'3.5-4.5 Stars'),React.createElement('option',{key:'low',value:'low'},'Below 3.5 Stars')])])]),React.createElement('div',{key:'grid',className:'vendors-grid'},loading ? React.createElement('div',{className:'loading-state'},'Loading vendors...'):filteredVendors.length === 0 ? React.createElement('div',{className:'empty-state'},[ React.createElement('i',{key:'icon',className:'fas fa-hard-hat fa-3x'}),React.createElement('p',{key:'text'},'No vendors found')]):filteredVendors.map(vendor => React.createElement(VendorCard,{key:vendor.id,vendor}))),showAssignModal && React.createElement(JobAssignmentModal,{key:'assign-modal',vendor:assigningVendor,onClose:()=>{setShowAssignModal(false);setAssigningVendor(null)},onAssign:(requestId,vendorId)=>{if(maintenanceStore?.actions?.assignVendor){maintenanceStore.actions.assignVendor(requestId,vendorId);setShowAssignModal(false);setAssigningVendor(null)}else{alert('Maintenance system not available')}}})])};const JobAssignmentModal =({vendor,onClose,onAssign})=>{const [selectedRequest,setSelectedRequest] = React.useState(null);const [loading,setLoading] = React.useState(false);const maintenanceStore = window.useMaintenanceStore ? window.useMaintenanceStore():null;const unassignedRequests = maintenanceStore?.actions?.getRequests({status:'submitted'})|| [];const matchingRequests = unassignedRequests.filter(request => request.category === vendor?.category || vendor?.category === 'general');const handleAssign = async()=>{if(!selectedRequest || !vendor)return;setLoading(true);try{await onAssign(selectedRequest.id,vendor.id);alert(`Successfully assigned ${vendor.name}to maintenance request ${selectedRequest.id}`)}catch(error){alert('Failed to assign vendor. Please try again.')}finally{setLoading(false)}};const formatDate =(dateString)=>{return new Date(dateString).toLocaleDateString('en-US',{month:'short',day:'numeric',hour:'2-digit',minute:'2-digit'})};const getPriorityColor =(priority)=>{const colors ={emergency:'#ef4444',urgent:'#f97316',high:'#f59e0b',medium:'#10b981',low:'#6b7280'};return colors[priority] || '#6b7280'};return React.createElement('div',{className:'modal-overlay',onClick:onClose},[ React.createElement('div',{key:'modal',className:'job-assignment-modal',onClick:(e)=> e.stopPropagation()},[ React.createElement('div',{key:'header',className:'modal-header'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-user-hard-hat'}),` Assign Job to ${vendor?.name}` ]),React.createElement('button',{key:'close',className:'close-btn',onClick:onClose},React.createElement('i',{className:'fas fa-times'}))]),React.createElement('div',{key:'body',className:'modal-body'},[ React.createElement('div',{key:'vendor-info',className:'vendor-summary'},[ React.createElement('h3',{key:'title'},'Vendor Information'),React.createElement('div',{key:'details',className:'vendor-details'},[ React.createElement('p',{key:'category'},[ React.createElement('strong',{},'Category:'),vendor?.category?.charAt(0).toUpperCase()+ vendor?.category?.slice(1)]),React.createElement('p',{key:'rating'},[ React.createElement('strong',{},'Rating:'),`${vendor?.rating}/5.0 ⭐` ]),React.createElement('p',{key:'response'},[ React.createElement('strong',{},'Avg Response:'),`${vendor?.responseTime}hours` ])])]),React.createElement('div',{key:'requests',className:'requests-section'},[ React.createElement('h3',{key:'title'},'Available Work Orders'),matchingRequests.length === 0 ? React.createElement('div',{key:'empty',className:'empty-requests'},[ React.createElement('i',{key:'icon',className:'fas fa-clipboard-check fa-2x'}),React.createElement('p',{key:'text'},'No unassigned requests match this vendor\'s expertise')]):React.createElement('div',{key:'list',className:'requests-list'},matchingRequests.map(request => React.createElement('div',{key:request.id,className:`request-item ${selectedRequest?.id === request.id ? 'selected':''}`,onClick:()=> setSelectedRequest(request)},[ React.createElement('div',{key:'info',className:'request-info'},[ React.createElement('h4',{key:'title'},request.title || request.description),React.createElement('p',{key:'location'},`${request.property}- Unit ${request.unit}`),React.createElement('p',{key:'tenant'},`Tenant:${request.tenant?.name}`)]),React.createElement('div',{key:'meta',className:'request-meta'},[ React.createElement('span',{key:'priority',className:'priority-badge',style:{color:getPriorityColor(request.priority)}},[ React.createElement('i',{key:'icon',className:'fas fa-exclamation-circle'}),` ${request.priority.toUpperCase()}` ]),React.createElement('span',{key:'date',className:'created-date'},formatDate(request.createdAt)),React.createElement('span',{key:'cost',className:'estimated-cost'},`Est:$${request.estimatedCost || 'TBD'}`)])])))])]),React.createElement('div',{key:'footer',className:'modal-footer'},[ React.createElement('button',{key:'cancel',className:'btn btn-secondary',onClick:onClose},'Cancel'),React.createElement('button',{key:'assign',className:'btn btn-primary',disabled:!selectedRequest || loading,onClick:handleAssign},loading ? 'Assigning...':'Assign Vendor')])])])};window.AppModules = window.AppModules ||{};window.AppModules.VendorManagementSystem = VendorManagementSystem;

// VendorPortal.jsx
const VendorPortal =(()=>{const ComponentFactory ={createComponent:(name)=>(componentFunc)=>{const Component =(props)=>{const helpers ={useLocalState:(initialState)=>{const [state,setState] = React.useState(initialState);const updateState =(updates)=> setState(prev =>({...prev,...updates}));return [state,updateState]},formatCurrency:(amount)=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'}).format(amount || 0)},formatDate:(date)=>{return new Date(date).toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'})},formatTime:(date)=>{return new Date(date).toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true})}};return componentFunc(props,helpers)};Component.displayName = name;return Component}};return ComponentFactory.createComponent('VendorPortal')((props,helpers)=>{const{useLocalState,formatCurrency,formatDate,formatTime}= helpers;const{vendorId,vendorData}= props;const [state,updateState] = useLocalState({activeView:'dashboard',jobs:[],schedule:[],earnings:{},notifications:[],selectedJob:null,showChat:false,chatJob:null,availability:{},performance:{},loading:true});React.useEffect(()=>{loadVendorData()},[vendorId]);const loadVendorData = async()=>{const mockJobs = [{id:'WO001',status:'pending',priority:'high',property:'Sunset Apartments',unit:'3B',issue:'Leaking faucet in kitchen',tenant:{name:'Sarah Johnson',phone:'(555)123-4567',availability:'Weekdays after 3PM'},suggestedTime:new Date('2025-01-15T15:00:00'),estimatedDuration:1,estimatedCost:150,category:'plumbing',aiNotes:'Tenant reports slow leak,likely worn washer. Standard repair kit should suffice.',chatEnabled:true},{id:'WO002',status:'in_progress',priority:'medium',property:'Downtown Plaza',unit:'5A',issue:'AC not cooling properly',tenant:{name:'Mike Chen',phone:'(555)234-5678',availability:'Flexible,works from home'},scheduledTime:new Date('2025-01-14T10:00:00'),estimatedDuration:2,estimatedCost:250,category:'hvac',startTime:new Date('2025-01-14T10:15:00'),chatEnabled:true},{id:'WO003',status:'completed',priority:'low',property:'Garden Complex',unit:'2C',issue:'Replace light fixtures',completedDate:new Date('2025-01-12T14:30:00'),totalCost:175,category:'electrical',rating:5,feedback:'Great work,very professional!'}];const mockEarnings ={today:425,thisWeek:1850,thisMonth:7250,pending:400,averageJobValue:185};const mockPerformance ={rating:4.8,totalJobs:147,onTimeRate:96,responseTime:15,specialties:['Plumbing','HVAC','Electrical'],certifications:['Licensed Plumber','EPA Certified']};updateState({jobs:mockJobs,earnings:mockEarnings,performance:mockPerformance,loading:false})};return React.createElement('div',{className:'vendor-portal'},[ React.createElement(VendorHeader,{key:'header',vendorData:vendorData,activeView:state.activeView,onViewChange:(view)=> updateState({activeView:view}),notifications:state.notifications}),React.createElement('div',{key:'content',className:'vendor-content'},[ state.activeView === 'dashboard' && renderDashboard(),state.activeView === 'jobs' && renderJobsView(),state.activeView === 'schedule' && renderScheduleView(),state.activeView === 'earnings' && renderEarningsView(),state.activeView === 'profile' && renderProfileView()]),state.selectedJob && React.createElement(JobDetailModal,{key:'job-detail',job:state.selectedJob,onClose:()=> updateState({selectedJob:null}),onAccept:(jobId)=> acceptJob(jobId),onComplete:(jobId,data)=> completeJob(jobId,data),onOpenChat:(job)=> updateState({showChat:true,chatJob:job})}),state.showChat && React.createElement(ThreeWayChat,{key:'chat',job:state.chatJob,vendorId:vendorId,onClose:()=> updateState({showChat:false,chatJob:null})})]);function renderDashboard(){const pendingJobs = state.jobs.filter(j => j.status === 'pending');const activeJobs = state.jobs.filter(j => j.status === 'in_progress');const todayJobs = state.jobs.filter(j =>{const jobDate = j.scheduledTime || j.suggestedTime;return jobDate && new Date(jobDate).toDateString()=== new Date().toDateString()});return React.createElement('div',{className:'vendor-dashboard'},[ React.createElement('div',{key:'stats',className:'dashboard-stats'},[{label:'Today\'s Earnings',value:formatCurrency(state.earnings.today),icon:'fa-dollar-sign',color:'success'},{label:'Active Jobs',value:activeJobs.length,icon:'fa-wrench',color:'primary'},{label:'Pending Jobs',value:pendingJobs.length,icon:'fa-clock',color:'warning'},{label:'Rating',value:`${state.performance.rating}★`,icon:'fa-star',color:'info'}].map((stat,idx)=> React.createElement('div',{key:idx,className:`stat-card ${stat.color}`},[ React.createElement('i',{key:'icon',className:`fas ${stat.icon}`}),React.createElement('div',{key:'content'},[ React.createElement('span',{key:'value',className:'stat-value'},stat.value),React.createElement('span',{key:'label',className:'stat-label'},stat.label)])]))),React.createElement('div',{key:'today',className:'today-schedule'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-calendar-day'}),'Today\'s Schedule' ]),React.createElement('div',{key:'jobs',className:'schedule-list'},todayJobs.length > 0 ? todayJobs.map(job => React.createElement(JobCard,{key:job.id,job:job,onSelect:()=> updateState({selectedJob:job}),compact:true})):React.createElement('p',{key:'empty',className:'empty-state'},'No jobs scheduled for today'))]),React.createElement('div',{key:'pending',className:'pending-requests'},[ React.createElement('h2',{key:'title'},[ React.createElement('i',{key:'icon',className:'fas fa-exclamation-circle'}),'New Job Requests' ]),React.createElement('div',{key:'jobs',className:'job-requests'},pendingJobs.map(job => React.createElement(JobRequestCard,{key:job.id,job:job,onAccept:()=> acceptJob(job.id),onDecline:()=> declineJob(job.id),onViewDetails:()=> updateState({selectedJob:job})})))])])}function renderJobsView(){const [filterStatus,setFilterStatus] = React.useState('all');const filteredJobs = state.jobs.filter(job => filterStatus === 'all' || job.status === filterStatus);return React.createElement('div',{className:'jobs-view'},[ React.createElement('div',{key:'header',className:'view-header'},[ React.createElement('h2',{key:'title'},'All Jobs'),React.createElement('div',{key:'filters',className:'job-filters'},[ React.createElement('select',{key:'status',value:filterStatus,onChange:(e)=> setFilterStatus(e.target.value)},[ React.createElement('option',{key:'all',value:'all'},'All Jobs'),React.createElement('option',{key:'pending',value:'pending'},'Pending'),React.createElement('option',{key:'in_progress',value:'in_progress'},'In Progress'),React.createElement('option',{key:'completed',value:'completed'},'Completed')])])]),React.createElement('div',{key:'list',className:'jobs-list'},filteredJobs.map(job => React.createElement(JobCard,{key:job.id,job:job,onSelect:()=> updateState({selectedJob:job})})))])}function renderScheduleView(){const [selectedDate,setSelectedDate] = React.useState(new Date());return React.createElement('div',{className:'schedule-view'},[ React.createElement('h2',{key:'title'},'My Schedule'),React.createElement(VendorCalendar,{key:'calendar',jobs:state.jobs,selectedDate:selectedDate,onDateSelect:setSelectedDate,onJobSelect:(job)=> updateState({selectedJob:job})}),React.createElement(AvailabilityManager,{key:'availability',availability:state.availability,onUpdate:(availability)=> updateState({availability})})])}function renderEarningsView(){return React.createElement('div',{className:'earnings-view'},[ React.createElement('h2',{key:'title'},'Earnings & Payments'),React.createElement(EarningsOverview,{key:'overview',earnings:state.earnings,jobs:state.jobs}),React.createElement(PaymentHistory,{key:'history',jobs:state.jobs.filter(j => j.status === 'completed')})])}function renderProfileView(){return React.createElement('div',{className:'profile-view'},[ React.createElement('h2',{key:'title'},'My Profile'),React.createElement(VendorProfile,{key:'profile',vendorData:vendorData,performance:state.performance,onUpdate:(data)=> updateVendorProfile(data)})])}async function acceptJob(jobId){const job = state.jobs.find(j => j.id === jobId);if(!job)return;const updatedJobs = state.jobs.map(j => j.id === jobId ?{...j,status:'scheduled',acceptedAt:new Date()}:j);updateState({jobs:updatedJobs});updateState({showChat:true,chatJob:job});window.Toast?.success('Job accepted! Chat opened with tenant and property manager.')}async function declineJob(jobId){const updatedJobs = state.jobs.filter(j => j.id !== jobId);updateState({jobs:updatedJobs});window.Toast?.info('Job declined')}async function completeJob(jobId,completionData){const updatedJobs = state.jobs.map(j => j.id === jobId ?{...j,status:'completed',completedDate:new Date(),...completionData}:j);updateState({jobs:updatedJobs});window.Toast?.success('Job marked as complete!')}async function updateVendorProfile(profileData){window.Toast?.success('Profile updated successfully!')}})})();const VendorHeader = ComponentFactory.createComponent('VendorHeader')((props,helpers)=>{const{vendorData,activeView,onViewChange,notifications}= props;const navItems = [{id:'dashboard',label:'Dashboard',icon:'fa-home'},{id:'jobs',label:'Jobs',icon:'fa-wrench'},{id:'schedule',label:'Schedule',icon:'fa-calendar'},{id:'earnings',label:'Earnings',icon:'fa-dollar-sign'},{id:'profile',label:'Profile',icon:'fa-user'}];return React.createElement('header',{className:'vendor-header'},[ React.createElement('div',{key:'brand',className:'header-brand'},[ React.createElement('h1',{key:'title'},'Vendor Portal'),React.createElement('span',{key:'name'},vendorData?.companyName || 'Service Provider')]),React.createElement('nav',{key:'nav',className:'header-nav'},navItems.map(item => React.createElement('button',{key:item.id,className:`nav-item ${activeView === item.id ? 'active':''}`,onClick:()=> onViewChange(item.id)},[ React.createElement('i',{key:'icon',className:`fas ${item.icon}`}),React.createElement('span',{key:'label'},item.label)]))),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'notifications',className:'notification-btn',title:'Notifications'},[ React.createElement('i',{key:'icon',className:'fas fa-bell'}),notifications?.length > 0 && React.createElement('span',{key:'badge',className:'notification-badge'},notifications.length)]),React.createElement('button',{key:'logout',className:'logout-btn',title:'Logout'},React.createElement('i',{className:'fas fa-sign-out-alt'}))])])});const JobCard = ComponentFactory.createComponent('JobCard')((props,helpers)=>{const{job,onSelect,compact = false}= props;const{formatDate,formatTime,formatCurrency}= helpers;const statusColors ={pending:'warning',scheduled:'info',in_progress:'primary',completed:'success'};const priorityColors ={low:'secondary',medium:'warning',high:'danger'};return React.createElement('div',{className:`job-card ${job.status}${compact ? 'compact':''}`,onClick:onSelect},[ React.createElement('div',{key:'header',className:'job-header'},[ React.createElement('div',{key:'info'},[ React.createElement('h4',{key:'id'},`#${job.id}`),React.createElement('p',{key:'property'},`${job.property}- Unit ${job.unit}`)]),React.createElement('div',{key:'badges'},[ React.createElement('span',{key:'status',className:`badge badge-${statusColors[job.status]}`},job.status.replace('_',' ')),React.createElement('span',{key:'priority',className:`badge badge-${priorityColors[job.priority]}`},job.priority)])]),React.createElement('div',{key:'issue',className:'job-issue'},[ React.createElement('i',{key:'icon',className:`fas fa-${getCategoryIcon(job.category)}`}),React.createElement('p',{key:'desc'},job.issue)]),!compact && job.aiNotes && React.createElement('div',{key:'ai-notes',className:'ai-notes'},[ React.createElement('i',{key:'icon',className:'fas fa-robot'}),React.createElement('p',{key:'notes'},job.aiNotes)]),React.createElement('div',{key:'details',className:'job-details'},[(job.scheduledTime || job.suggestedTime)&& React.createElement('div',{key:'time',className:'detail-item'},[ React.createElement('i',{key:'icon',className:'fas fa-clock'}),React.createElement('span',{},`${formatDate(job.scheduledTime || job.suggestedTime)}at ${formatTime(job.scheduledTime || job.suggestedTime)}`)]),job.estimatedCost && React.createElement('div',{key:'cost',className:'detail-item'},[ React.createElement('i',{key:'icon',className:'fas fa-dollar-sign'}),React.createElement('span',{},`Est. ${formatCurrency(job.estimatedCost)}`)]),job.estimatedDuration && React.createElement('div',{key:'duration',className:'detail-item'},[ React.createElement('i',{key:'icon',className:'fas fa-hourglass-half'}),React.createElement('span',{},`${job.estimatedDuration}hour${job.estimatedDuration > 1 ? 's':''}`)])]),job.status === 'completed' && job.rating && React.createElement('div',{key:'rating',className:'job-rating'},[ React.createElement('div',{key:'stars'},[...Array(5)].map((_,i)=> React.createElement('i',{key:i,className:`fas fa-star ${i < job.rating ? 'filled':''}`}))),job.feedback && React.createElement('p',{key:'feedback'},`"${job.feedback}"`)])]);function getCategoryIcon(category){const icons ={plumbing:'faucet',electrical:'bolt',hvac:'snowflake',appliance:'blender',general:'tools'};return icons[category] || 'wrench'}});const JobRequestCard = ComponentFactory.createComponent('JobRequestCard')((props,helpers)=>{const{job,onAccept,onDecline,onViewDetails}= props;const{formatCurrency,formatTime}= helpers;return React.createElement('div',{className:'job-request-card'},[ React.createElement('div',{key:'header',className:'request-header'},[ React.createElement('h4',{key:'property'},`${job.property}- Unit ${job.unit}`),React.createElement('span',{key:'priority',className:`priority-badge ${job.priority}`},job.priority.toUpperCase())]),React.createElement('p',{key:'issue',className:'request-issue'},job.issue),React.createElement('div',{key:'ai-match',className:'ai-match-info'},[ React.createElement('i',{key:'icon',className:'fas fa-brain'}),React.createElement('span',{},'AI Match:'),React.createElement('strong',{},'95% compatibility'),React.createElement('span',{className:'match-reason'},' - Expertise match,available at suggested time')]),React.createElement('div',{key:'details',className:'request-details'},[ React.createElement('div',{key:'time'},[ React.createElement('i',{className:'fas fa-calendar'}),React.createElement('span',{},`Suggested:${formatTime(job.suggestedTime)}`)]),React.createElement('div',{key:'tenant'},[ React.createElement('i',{className:'fas fa-user'}),React.createElement('span',{},`Tenant:${job.tenant.name}`)]),React.createElement('div',{key:'est'},[ React.createElement('i',{className:'fas fa-dollar-sign'}),React.createElement('span',{},`Est:${formatCurrency(job.estimatedCost)}`)])]),React.createElement('div',{key:'actions',className:'request-actions'},[ React.createElement('button',{key:'decline',className:'btn btn-secondary',onClick:onDecline},'Decline'),React.createElement('button',{key:'details',className:'btn btn-info',onClick:onViewDetails},'View Details'),React.createElement('button',{key:'accept',className:'btn btn-success',onClick:onAccept},[ React.createElement('i',{key:'icon',className:'fas fa-check'}),'Accept Job' ])])])});const ThreeWayChat = ComponentFactory.createComponent('ThreeWayChat')((props,helpers)=>{const{job,vendorId,onClose}= props;const [messages,setMessages] = React.useState([]);const [inputMessage,setInputMessage] = React.useState('');const [typing,setTyping] = React.useState(null);React.useEffect(()=>{setMessages([{id:1,sender:'ai',senderName:'AI Coordinator',message:`I've created this chat to coordinate the ${job.issue}repair at ${job.property}Unit ${job.unit}. Let's confirm the scheduled time works for everyone.`,timestamp:new Date(),type:'system'},{id:2,sender:'ai',senderName:'AI Coordinator',message:`Suggested appointment:${helpers.formatDate(job.suggestedTime)}at ${helpers.formatTime(job.suggestedTime)}. Tenant ${job.tenant.name}is usually available at this time.`,timestamp:new Date(),type:'suggestion'}]);setTimeout(()=>{addMessage({sender:'tenant',senderName:job.tenant.name,message:'Yes,that time works perfectly for me!',timestamp:new Date()})},3000)},[job]);const addMessage =(messageData)=>{setMessages(prev => [...prev,{id:prev.length + 1,...messageData}])};const sendMessage =()=>{if(!inputMessage.trim())return;addMessage({sender:'vendor',senderName:'You',message:inputMessage,timestamp:new Date()});setInputMessage('');if(inputMessage.toLowerCase().includes('reschedule')){setTimeout(()=>{addMessage({sender:'ai',senderName:'AI Coordinator',message:'I can help reschedule. What times work better for you?',timestamp:new Date(),type:'system'})},1000)}};return React.createElement('div',{className:'three-way-chat'},[ React.createElement('div',{key:'header',className:'chat-header'},[ React.createElement('div',{key:'info'},[ React.createElement('h3',{key:'title'},`Work Order #${job.id}`),React.createElement('p',{key:'participants'},`You,${job.tenant.name},Property Manager`)]),React.createElement('button',{key:'close',className:'close-chat',onClick:onClose},'×')]),React.createElement('div',{key:'messages',className:'chat-messages'},messages.map(msg => React.createElement('div',{key:msg.id,className:`message ${msg.sender}${msg.type || ''}`},[ React.createElement('div',{key:'sender',className:'message-sender'},msg.senderName),React.createElement('div',{key:'content',className:'message-content'},msg.message),React.createElement('div',{key:'time',className:'message-time'},helpers.formatTime(msg.timestamp))])),typing && React.createElement('div',{key:'typing',className:'typing-indicator'},`${typing}is typing...`)),React.createElement('div',{key:'input',className:'chat-input'},[ React.createElement('input',{key:'field',type:'text',placeholder:'Type a message...',value:inputMessage,onChange:(e)=> setInputMessage(e.target.value),onKeyPress:(e)=> e.key === 'Enter' && sendMessage()}),React.createElement('button',{key:'send',onClick:sendMessage,disabled:!inputMessage.trim()},React.createElement('i',{className:'fas fa-paper-plane'}))])])});window.AppModules = window.AppModules ||{};window.AppModules.VendorPortal = VendorPortal;window.AppModules.VendorHeader = VendorHeader;window.AppModules.JobCard = JobCard;window.AppModules.ThreeWayChat = ThreeWayChat;

// PropertiesPro.jsx
const PropertiesPro = ComponentFactory.createComponent('PropertiesPro',{privateHelpers:{getOccupancyColor:(rate)=>{if(rate >= 90)return 'success';if(rate >= 75)return 'warning';return 'danger'},generateMockProperties:()=> [{id:'1',name:'Sunset Apartments',status:'active',units:24,occupancy:91.7,revenue:62700,trend:'up',address:'123 Sunset Blvd,Los Angeles,CA 90028',type:'residential'},{id:'2',name:'Downtown Office Plaza',status:'active',units:8,occupancy:75,revenue:51000,trend:'down',address:'456 Business Ave,San Francisco,CA 94105',type:'commercial'},{id:'3',name:'Garden View Townhomes',status:'maintenance',units:16,occupancy:87.5,revenue:30800,trend:'stable',address:'789 Garden St,Austin,TX 78701',type:'residential'}],filterProperties:(properties,filters)=>{return properties.filter(property =>{if(filters.search){const searchTerm = filters.search.toLowerCase();const searchText = `${property.name}${property.address}`.toLowerCase();if(!searchText.includes(searchTerm))return false}if(filters.type !== 'all' && property.type !== filters.type){return false}if(filters.status !== 'all' && property.status !== filters.status){return false}return true})}},defaultProps:{defaultView:'cards'},withPerformanceTracking:true,withErrorBoundary:true})((props,helpers)=>{const{useLocalState,classNames,getOccupancyColor,generateMockProperties,filterProperties}= helpers;const [state,updateState] = useLocalState({properties:generateMockProperties(),filters:{search:'',type:'all',status:'all'},viewMode:props.defaultView});const filteredProperties = filterProperties(state.properties,state.filters);const updateFilter =(key,value)=>{updateState({filters:{...state.filters,[key]:value}})};const totalProperties = filteredProperties.length;const totalUnits = filteredProperties.reduce((sum,p)=> sum + p.units,0);const totalRevenue = filteredProperties.reduce((sum,p)=> sum + p.revenue,0);const avgOccupancy = totalUnits > 0 ?(filteredProperties.reduce((sum,p)=> sum + p.occupancy * p.units,0)/ totalUnits).toFixed(0):0;const renderAlertBar =()=>{return React.createElement('div',{className:'alert-bar'},[ React.createElement('div',{key:'warning',className:'alert-card warning'},[ React.createElement('div',{key:'icon',className:'alert-icon'},React.createElement('i',{className:'fas fa-exclamation-triangle'})),React.createElement('div',{key:'content',className:'alert-content'},[ React.createElement('h4',{key:'title'},'3 Properties Need Attention'),React.createElement('p',{key:'desc'},'High vacancy rates detected')]),React.createElement('button',{key:'action',className:'alert-action'},'View')]),React.createElement('div',{key:'success',className:'alert-card success'},[ React.createElement('div',{key:'icon',className:'alert-icon'},React.createElement('i',{className:'fas fa-trending-up'})),React.createElement('div',{key:'content',className:'alert-content'},[ React.createElement('h4',{key:'title'},'Revenue Up 12%'),React.createElement('p',{key:'desc'},'Compared to last month')])]),React.createElement('div',{key:'info',className:'alert-card info'},[ React.createElement('div',{key:'icon',className:'alert-icon'},React.createElement('i',{className:'fas fa-lightbulb'})),React.createElement('div',{key:'content',className:'alert-content'},[ React.createElement('h4',{key:'title'},'Optimization Available'),React.createElement('p',{key:'desc'},'2 properties below market rent')]),React.createElement('button',{key:'action',className:'alert-action'},'Review')])])};const renderHeader =()=>{return React.createElement('div',{className:'page-header-pro'},[ React.createElement('div',{key:'left',className:'header-left'},[ React.createElement('h1',{key:'title'},'Properties'),React.createElement('div',{key:'metrics',className:'header-metrics'},[ React.createElement('div',{key:'total',className:'metric'},[ React.createElement('span',{key:'value',className:'metric-value'},totalProperties),React.createElement('span',{key:'label',className:'metric-label'},'Total')]),React.createElement('div',{key:'occupancy',className:'metric'},[ React.createElement('span',{key:'value',className:'metric-value'},`${avgOccupancy}%`),React.createElement('span',{key:'label',className:'metric-label'},'Occupied')]),React.createElement('div',{key:'revenue',className:'metric'},[ React.createElement('span',{key:'value',className:'metric-value'},`$${(totalRevenue / 1000).toFixed(1)}K`),React.createElement('span',{key:'label',className:'metric-label'},'Monthly Revenue')])])]),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'filter',className:'btn btn-secondary'},[ React.createElement('i',{key:'icon',className:'fas fa-filter'}),' Filter' ]),React.createElement('button',{key:'export',className:'btn btn-secondary'},[ React.createElement('i',{key:'icon',className:'fas fa-download'}),' Export' ]),React.createElement('button',{key:'add',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-plus'}),' Add Property' ])])])};const renderControls =()=>{return React.createElement('div',{className:'controls-bar'},[ React.createElement('div',{key:'search',className:'search-container'},[ React.createElement('i',{key:'icon',className:'fas fa-search'}),React.createElement('input',{key:'input',type:'text',placeholder:'Search properties,addresses,units...',value:state.filters.search,onChange:(e)=> updateFilter('search',e.target.value)})]),React.createElement('div',{key:'filters',className:'filter-controls'},[ React.createElement('select',{key:'type',className:'filter-select',value:state.filters.type,onChange:(e)=> updateFilter('type',e.target.value)},[ React.createElement('option',{key:'all',value:'all'},'All Types'),React.createElement('option',{key:'res',value:'residential'},'Residential'),React.createElement('option',{key:'com',value:'commercial'},'Commercial')]),React.createElement('select',{key:'status',className:'filter-select',value:state.filters.status,onChange:(e)=> updateFilter('status',e.target.value)},[ React.createElement('option',{key:'all',value:'all'},'All Status'),React.createElement('option',{key:'active',value:'active'},'Active'),React.createElement('option',{key:'maint',value:'maintenance'},'Maintenance')])]),React.createElement('div',{key:'view',className:'view-toggle'},[ React.createElement('button',{key:'cards',className:classNames('toggle-btn',state.viewMode === 'cards' && 'active'),onClick:()=> updateState({viewMode:'cards'})},React.createElement('i',{className:'fas fa-th-large'})),React.createElement('button',{key:'table',className:classNames('toggle-btn',state.viewMode === 'table' && 'active'),onClick:()=> updateState({viewMode:'table'})},React.createElement('i',{className:'fas fa-list'}))])])};const renderPropertyCard =(property)=>{const occupancyStatus = getOccupancyColor(property.occupancy);return React.createElement('div',{key:property.id,className:`property-card-pro ${property.status}`},[ React.createElement('div',{key:'header',className:'card-header'},[ React.createElement('h3',{key:'name'},property.name),React.createElement('span',{key:'status',className:`status-badge ${property.status}`},property.status.charAt(0).toUpperCase()+ property.status.slice(1))]),React.createElement('div',{key:'metrics',className:'card-metrics'},[ React.createElement('div',{key:'units',className:'metric-item'},[ React.createElement('div',{key:'value',className:'metric-value'},property.units),React.createElement('div',{key:'label',className:'metric-label'},'UNITS')]),React.createElement('div',{key:'occupancy',className:`metric-item ${occupancyStatus}`},[ React.createElement('div',{key:'value',className:'metric-value'},`${property.occupancy}%`),React.createElement('div',{key:'label',className:'metric-label'},'OCCUPIED')]),React.createElement('div',{key:'revenue',className:'metric-item'},[ React.createElement('div',{key:'value',className:'metric-value'},`$${(property.revenue / 1000).toFixed(1)}K`),React.createElement('div',{key:'label',className:'metric-label'},'REVENUE')])]),React.createElement('div',{key:'footer',className:'card-footer'},[ React.createElement('button',{key:'details',className:'btn-text'},[ 'More Details ',React.createElement('i',{key:'icon',className:'fas fa-arrow-right'})])])])};return React.createElement('div',{className:'properties-pro'},[ renderAlertBar(),renderHeader(),renderControls(),React.createElement('div',{className:'properties-container'},state.viewMode === 'cards' ? filteredProperties.map(renderPropertyCard):React.createElement('div',{className:'table-view-placeholder'},'Table view coming soon...'))])});window.AppModules = window.AppModules ||{};window.AppModules.PropertiesPro = PropertiesPro;

// WorldClassReporting.jsx
const WorldClassReporting =()=>{const [error,setError] = React.useState(null);if(error){return React.createElement('div',{className:'error-boundary-reporting'},[ React.createElement('h2',{key:'title'},'Reports Temporarily Unavailable'),React.createElement('p',{key:'message'},'There was an error loading the reporting system. Please try refreshing the page.'),React.createElement('button',{key:'retry',onClick:()=> setError(null),className:'btn btn-primary'},'Retry')])}try{const [reportConfig,setReportConfig] = React.useState({timeRange:'30d',properties:[],metrics:['revenue','occupancy','maintenance','expenses'],chartTypes:{revenue:'line',occupancy:'area',maintenance:'bar',expenses:'pie'},granularity:'daily',compareMode:false,comparePeriod:'30d',filters:{propertyTypes:[],unitTypes:[],tenant_status:'all'}});const [customDashboard,setCustomDashboard] = React.useState({layout:'grid',widgets:[{id:'revenue-trend',type:'line-chart',position:{x:0,y:0,w:6,h:4},title:'Revenue Trend'},{id:'occupancy-rate',type:'gauge',position:{x:6,y:0,w:3,h:4},title:'Occupancy Rate'},{id:'maintenance-costs',type:'bar-chart',position:{x:9,y:0,w:3,h:4},title:'Maintenance Costs'},{id:'property-performance',type:'heatmap',position:{x:0,y:4,w:6,h:4},title:'Property Performance'},{id:'financial-summary',type:'kpi-grid',position:{x:6,y:4,w:6,h:4},title:'Financial KPIs'}]});const [isCustomizing,setIsCustomizing] = React.useState(false);const [selectedWidget,setSelectedWidget] = React.useState(null);const [viewMode,setViewMode] = React.useState('dashboard');const generateReportingData =()=>{const properties = ['Sunset Apartments','Downtown Plaza','Garden Complex','Riverside Tower'];const currentDate = new Date();const data ={revenue:[],occupancy:[],maintenance:[],expenses:[],propertyPerformance:{},kpis:{}};for(let i = 29;i >= 0;i--){const date = new Date(currentDate);date.setDate(date.getDate()- i);data.revenue.push({date:date.toISOString().split('T')[0],value:45000 + Math.random()* 15000,collections:42000 + Math.random()* 12000,projected:47000 + Math.random()* 8000});data.occupancy.push({date:date.toISOString().split('T')[0],rate:0.85 + Math.random()* 0.1,physical:0.88 + Math.random()* 0.08,economic:0.82 + Math.random()* 0.12});data.maintenance.push({date:date.toISOString().split('T')[0],emergency:Math.random()* 2000,routine:Math.random()* 3000,preventive:Math.random()* 1500,capital:Math.random()* 5000});data.expenses.push({date:date.toISOString().split('T')[0],utilities:3000 + Math.random()* 1000,maintenance:2500 + Math.random()* 1500,management:4000 + Math.random()* 500,insurance:1200 + Math.random()* 300,taxes:2800 + Math.random()* 700,marketing:800 + Math.random()* 400})}properties.forEach(property =>{data.propertyPerformance[property] ={revenue:0.85 + Math.random()* 0.2,occupancy:0.80 + Math.random()* 0.15,maintenance:0.70 + Math.random()* 0.25,satisfaction:0.75 + Math.random()* 0.20,noi:0.82 + Math.random()* 0.18}});const latestRevenue = data.revenue[data.revenue.length - 1];const latestOccupancy = data.occupancy[data.occupancy.length - 1];const totalMaintenance = data.maintenance[data.maintenance.length - 1];data.kpis ={totalRevenue:latestRevenue.value,revenueGrowth:0.034,occupancyRate:latestOccupancy.rate,occupancyChange:0.025,avgRent:2350,rentGrowth:0.048,noi:latestRevenue.value * 0.65,noiMargin:0.651,maintenanceCosts:Object.values(totalMaintenance).reduce((a,b)=> a + b,0),maintenancePerUnit:127,vacancyLoss:8750,concessions:2100,collectionRate:0.985,turnoverRate:0.15,avgDaysVacant:23,leadConversion:0.28};return data};const [reportData,setReportData] = React.useState(generateReportingData());React.useEffect(()=>{setReportData(generateReportingData())},[reportConfig]);const ReportingHeader =()=>{return React.createElement('div',{className:'reporting-header-pro'},[ React.createElement('div',{key:'title-section',className:'header-title-section'},[ React.createElement('h1',{key:'title'},'Analytics & Reporting'),React.createElement('p',{key:'subtitle',className:'header-subtitle'},'Enterprise-grade analytics with real-time insights and custom dashboards')]),React.createElement('div',{key:'controls',className:'header-controls'},[ React.createElement('div',{key:'view-mode',className:'view-mode-selector'},['dashboard','builder','analytics'].map(mode => React.createElement('button',{key:mode,className:`mode-btn ${viewMode === mode ? 'active':''}`,onClick:()=> setViewMode(mode)},[ React.createElement('i',{key:'icon',className:`fas fa-${mode === 'dashboard' ? 'tachometer-alt':mode === 'builder' ? 'file-alt':'chart-line'}`}),' ',mode === 'builder' ? 'Reports':mode.charAt(0).toUpperCase()+ mode.slice(1)]))),React.createElement('div',{key:'time-controls',className:'time-controls'},[ React.createElement('select',{key:'range',value:reportConfig.timeRange,onChange:(e)=> setReportConfig({...reportConfig,timeRange:e.target.value}),className:'time-range-select'},[ React.createElement('option',{key:'7d',value:'7d'},'Last 7 Days'),React.createElement('option',{key:'30d',value:'30d'},'Last 30 Days'),React.createElement('option',{key:'90d',value:'90d'},'Last 90 Days'),React.createElement('option',{key:'1y',value:'1y'},'Last Year'),React.createElement('option',{key:'custom',value:'custom'},'Custom Range')]),React.createElement('button',{key:'compare',className:`compare-btn ${reportConfig.compareMode ? 'active':''}`,onClick:()=> setReportConfig({...reportConfig,compareMode:!reportConfig.compareMode})},[ React.createElement('i',{key:'icon',className:'fas fa-layer-group'}),' Compare' ])]),React.createElement('div',{key:'actions',className:'header-actions'},[ React.createElement('button',{key:'refresh',className:'btn-icon'},[ React.createElement('i',{key:'icon',className:'fas fa-sync-alt'})]),React.createElement('button',{key:'export',className:'btn btn-secondary'},[ React.createElement('i',{key:'icon',className:'fas fa-download'}),' Export' ]),React.createElement('button',{key:'save',className:'btn btn-primary'},[ React.createElement('i',{key:'icon',className:'fas fa-save'}),' Save Dashboard' ])])])])};const FiltersPanel =()=>{return React.createElement('div',{className:'filters-panel-advanced'},[ React.createElement('div',{key:'header',className:'filters-header'},[ React.createElement('h3',{key:'title'},'Advanced Filters'),React.createElement('button',{key:'clear',className:'btn-text',onClick:()=> setReportConfig({...reportConfig,filters:{propertyTypes:[],unitTypes:[],tenant_status:'all'}})},'Clear All')]),React.createElement('div',{key:'content',className:'filters-content'},[ React.createElement('div',{key:'properties',className:'filter-group'},[ React.createElement('label',{key:'label'},'Properties'),React.createElement('div',{key:'chips',className:'filter-chips'},['Sunset Apartments','Downtown Plaza','Garden Complex','Riverside Tower'].map(property => React.createElement('button',{key:property,className:`filter-chip ${reportConfig.properties.includes(property)? 'active':''}`,onClick:()=>{const newProperties = reportConfig.properties.includes(property)? reportConfig.properties.filter(p => p !== property):[...reportConfig.properties,property];setReportConfig({...reportConfig,properties:newProperties})}},property)))]),React.createElement('div',{key:'metrics',className:'filter-group'},[ React.createElement('label',{key:'label'},'Metrics'),React.createElement('div',{key:'checkboxes',className:'metric-checkboxes'},[{id:'revenue',label:'Revenue & Collections',icon:'fa-dollar-sign'},{id:'occupancy',label:'Occupancy Metrics',icon:'fa-home'},{id:'maintenance',label:'Maintenance Costs',icon:'fa-tools'},{id:'expenses',label:'Operating Expenses',icon:'fa-chart-pie'},{id:'performance',label:'Property Performance',icon:'fa-tachometer-alt'},{id:'leasing',label:'Leasing Activity',icon:'fa-handshake'}].map(metric => React.createElement('label',{key:metric.id,className:'metric-checkbox'},[ React.createElement('input',{key:'input',type:'checkbox',checked:reportConfig.metrics.includes(metric.id),onChange:(e)=>{const newMetrics = e.target.checked ? [...reportConfig.metrics,metric.id]:reportConfig.metrics.filter(m => m !== metric.id);setReportConfig({...reportConfig,metrics:newMetrics})}}),React.createElement('i',{key:'icon',className:`fas ${metric.icon}`}),React.createElement('span',{key:'label'},metric.label)])))]),React.createElement('div',{key:'granularity',className:'filter-group'},[ React.createElement('label',{key:'label'},'Granularity'),React.createElement('div',{key:'buttons',className:'granularity-buttons'},['daily','weekly','monthly'].map(gran => React.createElement('button',{key:gran,className:`granularity-btn ${reportConfig.granularity === gran ? 'active':''}`,onClick:()=> setReportConfig({...reportConfig,granularity:gran})},gran.charAt(0).toUpperCase()+ gran.slice(1))))])])])};const RevenueChart =()=>{const chartData = reportData.revenue.slice(-30);const maxValue = Math.max(...chartData.map(d => Math.max(d.value,d.collections,d.projected)));const svgWidth = 800;const svgHeight = 300;const margin ={top:20,right:20,bottom:40,left:60};const chartWidth = svgWidth - margin.left - margin.right;const chartHeight = svgHeight - margin.top - margin.bottom;const createPath =(data,valueKey)=>{return data.map((d,i)=>{const x =(i /(data.length - 1))* chartWidth;const y = chartHeight -(d[valueKey] / maxValue)* chartHeight;return `${i === 0 ? 'M':'L'}${x + margin.left}${y + margin.top}`}).join(' ')};return React.createElement('div',{className:'chart-widget revenue-chart'},[ React.createElement('div',{key:'header',className:'chart-header'},[ React.createElement('h3',{key:'title'},'Revenue Analytics'),React.createElement('div',{key:'legend',className:'chart-legend'},[ React.createElement('span',{key:'actual',className:'legend-item actual'},[ React.createElement('div',{key:'dot',className:'legend-dot'}),'Actual Revenue' ]),React.createElement('span',{key:'collections',className:'legend-item collections'},[ React.createElement('div',{key:'dot',className:'legend-dot'}),'Collections' ]),React.createElement('span',{key:'projected',className:'legend-item projected'},[ React.createElement('div',{key:'dot',className:'legend-dot'}),'Projected' ])])]),React.createElement('svg',{key:'chart',width:svgWidth,height:svgHeight,className:'revenue-svg'},[ ...Array.from({length:6},(_,i)=> React.createElement('line',{key:`grid-${i}`,x1:margin.left,y1:margin.top +(i * chartHeight / 5),x2:svgWidth - margin.right,y2:margin.top +(i * chartHeight / 5),stroke:'#f1f5f9',strokeWidth:1})),React.createElement('path',{key:'actual',d:createPath(chartData,'value'),fill:'none',stroke:'#3b82f6',strokeWidth:3,className:'revenue-line'}),React.createElement('path',{key:'collections',d:createPath(chartData,'collections'),fill:'none',stroke:'#10b981',strokeWidth:2,strokeDasharray:'5,5'}),React.createElement('path',{key:'projected',d:createPath(chartData,'projected'),fill:'none',stroke:'#f59e0b',strokeWidth:2,strokeDasharray:'2,3'}),...chartData.map((d,i)=>{const x =(i /(chartData.length - 1))* chartWidth + margin.left;const y = chartHeight -(d.value / maxValue)* chartHeight + margin.top;return React.createElement('circle',{key:`point-${i}`,cx:x,cy:y,r:4,fill:'#3b82f6',className:'data-point'})})])])};const OccupancyGauge =()=>{const rate = reportData.kpis.occupancyRate;const radius = 80;const circumference = 2 * Math.PI * radius;const strokeDasharray = circumference;const strokeDashoffset = circumference *(1 - rate);return React.createElement('div',{className:'chart-widget occupancy-gauge'},[ React.createElement('div',{key:'header',className:'chart-header'},[ React.createElement('h3',{key:'title'},'Occupancy Rate')]),React.createElement('div',{key:'gauge',className:'gauge-container'},[ React.createElement('svg',{width:200,height:200,className:'gauge-svg'},[ React.createElement('circle',{key:'bg',cx:100,cy:100,r:radius,fill:'none',stroke:'#f1f5f9',strokeWidth:12}),React.createElement('circle',{key:'progress',cx:100,cy:100,r:radius,fill:'none',stroke:rate > 0.9 ? '#10b981':rate > 0.8 ? '#f59e0b':'#ef4444',strokeWidth:12,strokeLinecap:'round',strokeDasharray,strokeDashoffset,transform:'rotate(-90 100 100)',className:'gauge-progress'})]),React.createElement('div',{key:'value',className:'gauge-value'},[ React.createElement('span',{key:'percentage',className:'gauge-percentage'},Math.round(rate * 100)+ '%'),React.createElement('span',{key:'label',className:'gauge-label'},'Occupied')])])])};const KPIGrid =()=>{const kpis = [{key:'totalRevenue',label:'Total Revenue',value:reportData.kpis.totalRevenue,format:'currency',trend:reportData.kpis.revenueGrowth},{key:'avgRent',label:'Average Rent',value:reportData.kpis.avgRent,format:'currency',trend:reportData.kpis.rentGrowth},{key:'noi',label:'Net Operating Income',value:reportData.kpis.noi,format:'currency',trend:0.023},{key:'collectionRate',label:'Collection Rate',value:reportData.kpis.collectionRate,format:'percentage',trend:0.012},{key:'maintenanceCosts',label:'Maintenance Costs',value:reportData.kpis.maintenanceCosts,format:'currency',trend:-0.045},{key:'turnoverRate',label:'Turnover Rate',value:reportData.kpis.turnoverRate,format:'percentage',trend:-0.018}];const formatValue =(value,format)=>{if(format === 'currency'){return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0}).format(value)}else if(format === 'percentage'){return new Intl.NumberFormat('en-US',{style:'percent',minimumFractionDigits:1}).format(value)}return value.toLocaleString()};return React.createElement('div',{className:'chart-widget kpi-grid'},[ React.createElement('div',{key:'header',className:'chart-header'},[ React.createElement('h3',{key:'title'},'Key Performance Indicators')]),React.createElement('div',{key:'grid',className:'kpi-grid-container'},kpis.map(kpi => React.createElement('div',{key:kpi.key,className:'kpi-card'},[ React.createElement('div',{key:'value',className:'kpi-value'},formatValue(kpi.value,kpi.format)),React.createElement('div',{key:'label',className:'kpi-label'},kpi.label),React.createElement('div',{key:'trend',className:`kpi-trend ${kpi.trend >= 0 ? 'positive':'negative'}`},[ React.createElement('i',{key:'icon',className:`fas fa-arrow-${kpi.trend >= 0 ? 'up':'down'}`}),' ',Math.abs(kpi.trend * 100).toFixed(1)+ '%' ])])))])};const PropertyHeatmap =()=>{const properties = Object.keys(reportData.propertyPerformance);const metrics = ['revenue','occupancy','maintenance','satisfaction','noi'];return React.createElement('div',{className:'chart-widget property-heatmap'},[ React.createElement('div',{key:'header',className:'chart-header'},[ React.createElement('h3',{key:'title'},'Property Performance Matrix')]),React.createElement('div',{key:'heatmap',className:'heatmap-container'},[ React.createElement('div',{key:'labels',className:'heatmap-labels'},metrics.map(metric => React.createElement('div',{key:metric,className:'metric-label'},metric.charAt(0).toUpperCase()+ metric.slice(1)))),React.createElement('div',{key:'grid',className:'heatmap-grid'},properties.map(property => React.createElement('div',{key:property,className:'property-row'},[ React.createElement('div',{key:'name',className:'property-name'},property),...metrics.map(metric =>{const value = reportData.propertyPerformance[property][metric];const intensity = Math.round(value * 100);return React.createElement('div',{key:metric,className:'heatmap-cell',style:{backgroundColor:`hsl(${value > 0.8 ? 120:value > 0.6 ? 60:0},70%,${85 - intensity * 0.3}%)`,color:intensity > 50 ? 'white':'black'},title:`${property}${metric}:${Math.round(value * 100)}%`},Math.round(value * 100)+ '%')})])))])])};const DashboardView =()=>{return React.createElement('div',{className:'dashboard-view'},[ React.createElement('div',{key:'filters',className:'dashboard-sidebar'},[ FiltersPanel()]),React.createElement('div',{key:'content',className:'dashboard-content'},[ React.createElement('div',{key:'row1',className:'dashboard-row'},[ React.createElement('div',{key:'revenue',className:'widget-large'},[ RevenueChart()]),React.createElement('div',{key:'occupancy',className:'widget-small'},[ OccupancyGauge()])]),React.createElement('div',{key:'row2',className:'dashboard-row'},[ React.createElement('div',{key:'kpis',className:'widget-large'},[ KPIGrid()]),React.createElement('div',{key:'heatmap',className:'widget-large'},[ PropertyHeatmap()])])])])};const RentRollReport =()=>{const rentRollData = [{unit:'101',tenant:'Sarah Johnson',rent:2400,lease_start:'2024-01-15',lease_end:'2024-12-31',status:'Current',balance:0},{unit:'102',tenant:'Michael Chen',rent:2350,lease_start:'2023-11-01',lease_end:'2024-10-31',status:'Current',balance:0},{unit:'103',tenant:'Emily Davis',rent:2500,lease_start:'2024-03-01',lease_end:'2025-02-28',status:'Current',balance:0},{unit:'104',tenant:'Vacant',rent:2450,lease_start:null,lease_end:null,status:'Vacant',balance:0},{unit:'105',tenant:'David Wilson',rent:2300,lease_start:'2024-02-15',lease_end:'2025-01-31',status:'Late',balance:2300},{unit:'201',tenant:'Lisa Garcia',rent:2600,lease_start:'2023-12-01',lease_end:'2024-11-30',status:'Current',balance:0},{unit:'202',tenant:'James Rodriguez',rent:2550,lease_start:'2024-04-01',lease_end:'2025-03-31',status:'Current',balance:0},{unit:'203',tenant:'Vacant',rent:2500,lease_start:null,lease_end:null,status:'Vacant',balance:0},{unit:'204',tenant:'Amanda White',rent:2450,lease_start:'2024-01-01',lease_end:'2024-12-31',status:'Notice',balance:0},{unit:'205',tenant:'Robert Taylor',rent:2700,lease_start:'2023-09-15',lease_end:'2024-08-31',status:'Current',balance:0}];return React.createElement('div',{className:'report-container rent-roll'},[ React.createElement('div',{key:'header',className:'report-header'},[ React.createElement('h2',{key:'title'},'Rent Roll Report'),React.createElement('div',{key:'summary',className:'report-summary'},[ React.createElement('span',{key:'total'},`Total Units:${rentRollData.length}`),React.createElement('span',{key:'occupied'},`Occupied:${rentRollData.filter(r => r.status !== 'Vacant').length}`),React.createElement('span',{key:'revenue'},`Monthly Revenue:$${rentRollData.filter(r => r.status !== 'Vacant').reduce((sum,r)=> sum + r.rent,0).toLocaleString()}`)])]),React.createElement('div',{key:'table',className:'report-table-container'},[ React.createElement('table',{className:'report-table'},[ React.createElement('thead',{key:'head'},[ React.createElement('tr',{key:'row'},[ React.createElement('th',{key:'unit'},'Unit'),React.createElement('th',{key:'tenant'},'Tenant'),React.createElement('th',{key:'rent'},'Rent'),React.createElement('th',{key:'lease_start'},'Lease Start'),React.createElement('th',{key:'lease_end'},'Lease End'),React.createElement('th',{key:'status'},'Status'),React.createElement('th',{key:'balance'},'Balance')])]),React.createElement('tbody',{key:'body'},rentRollData.map((row,index)=> React.createElement('tr',{key:index,className:`status-${row.status.toLowerCase()}`},[ React.createElement('td',{key:'unit'},row.unit),React.createElement('td',{key:'tenant'},row.tenant),React.createElement('td',{key:'rent'},`$${row.rent.toLocaleString()}`),React.createElement('td',{key:'lease_start'},row.lease_start || '-'),React.createElement('td',{key:'lease_end'},row.lease_end || '-'),React.createElement('td',{key:'status'},[ React.createElement('span',{className:`status-badge ${row.status.toLowerCase()}`},row.status)]),React.createElement('td',{key:'balance'},row.balance > 0 ? `$${row.balance.toLocaleString()}`:'$0')])))])])])};const IncomeStatementReport =()=>{const incomeData ={revenue:{rental_income:24750,late_fees:350,parking_fees:1200,laundry_income:450,other_income:200},expenses:{management_fees:2475,maintenance:3200,utilities:1800,insurance:1200,property_taxes:2100,marketing:400,office_supplies:150,legal_professional:500}};const totalRevenue = Object.values(incomeData.revenue).reduce((sum,val)=> sum + val,0);const totalExpenses = Object.values(incomeData.expenses).reduce((sum,val)=> sum + val,0);const netIncome = totalRevenue - totalExpenses;return React.createElement('div',{className:'report-container income-statement'},[ React.createElement('div',{key:'header',className:'report-header'},[ React.createElement('h2',{key:'title'},'Income Statement'),React.createElement('div',{key:'period',className:'report-period'},'For the Month Ending:' + new Date().toLocaleDateString())]),React.createElement('div',{key:'content',className:'income-statement-content'},[ React.createElement('div',{key:'revenue',className:'income-section'},[ React.createElement('h3',{key:'title'},'Revenue'),React.createElement('div',{key:'items',className:'income-items'},Object.entries(incomeData.revenue).map(([key,value])=> React.createElement('div',{key,className:'income-item'},[ React.createElement('span',{key:'label'},key.replace(/_/g,' ').replace(/\b\w/g,l => l.toUpperCase())),React.createElement('span',{key:'value'},`$${value.toLocaleString()}`)]))),React.createElement('div',{key:'total',className:'income-total'},[ React.createElement('span',{key:'label'},'Total Revenue'),React.createElement('span',{key:'value'},`$${totalRevenue.toLocaleString()}`)])]),React.createElement('div',{key:'expenses',className:'income-section'},[ React.createElement('h3',{key:'title'},'Expenses'),React.createElement('div',{key:'items',className:'income-items'},Object.entries(incomeData.expenses).map(([key,value])=> React.createElement('div',{key,className:'income-item'},[ React.createElement('span',{key:'label'},key.replace(/_/g,' ').replace(/\b\w/g,l => l.toUpperCase())),React.createElement('span',{key:'value'},`$${value.toLocaleString()}`)]))),React.createElement('div',{key:'total',className:'income-total'},[ React.createElement('span',{key:'label'},'Total Expenses'),React.createElement('span',{key:'value'},`$${totalExpenses.toLocaleString()}`)])]),React.createElement('div',{key:'net',className:'net-income-section'},[ React.createElement('div',{key:'total',className:'net-income-total'},[ React.createElement('span',{key:'label'},'Net Operating Income'),React.createElement('span',{key:'value',className:netIncome >= 0 ? 'positive':'negative'},`$${netIncome.toLocaleString()}`)])])])])};const DelinquencyReport =()=>{const delinquencyData = [{unit:'105',tenant:'David Wilson',amount:2300,days:15,category:'0-30',contact_attempts:3,last_payment:'2024-06-15'},{unit:'304',tenant:'Mark Johnson',amount:4950,days:45,category:'31-60',contact_attempts:8,last_payment:'2024-05-01'},{unit:'207',tenant:'Jennifer Brown',amount:1150,days:12,category:'0-30',contact_attempts:2,last_payment:'2024-07-02'},{unit:'401',tenant:'Carlos Martinez',amount:7200,days:78,category:'60+',contact_attempts:12,last_payment:'2024-04-20'},{unit:'302',tenant:'Angela Davis',amount:2800,days:38,category:'31-60',contact_attempts:6,last_payment:'2024-05-15'}];const totalDelinquent = delinquencyData.reduce((sum,row)=> sum + row.amount,0);return React.createElement('div',{className:'report-container delinquency'},[ React.createElement('div',{key:'header',className:'report-header'},[ React.createElement('h2',{key:'title'},'Delinquency Report'),React.createElement('div',{key:'summary',className:'delinquency-summary'},[ React.createElement('div',{key:'total',className:'summary-item'},[ React.createElement('span',{key:'label'},'Total Delinquent'),React.createElement('span',{key:'value',className:'amount-large'},`$${totalDelinquent.toLocaleString()}`)]),React.createElement('div',{key:'count',className:'summary-item'},[ React.createElement('span',{key:'label'},'Delinquent Units'),React.createElement('span',{key:'value'},delinquencyData.length)])])]),React.createElement('div',{key:'table',className:'report-table-container'},[ React.createElement('table',{className:'report-table'},[ React.createElement('thead',{key:'head'},[ React.createElement('tr',{key:'row'},[ React.createElement('th',{key:'unit'},'Unit'),React.createElement('th',{key:'tenant'},'Tenant'),React.createElement('th',{key:'amount'},'Amount'),React.createElement('th',{key:'days'},'Days Late'),React.createElement('th',{key:'category'},'Category'),React.createElement('th',{key:'contacts'},'Contact Attempts'),React.createElement('th',{key:'last_payment'},'Last Payment')])]),React.createElement('tbody',{key:'body'},delinquencyData.map((row,index)=> React.createElement('tr',{key:index,className:`category-${row.category.replace(/[^a-zA-Z0-9]/g,'')}`},[ React.createElement('td',{key:'unit'},row.unit),React.createElement('td',{key:'tenant'},row.tenant),React.createElement('td',{key:'amount',className:'amount'},`$${row.amount.toLocaleString()}`),React.createElement('td',{key:'days'},row.days),React.createElement('td',{key:'category'},[ React.createElement('span',{className:`category-badge ${row.category.replace(/[^a-zA-Z0-9]/g,'')}`},row.category)]),React.createElement('td',{key:'contacts'},row.contact_attempts),React.createElement('td',{key:'last_payment'},row.last_payment)])))])])])};const OccupancyReport =()=>{const occupancyData ={current_month:{total_units:10,occupied:8,vacant:2,rate:80,vacant_units:['104','203']},trends:[{month:'Jan 2024',occupied:9,rate:90},{month:'Feb 2024',occupied:8,rate:80},{month:'Mar 2024',occupied:9,rate:90},{month:'Apr 2024',occupied:8,rate:80},{month:'May 2024',occupied:7,rate:70},{month:'Jun 2024',occupied:8,rate:80}]};return React.createElement('div',{className:'report-container occupancy'},[ React.createElement('div',{key:'header',className:'report-header'},[ React.createElement('h2',{key:'title'},'Occupancy Report'),React.createElement('div',{key:'current',className:'occupancy-current'},[ React.createElement('div',{key:'rate',className:'occupancy-rate'},[ React.createElement('span',{key:'value',className:'rate-value'},`${occupancyData.current_month.rate}%`),React.createElement('span',{key:'label'},'Current Occupancy')]),React.createElement('div',{key:'units',className:'unit-breakdown'},[ React.createElement('span',{key:'occupied'},`${occupancyData.current_month.occupied}Occupied`),React.createElement('span',{key:'vacant'},`${occupancyData.current_month.vacant}Vacant`)])])]),React.createElement('div',{key:'content',className:'occupancy-content'},[ React.createElement('div',{key:'vacant',className:'vacant-units'},[ React.createElement('h3',{key:'title'},'Vacant Units'),React.createElement('div',{key:'list',className:'vacant-list'},occupancyData.current_month.vacant_units.map(unit => React.createElement('div',{key:unit,className:'vacant-unit'},[ React.createElement('span',{key:'unit'},`Unit ${unit}`),React.createElement('span',{key:'status'},'Available')])))]),React.createElement('div',{key:'trends',className:'occupancy-trends'},[ React.createElement('h3',{key:'title'},'6-Month Trend'),React.createElement('div',{key:'chart',className:'trend-chart'},occupancyData.trends.map(trend => React.createElement('div',{key:trend.month,className:'trend-bar'},[ React.createElement('div',{key:'bar',className:'bar',style:{height:`${trend.rate}%`}}),React.createElement('span',{key:'month'},trend.month.split(' ')[0]),React.createElement('span',{key:'rate'},`${trend.rate}%`)])))])])])};const MaintenanceSummaryReport =()=>{const maintenanceData ={summary:{total_requests:47,completed:32,in_progress:12,scheduled:3,total_cost:8750},by_category:[{category:'Plumbing',count:15,cost:3200,avg_time:2.5},{category:'Electrical',count:8,cost:2100,avg_time:3.2},{category:'HVAC',count:12,cost:2800,avg_time:4.1},{category:'Appliances',count:7,cost:450,avg_time:1.8},{category:'General',count:5,cost:200,avg_time:1.2}],recent_requests:[{unit:'101',category:'Plumbing',description:'Leaky faucet in kitchen',status:'Completed',cost:125,date:'2024-07-10'},{unit:'205',category:'HVAC',description:'AC not cooling properly',status:'In Progress',cost:0,date:'2024-07-12'},{unit:'304',category:'Electrical',description:'Outlet not working',status:'Scheduled',cost:0,date:'2024-07-13'}]};return React.createElement('div',{className:'report-container maintenance'},[ React.createElement('div',{key:'header',className:'report-header'},[ React.createElement('h2',{key:'title'},'Maintenance Summary'),React.createElement('div',{key:'summary',className:'maintenance-summary'},[ React.createElement('div',{key:'total',className:'summary-stat'},[ React.createElement('span',{key:'value'},maintenanceData.summary.total_requests),React.createElement('span',{key:'label'},'Total Requests')]),React.createElement('div',{key:'completed',className:'summary-stat'},[ React.createElement('span',{key:'value'},maintenanceData.summary.completed),React.createElement('span',{key:'label'},'Completed')]),React.createElement('div',{key:'cost',className:'summary-stat'},[ React.createElement('span',{key:'value'},`$${maintenanceData.summary.total_cost.toLocaleString()}`),React.createElement('span',{key:'label'},'Total Cost')])])]),React.createElement('div',{key:'content',className:'maintenance-content'},[ React.createElement('div',{key:'categories',className:'category-breakdown'},[ React.createElement('h3',{key:'title'},'By Category'),React.createElement('div',{key:'table',className:'category-table'},maintenanceData.by_category.map(cat => React.createElement('div',{key:cat.category,className:'category-row'},[ React.createElement('span',{key:'category'},cat.category),React.createElement('span',{key:'count'},`${cat.count}requests`),React.createElement('span',{key:'cost'},`$${cat.cost.toLocaleString()}`),React.createElement('span',{key:'time'},`${cat.avg_time}h avg`)])))]),React.createElement('div',{key:'recent',className:'recent-requests'},[ React.createElement('h3',{key:'title'},'Recent Requests'),React.createElement('div',{key:'list',className:'request-list'},maintenanceData.recent_requests.map((req,index)=> React.createElement('div',{key:index,className:'request-item'},[ React.createElement('div',{key:'info',className:'request-info'},[ React.createElement('span',{key:'unit',className:'unit'},`Unit ${req.unit}`),React.createElement('span',{key:'category',className:'category'},req.category),React.createElement('span',{key:'description'},req.description)]),React.createElement('div',{key:'status',className:'request-status'},[ React.createElement('span',{key:'badge',className:`status-badge ${req.status.toLowerCase().replace(' ','-')}`},req.status),React.createElement('span',{key:'cost'},req.cost > 0 ? `$${req.cost}`:'Pending'),React.createElement('span',{key:'date'},req.date)])])))])])])};const ReportsView =()=>{const [selectedReport,setSelectedReport] = React.useState('rent-roll');const reports = [{id:'rent-roll',name:'Rent Roll',icon:'fa-list',component:RentRollReport},{id:'income-statement',name:'Income Statement',icon:'fa-chart-line',component:IncomeStatementReport},{id:'delinquency',name:'Delinquency Report',icon:'fa-exclamation-triangle',component:DelinquencyReport},{id:'occupancy',name:'Occupancy Report',icon:'fa-home',component:OccupancyReport},{id:'maintenance',name:'Maintenance Summary',icon:'fa-tools',component:MaintenanceSummaryReport}];const selectedReportComponent = reports.find(r => r.id === selectedReport)?.component;return React.createElement('div',{className:'reports-view'},[ React.createElement('div',{key:'sidebar',className:'reports-sidebar'},[ React.createElement('h3',{key:'title'},'Essential Reports'),React.createElement('div',{key:'list',className:'reports-list'},reports.map(report => React.createElement('button',{key:report.id,className:`report-item ${selectedReport === report.id ? 'active':''}`,onClick:()=> setSelectedReport(report.id)},[ React.createElement('i',{key:'icon',className:`fas ${report.icon}`}),React.createElement('span',{key:'name'},report.name)])))]),React.createElement('div',{key:'content',className:'reports-content'},[ selectedReportComponent && React.createElement(selectedReportComponent,{key:selectedReport})])])};return React.createElement('div',{className:'world-class-reporting'},[ ReportingHeader(),React.createElement('div',{key:'content',className:'reporting-content'},[ viewMode === 'dashboard' && DashboardView(),viewMode === 'builder' && ReportsView(),viewMode === 'analytics' && React.createElement('div',{className:'analytics-view'},'Advanced Analytics Coming Soon')])])}catch(err){setError(err);return React.createElement('div',{className:'error-boundary-reporting'},[ React.createElement('h2',{key:'title'},'Reports Error'),React.createElement('p',{key:'message'},'There was an error rendering the reports. Please try again.'),React.createElement('button',{key:'retry',onClick:()=> setError(null),className:'btn btn-primary'},'Retry')])}};window.AppModules = window.AppModules ||{};window.AppModules.WorldClassReporting = WorldClassReporting;

// PropertiesFixed.jsx
const PropertiesFixed =()=>{const [properties,setProperties] = React.useState([{id:1,name:'Sunset Apartments',type:'RESIDENTIAL',address:'123 Sunset Blvd,Los Angeles,CA 90028',units:24,occupancy:91.7,revenue:62700},{id:2,name:'Downtown Office Plaza',type:'COMMERCIAL',address:'456 Business Ave,San Francisco,CA 94105',units:8,occupancy:75,revenue:51000},{id:3,name:'Garden View Townhomes',type:'RESIDENTIAL',address:'789 Garden St,Austin,TX 78701',units:16,occupancy:87.5,revenue:30800}]);const [searchTerm,setSearchTerm] = React.useState('');const [typeFilter,setTypeFilter] = React.useState('All Types');const [statusFilter,setStatusFilter] = React.useState('All Status');return(<div className="properties-page-fixed">{}<div className="alerts-container"><div className="alert-item warning"><div className="alert-icon-wrapper warning"><i className="fas fa-exclamation-triangle"></i></div><div className="alert-content"><h4>3 Properties Need Attention</h4><p>High vacancy rates detected</p></div><button className="alert-button">View</button></div><div className="alert-item success"><div className="alert-icon-wrapper success"><i className="fas fa-chart-line"></i></div><div className="alert-content"><h4>Revenue Up 12%</h4><p>Compared to last month</p></div></div><div className="alert-item info"><div className="alert-icon-wrapper info"><i className="fas fa-lightbulb"></i></div><div className="alert-content"><h4>Optimization Available</h4><p>2 properties below market rent</p></div><button className="alert-button">Review</button></div></div>{}<div className="properties-header"><div className="header-content"><h1>Properties</h1><div className="header-stats"><span><strong>3</strong> TOTAL</span><span><strong>88%</strong> OCCUPIED</span><span><strong>$144.5K</strong> MONTHLY REVENUE</span></div></div><div className="header-actions"><button className="btn btn-secondary"><i className="fas fa-filter"></i> Filter </button><button className="btn btn-secondary"><i className="fas fa-download"></i> Export </button><button className="btn btn-primary"><i className="fas fa-plus"></i> Add Property </button></div></div>{}<div className="search-filter-bar"><div className="search-input-wrapper"><i className="fas fa-search"></i><input type="text" placeholder="Search properties,addresses,units..." value={searchTerm}onChange={(e)=> setSearchTerm(e.target.value)}/></div><select className="filter-dropdown" value={typeFilter}onChange={(e)=> setTypeFilter(e.target.value)}><option>All Types</option><option>Residential</option><option>Commercial</option></select><select className="filter-dropdown" value={statusFilter}onChange={(e)=> setStatusFilter(e.target.value)}><option>All Status</option><option>Active</option><option>Maintenance</option></select></div>{}<div className="properties-list">{properties.map(property =>(<div key={property.id}className="property-item"><div className="property-header"><h3>{property.name}</h3><span className="property-type">{property.type}</span></div><p className="property-address">{property.address}</p><div className="property-stats"><div className="stat"><div className="stat-value">{property.units}</div><div className="stat-label">UNITS</div></div><div className="stat"><div className="stat-value" style={{color:property.occupancy > 90 ? '#22c55e':'#f59e0b'}}>{property.occupancy}% </div><div className="stat-label">OCCUPIED</div></div><div className="stat"><div className="stat-value">${(property.revenue / 1000).toFixed(1)}K</div><div className="stat-label">REVENUE</div></div></div></div>))}</div></div>)};window.AppModules = window.AppModules ||{};window.AppModules.PropertiesFixed = PropertiesFixed;